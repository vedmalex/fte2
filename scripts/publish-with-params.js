#!/usr/bin/env node

/**
 * Enhanced Lerna Publish with Parameters
 *
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–∞–∫–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ Lerna
 * —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–æ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π.
 *
 * –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
 * - –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –≤–µ—Ä—Å–∏–π
 * - Canary —Ä–µ–ª–∏–∑—ã —Å –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –≤–µ—Ä—Å–∏–π
 * - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö registry –∏ dist-tag
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ dependency-compatibility-manager
 * - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∏ –Ω–µ–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º—ã
 */

const { spawn, execSync } = require('node:child_process')
const fs = require('node:fs')
const path = require('node:path')

class LernaPublisher {
  constructor() {
    this.args = process.argv.slice(2)
    this.options = this.parseArgs()
    this.rootDir = process.cwd()
    this.lernaConfig = this.loadLernaConfig()
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
   */
  parseArgs() {
    const options = {
      version: null,
      forcePublish: false,
      canary: false,
      preid: null,
      registry: null,
      distTag: null,
      yes: false,
      dryRun: false,
      help: false,
    }

    for (let i = 0; i < this.args.length; i++) {
      const arg = this.args[i]

      switch (arg) {
        case '--force-publish':
        case '--force':
          options.forcePublish = true
          break
        case '--canary':
          options.canary = true
          break
        case '--preid':
          options.preid = this.args[++i] || 'alpha'
          break
        case '--registry':
          options.registry = this.args[++i]
          break
        case '--dist-tag':
        case '--tag':
          options.distTag = this.args[++i] || 'latest'
          break
        case '--yes':
        case '-y':
          options.yes = true
          break
        case '--dry-run':
          options.dryRun = true
          break
        case '--help':
        case '-h':
          options.help = true
          break
        default:
          // –ï—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å --, —Å—á–∏—Ç–∞–µ–º –µ–≥–æ –≤–µ—Ä—Å–∏–µ–π
          if (!arg.startsWith('--') && !options.version) {
            options.version = arg
          }
      }
    }

    if (options.canary) {
      options.forcePublish = true
    }

    return options
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Lerna
   */
  loadLernaConfig() {
    try {
      const lernaConfigPath = path.join(this.rootDir, 'lerna.json')
      if (fs.existsSync(lernaConfigPath)) {
        return JSON.parse(fs.readFileSync(lernaConfigPath, 'utf8'))
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è  Could not load lerna.json:', error.message)
    }
    return {}
  }

  /**
   * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É
   */
  showHelp() {
    console.log(`
üöÄ Enhanced Lerna Publisher with Parameters

Usage: node scripts/publish-with-params.js [version] [options]

Arguments:
  version              Specific version to publish (e.g., "1.2.3", "1.2.3-beta.1")

Options:
  --force-publish      Force publish all packages regardless of changes
  --canary            Create a canary release with git sha
  --preid <id>        Prerelease identifier (default: "alpha")
  --registry <url>    Custom npm registry URL
  --dist-tag <tag>    Distribution tag (default: "latest")
  --yes               Skip all confirmation prompts
  --dry-run           Show what would be published without doing it
  --help              Show this help message

Examples:
  # Publish specific version
  node scripts/publish-with-params.js 1.2.3

  # Force publish specific version
  node scripts/publish-with-params.js 1.2.3 --force-publish

  # Canary release
  node scripts/publish-with-params.js --canary

  # Publish with custom registry and tag
  node scripts/publish-with-params.js 1.2.3 --registry https://npm.example.com --dist-tag beta

  # Prerelease with custom identifier
  node scripts/publish-with-params.js --preid rc

Environment Variables:
  NPM_TOKEN           NPM authentication token
  GITHUB_TOKEN        GitHub token for releases

Note: This script automatically prepares dependencies for Lerna compatibility.
`)
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é –∏–∑ git
   */
  getCurrentVersion() {
    try {
      return this.lernaConfig.version || '0.1.0'
    } catch (error) {
      return '0.1.0'
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç canary –≤–µ—Ä—Å–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ git commit
   */
  generateCanaryVersion() {
    try {
      let currentVersion = this.getCurrentVersion()
      // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π prerelease –∏–ª–∏ canary –∏–∑ —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
      const prereleaseIndex = currentVersion.indexOf('-')
      if (prereleaseIndex !== -1) {
        currentVersion = currentVersion.substring(0, prereleaseIndex)
      }
      const gitSha = execSync('git rev-parse --short HEAD', {
        encoding: 'utf8',
      }).trim()
      return `${currentVersion}-canary.${gitSha}`
    } catch (error) {
      console.error('‚ùå Could not generate canary version:', error.message)
      return `${this.getCurrentVersion()}-canary.unknown`
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç prerelease –≤–µ—Ä—Å–∏—é
   */
  generatePrereleaseVersion() {
    let currentVersion = this.getCurrentVersion()
    const preid = this.options.preid || 'alpha'

    // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π prerelease –∏–∑ —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    const prereleaseIndex = currentVersion.indexOf('-')
    if (prereleaseIndex !== -1) {
      currentVersion = currentVersion.substring(0, prereleaseIndex)
    }

    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –Ω–æ–º–µ—Ä prerelease
    try {
      const tags = execSync('git tag --sort=-version:refname', {
        encoding: 'utf8',
      })
        .split('\n')
        .filter((tag) => tag.includes(`-${preid}`))
        .map((tag) => {
          const match = tag.match(new RegExp(`${preid}\\.(\\d+)`))
          return match ? Number.parseInt(match[1]) : 0
        })

      const nextNumber = tags.length > 0 ? Math.max(...tags) + 1 : 1
      return `${currentVersion}-${preid}.${nextNumber}`
    } catch (error) {
      return `${currentVersion}-${preid}.1`
    }
  }

  /**
   * –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
   */
  async prepareDependencies() {
    console.log('üîß Preparing dependencies for Lerna publish...')

    try {
      // –ó–∞–ø—É—Å–∫–∞–µ–º dependency compatibility manager
      await this.runCommand('node', [
        'scripts/dependency-compatibility-manager.js',
        'backup-and-resolve',
      ])

      console.log('‚úÖ Dependencies prepared successfully')
    } catch (error) {
      console.error('‚ùå Failed to prepare dependencies:', error.message)
      throw error
    }
  }

  /**
   * –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
   */
  async restoreDependencies() {
    console.log('üîß Restoring dependencies after publish...')

    try {
      await this.runCommand('node', [
        'scripts/dependency-compatibility-manager.js',
        'restore',
      ])

      console.log('‚úÖ Dependencies restored successfully')
    } catch (error) {
      console.warn('‚ö†Ô∏è  Failed to restore dependencies:', error.message)
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏ –æ—à–∏–±–∫–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç git commit –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
   */
  async createGitCommit(version) {
    try {
      console.log(`üìù Creating git commit for version ${version}...`)

      const commitMessage = `chore: release v${version}`

      // –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
      await this.runCommand('git', ['add', '.'])

      // –°–æ–∑–¥–∞–µ–º –∫–æ–º–º–∏—Ç
      await this.runCommand('git', ['commit', '-m', commitMessage])

      console.log(`‚úÖ Git commit created: ${commitMessage}`)
    } catch (error) {
      console.warn('‚ö†Ô∏è  Could not create git commit:', error.message)
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏ –æ—à–∏–±–∫–µ –∫–æ–º–º–∏—Ç–∞
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç git tag –¥–ª—è —Ä–µ–ª–∏–∑–∞
   */
  async createGitTag(version) {
    try {
      console.log(`üè∑Ô∏è  Creating git tag for version ${version}...`)

      const tagName = `v${version}`

      // –°–æ–∑–¥–∞–µ–º –∞–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–≥
      await this.runCommand('git', [
        'tag',
        '-a',
        tagName,
        '-m',
        `Release v${version}`,
      ])

      console.log(`‚úÖ Git tag created: ${tagName}`)
    } catch (error) {
      console.warn('‚ö†Ô∏è  Could not create git tag:', error.message)
    }
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
   */
  getFinalVersion() {
    if (this.options.canary) {
      return this.generateCanaryVersion()
    }

    if (this.options.preid) {
      return this.generatePrereleaseVersion()
    }

    return this.options.version || this.getCurrentVersion()
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É Lerna publish
   */
  buildLernaCommand() {
    const version = this.getFinalVersion()
    const command = ['publish']

    // –î–æ–±–∞–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
    if (version) {
      command.push(version)
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    if (this.options.forcePublish) {
      command.push('--force-publish')
    }

    if (this.options.registry) {
      command.push('--registry', this.options.registry)
    }

    if (this.options.distTag) {
      command.push('--dist-tag', this.options.distTag)
    }

    if (this.options.yes) {
      command.push('--yes')
    }

    if (this.options.dryRun) {
      command.push('--dry-run')
    }

    // –î–æ–±–∞–≤–ª—è–µ–º prerelease –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (this.options.preid) {
      command.push('--preid', this.options.preid)
    }

    return command
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –≤ –¥–æ—á–µ—Ä–Ω–µ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
   */
  async runCommand(command, args = []) {
    return new Promise((resolve, reject) => {
      console.log(`‚ö° Running: ${command} ${args.join(' ')}`)

      const child = spawn(command, args, {
        cwd: this.rootDir,
        stdio: 'inherit',
        shell: true,
      })

      child.on('close', (code) => {
        if (code === 0) {
          resolve()
        } else {
          reject(new Error(`Command failed with exit code ${code}`))
        }
      })

      child.on('error', (error) => {
        reject(error)
      })
    })
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
   */
  async publish() {
    try {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø—Ä–∞–≤–∫—É –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–∞
      if (this.options.help) {
        this.showHelp()
        return
      }

      const version = this.getFinalVersion()
      console.log('üöÄ Starting enhanced Lerna publish...')
      console.log(`üì¶ Target version: ${version}`)
      console.log('üîß Options:', this.options)

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
      await this.prepareDependencies()

      // –°–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É Lerna
      const lernaCommand = this.buildLernaCommand()
      console.log(`üìã Lerna command: lerna ${lernaCommand.join(' ')}`)

      if (this.options.dryRun) {
        console.log(
          'üîç DRY RUN - Would execute:',
          `lerna ${lernaCommand.join(' ')}`,
        )
        return
      }

      // –ó–∞–ø—É—Å–∫–∞–µ–º Lerna publish
      await this.runCommand('lerna', lernaCommand)

      // –°–æ–∑–¥–∞–µ–º git commit –µ—Å–ª–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
      if (!this.options.dryRun && !this.options.canary) {
        await this.createGitCommit(version)
        await this.createGitTag(version)
      }

    } finally {
      // –í—Å–µ–≥–¥–∞ –ø—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
      try {
        await this.restoreDependencies()
      } catch (restoreError) {
        console.error(
          '‚ùå Failed to restore dependencies:',
          restoreError.message,
        )
      }
    }
  }
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  const publisher = new LernaPublisher()
  publisher.publish().catch((error) => {
    console.error('‚ùå Fatal error:', error.message)
    process.exit(1)
  })
}

module.exports = LernaPublisher
