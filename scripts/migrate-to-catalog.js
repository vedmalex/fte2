#!/usr/bin/env node

/**
 * Catalog Migration Script
 *
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –º–∏–≥—Ä–∏—Ä—É–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏–∑ workspace packages
 * –≤ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é Bun catalog —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤ root package.json.
 *
 * –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
 * - –°–∫–∞–Ω–∏—Ä—É–µ—Ç –≤—Å–µ packages –≤ apps/* –∏ packages/*
 * - –ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (runtime, build, testing, development)
 * - –†–∞–∑—Ä–µ—à–∞–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –≤–µ—Ä—Å–∏–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
 * - –°–æ–∑–¥–∞–µ—Ç catalog —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤ root package.json
 * - –ó–∞–º–µ–Ω—è–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–∞ catalog:* references
 */

const fs = require('node:fs')
const path = require('node:path')
const { execSync } = require('node:child_process')

class CatalogMigrator {
  constructor() {
    this.rootDir = process.cwd()
    this.rootPackageJson = path.join(this.rootDir, 'package.json')
    this.workspacePatterns = ['apps/*/package.json', 'packages/*/package.json']
    this.catalogs = {
      catalog: {},
      catalogs: {
        build: {},
        testing: {},
        development: {},
      },
    }
    this.stats = {
      packagesScanned: 0,
      dependenciesFound: 0,
      conflictsResolved: 0,
      catalogEntries: 0,
    }
  }

  /**
   * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É
   */
  showHelp() {
    console.log(`
üîß Catalog Migration Script - Migrate to Bun Catalogs

Usage: node scripts/migrate-to-catalog.js <command>

Commands:
  analyze          Analyze dependencies without making changes
  migrate          Perform migration to catalog structure
  help            Show this help message

Examples:
  # Analyze current dependencies
  node scripts/migrate-to-catalog.js analyze

  # Migrate to catalog structure
  node scripts/migrate-to-catalog.js migrate

Migration Process:
  1. Scans all workspace packages for dependencies
  2. Groups dependencies by category (runtime, build, testing, development)
  3. Resolves version conflicts automatically
  4. Creates catalog structure in root package.json
  5. Replaces dependencies with catalog:* references

Supported Categories:
  - Runtime: Core dependencies (react, lodash, axios, etc.)
  - Build: Build tools (typescript, vite, esbuild, etc.)
  - Testing: Test frameworks (vitest, jest, etc.)
  - Development: Dev tools (eslint, prettier, etc.)
`)
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
   */
  categorizeDependency(depName, depVersion) {
    // Runtime dependencies
    const runtimeDeps = [
      'react',
      'react-dom',
      'vue',
      'angular',
      'svelte',
      'lodash',
      'axios',
      'express',
      'mongoose',
      'redis',
      'zod',
      'yup',
      'joi',
      'chalk',
      'commander',
    ]

    // Build dependencies
    const buildDeps = [
      'typescript',
      'vite',
      'webpack',
      'rollup',
      'esbuild',
      'babel',
      '@babel',
      'swc',
      '@swc',
      'tsc',
      'tsx',
      'postcss',
      'tailwindcss',
      'sass',
      'less',
    ]

    // Testing dependencies
    const testingDeps = [
      'vitest',
      'jest',
      '@vitest',
      '@jest',
      'testing-library',
      'supertest',
      'cypress',
      'playwright',
      'mocha',
      'chai',
    ]

    // Development dependencies
    const devDeps = [
      'eslint',
      '@eslint',
      'prettier',
      '@typescript-eslint',
      'husky',
      'lint-staged',
      'commitlint',
      'nodemon',
    ]

    const name = depName.toLowerCase()

    if (runtimeDeps.some((dep) => name.includes(dep))) {
      return 'catalog'
    }

    if (buildDeps.some((dep) => name.includes(dep))) {
      return 'build'
    }

    if (testingDeps.some((dep) => name.includes(dep))) {
      return 'testing'
    }

    if (devDeps.some((dep) => name.includes(dep))) {
      return 'development'
    }

    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - runtime
    return 'catalog'
  }

  /**
   * –†–∞–∑—Ä–µ—à–∞–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –≤–µ—Ä—Å–∏–π
   */
  resolveVersionConflict(depName, versions) {
    if (versions.length === 1) {
      return versions[0]
    }

    // –ï—Å–ª–∏ –≤—Å–µ –≤–µ—Ä—Å–∏–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —ç—Ç—É –≤–µ—Ä—Å–∏—é
    const uniqueVersions = [...new Set(versions)]
    if (uniqueVersions.length === 1) {
      return uniqueVersions[0]
    }

    // –î–ª—è —Ä–∞–∑–Ω—ã—Ö –≤–µ—Ä—Å–∏–π –≤—ã–±–∏—Ä–∞–µ–º —Å–∞–º—É—é –Ω–æ–≤—É—é (–ø—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞)
    // –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –ª–æ–≥–∏–∫—É —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
    console.log(`‚ö†Ô∏è  Version conflict for ${depName}:`, versions.join(', '))

    // –ü–æ–∫–∞ –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é –≤–µ—Ä—Å–∏—é –∫–∞–∫ fallback
    const result = versions[0]
    console.log(`‚úÖ Resolved to: ${result}`)
    this.stats.conflictsResolved++

    return result
  }

  /**
   * –°–∫–∞–Ω–∏—Ä—É–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤ package.json —Ñ–∞–π–ª–µ
   */
  scanPackageDependencies(packageFile) {
    try {
      const content = fs.readFileSync(packageFile, 'utf8')
      const packageData = JSON.parse(content)

      const dependencies = {
        ...(packageData.dependencies || {}),
        ...(packageData.devDependencies || {}),
        ...(packageData.peerDependencies || {}),
      }

      return dependencies
    } catch (error) {
      console.error(`‚ùå Error scanning ${packageFile}:`, error.message)
      return {}
    }
  }

  /**
   * –ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ workspace packages
   */
  findWorkspacePackages() {
    const packageFiles = []

    for (const pattern of this.workspacePatterns) {
      try {
        const files = execSync(
          `find . -name "package.json" -path "./${pattern}" -type f`,
          {
            encoding: 'utf8',
            cwd: this.rootDir,
          },
        )
          .trim()
          .split('\n')
          .filter(Boolean)

        packageFiles.push(...files)
      } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
      }
    }

    return packageFiles
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
   */
  async analyze() {
    console.log('üîç Analyzing dependencies for catalog migration...')

    try {
      const packageFiles = this.findWorkspacePackages()
      console.log(`üì¶ Found ${packageFiles.length} workspace packages`)

      const allDependencies = new Map()

      for (const packageFile of packageFiles) {
        this.stats.packagesScanned++

        const dependencies = this.scanPackageDependencies(packageFile)

        for (const [depName, depVersion] of Object.entries(dependencies)) {
          // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º workspace –∏ –ª–æ–∫–∞–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
          if (
            depVersion.startsWith('workspace:') ||
            depVersion.startsWith('file:')
          ) {
            continue
          }

          this.stats.dependenciesFound++

          if (!allDependencies.has(depName)) {
            allDependencies.set(depName, {
              versions: [],
              category: this.categorizeDependency(depName, depVersion),
            })
          }

          const depInfo = allDependencies.get(depName)
          if (!depInfo.versions.includes(depVersion)) {
            depInfo.versions.push(depVersion)
          }
        }
      }

      // –†–∞–∑—Ä–µ—à–∞–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –≤–µ—Ä—Å–∏–π –∏ —Å—Ç—Ä–æ–∏–º catalogs
      for (const [depName, depInfo] of allDependencies) {
        const resolvedVersion = this.resolveVersionConflict(
          depName,
          depInfo.versions,
        )
        const category = depInfo.category

        if (category === 'catalog') {
          this.catalogs.catalog[depName] = resolvedVersion
        } else {
          this.catalogs.catalogs[category][depName] = resolvedVersion
        }

        this.stats.catalogEntries++
      }

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      console.log('\nüìä Analysis Results:')
      console.log(`üì¶ Packages scanned: ${this.stats.packagesScanned}`)
      console.log(`üîó Dependencies found: ${this.stats.dependenciesFound}`)
      console.log(`‚öîÔ∏è  Conflicts resolved: ${this.stats.conflictsResolved}`)
      console.log(`üìã Catalog entries: ${this.stats.catalogEntries}`)

      console.log('\nüì¶ Generated Catalogs:')
      if (Object.keys(this.catalogs.catalog).length > 0) {
        console.log('\nRuntime Dependencies (catalog):')
        for (const [dep, version] of Object.entries(this.catalogs.catalog)) {
          console.log(`  ${dep}: ${version}`)
        }
      }

      for (const [category, deps] of Object.entries(this.catalogs.catalogs)) {
        if (Object.keys(deps).length > 0) {
          console.log(`\n${category} Dependencies:`)
          for (const [dep, version] of Object.entries(deps)) {
            console.log(`  ${dep}: ${version}`)
          }
        }
      }

      console.log('\n‚úÖ Analysis completed successfully!')
      console.log('üí° Run "migrate" command to apply these changes')
    } catch (error) {
      console.error('‚ùå Error during analysis:', error.message)
      process.exit(1)
    }
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç –º–∏–≥—Ä–∞—Ü–∏—é –≤ catalog —Å—Ç—Ä—É–∫—Ç—É—Ä—É
   */
  async migrate() {
    console.log('üîÑ Starting catalog migration...')

    try {
      // –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
      await this.analyze()

      if (this.stats.catalogEntries === 0) {
        console.log('‚ÑπÔ∏è  No dependencies to migrate')
        return
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π root package.json
      const rootPackage = JSON.parse(
        fs.readFileSync(this.rootPackageJson, 'utf8'),
      )

      // –û–±–Ω–æ–≤–ª—è–µ–º workspaces —Å–µ–∫—Ü–∏—é
      if (!rootPackage.workspaces) {
        rootPackage.workspaces = { packages: ['packages/*'] }
      }

      rootPackage.workspaces.catalog = this.catalogs.catalog
      rootPackage.workspaces.catalogs = this.catalogs.catalogs

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π package.json
      fs.writeFileSync(
        this.rootPackageJson,
        JSON.stringify(rootPackage, null, 2) + '\n',
      )

      console.log('\n‚úÖ Migration completed successfully!')
      console.log(
        `üì¶ Updated root package.json with ${this.stats.catalogEntries} catalog entries`,
      )
      console.log('üéØ Dependencies are now centralized in catalogs')

      // –¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤ –ø–∞–∫–µ—Ç–∞—Ö –Ω–∞ catalog:*
      await this.updateWorkspacePackages()
    } catch (error) {
      console.error('‚ùå Error during migration:', error.message)
      process.exit(1)
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç workspace –ø–∞–∫–µ—Ç—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è catalog —Å—Å—ã–ª–æ–∫
   */
  async updateWorkspacePackages() {
    console.log('\nüîÑ Updating workspace packages to use catalog references...')

    try {
      const packageFiles = this.findWorkspacePackages()
      let updatedPackages = 0

      for (const packageFile of packageFiles) {
        try {
          const content = fs.readFileSync(packageFile, 'utf8')
          const packageData = JSON.parse(content)
          let modified = false

          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—Ü–∏—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
          for (const section of [
            'dependencies',
            'devDependencies',
            'peerDependencies',
          ]) {
            if (!packageData[section]) continue

            for (const [depName, depVersion] of Object.entries(
              packageData[section],
            )) {
              // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º workspace –∏ –ª–æ–∫–∞–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
              if (
                depVersion.startsWith('workspace:') ||
                depVersion.startsWith('file:')
              ) {
                continue
              }

              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –≤ –∫–∞—Ç–∞–ª–æ–≥–∞—Ö
              const category = this.categorizeDependency(depName, depVersion)

              if (category === 'catalog' && this.catalogs.catalog[depName]) {
                packageData[section][depName] = 'catalog:'
                modified = true
              } else if (
                category !== 'catalog' &&
                this.catalogs.catalogs[category]?.[depName]
              ) {
                packageData[section][depName] = `catalog:${category}`
                modified = true
              }
            }
          }

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
          if (modified) {
            fs.writeFileSync(
              packageFile,
              JSON.stringify(packageData, null, 2) + '\n',
            )
            console.log(`‚úÖ Updated: ${packageFile}`)
            updatedPackages++
          }
        } catch (error) {
          console.error(`‚ùå Error updating ${packageFile}:`, error.message)
        }
      }

      console.log(`\n‚úÖ Updated ${updatedPackages} workspace packages`)
      console.log('üéØ All dependencies now use catalog:* references')
    } catch (error) {
      console.error('‚ùå Error updating workspace packages:', error.message)
    }
  }
}

// Main execution
async function main() {
  const command = process.argv[2] || 'help'

  const migrator = new CatalogMigrator()

  switch (command) {
    case 'analyze':
      await migrator.analyze()
      break
    case 'migrate':
      await migrator.migrate()
      break
    case 'help':
    case '--help':
    case '-h':
      migrator.showHelp()
      break
    default:
      console.error(`‚ùå Unknown command: ${command}`)
      console.error('Available commands: analyze, migrate, help')
      process.exit(1)
  }
}

// Run if executed directly
if (require.main === module) {
  main().catch((error) => {
    console.error('‚ùå Fatal error:', error.message)
    process.exit(1)
  })
}

module.exports = CatalogMigrator
