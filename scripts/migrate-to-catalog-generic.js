#!/usr/bin/env node

/**
 * Generic Catalog Migration Script v2.0
 *
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –≤ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é Bun catalog —Å—Ç—Ä—É–∫—Ç—É—Ä—É.
 *
 * –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
 * - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
 * - –ü–ª–∞–≥–∏–Ω–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
 * - –£–º–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –≤–µ—Ä—Å–∏–π
 * - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
 * - –ì–∏–±–∫–∏–µ workspace –ø–∞—Ç—Ç–µ—Ä–Ω—ã
 */

const fs = require('node:fs')
const path = require('node:path')
const { execSync } = require('node:child_process')
const { parse } = require('jsonc-parser')

class GenericCatalogMigrator {
  constructor(configPath = null) {
    this.rootDir = process.cwd()
    this.rootPackageJson = path.join(this.rootDir, 'package.json')

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    this.config = this.loadConfig(configPath)

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É catalogs
    this.catalogs = this.initializeCatalogs()

    this.stats = {
      packagesScanned: 0,
      dependenciesFound: 0,
      conflictsResolved: 0,
      catalogEntries: 0,
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–µ—Ñ–æ–ª—Ç–Ω—É—é
   */
  loadConfig(configPath) {
    const defaultConfig = {
      workspacePatterns: ['packages/*/package.json', 'apps/*/package.json'],
      catalogs: {
        runtime: { name: 'catalog', priority: 1 },
        build: { name: 'build', priority: 2 },
        testing: { name: 'testing', priority: 3 },
        development: { name: 'development', priority: 4 },
      },
      categorization: {
        rules: [
          // Runtime dependencies
          {
            category: 'runtime',
            matchers: [
              { type: 'exact', values: ['react', 'react-dom', 'vue', 'angular', 'svelte'] },
              { type: 'contains', values: ['lodash', 'axios', 'express', 'mongoose', 'redis'] },
              { type: 'pattern', pattern: '^@types/', category: 'build' }, // TypeScript types -> build
            ]
          },
          // Build dependencies
          {
            category: 'build',
            matchers: [
              { type: 'contains', values: ['typescript', 'vite', 'webpack', 'rollup', 'esbuild', 'babel', 'swc', 'postcss', 'tailwindcss', 'sass', 'less'] },
              { type: 'startsWith', values: ['@babel/', '@swc/', '@rollup/'] },
            ]
          },
          // Testing dependencies
          {
            category: 'testing',
            matchers: [
              { type: 'contains', values: ['vitest', 'jest', 'testing-library', 'supertest', 'cypress', 'playwright', 'mocha', 'chai'] },
              { type: 'startsWith', values: ['@vitest/', '@jest/', '@testing-library/'] },
            ]
          },
          // Development dependencies
          {
            category: 'development',
            matchers: [
              { type: 'contains', values: ['eslint', 'prettier', 'husky', 'lint-staged', 'commitlint', 'nodemon'] },
              { type: 'startsWith', values: ['@eslint/', '@typescript-eslint/'] },
            ]
          }
        ],
        defaultCategory: 'runtime'
      },
      versionConflictResolution: {
        strategy: 'semantic-latest', // semantic-latest, latest, first, manual
        options: {
          preferStable: true,
          allowPreReleases: false,
        }
      },
      dependencyTypes: {
        include: ['dependencies', 'devDependencies', 'peerDependencies'],
        exclude: ['optionalDependencies', 'bundledDependencies'],
      }
    }

    if (configPath && fs.existsSync(configPath)) {
      try {
        const content = fs.readFileSync(configPath, 'utf8')
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º jsonc-parser –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSONC
        const userConfig = parse(content)
        return this.deepMerge(defaultConfig, userConfig)
      } catch (error) {
        console.warn(`‚ö†Ô∏è  Error loading config ${configPath}:`, error.message)
        console.warn('Using default configuration')
      }
    }

    return defaultConfig
  }

  /**
   * –ì–ª—É–±–æ–∫–æ–µ —Å–ª–∏—è–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤
   */
  deepMerge(target, source) {
    const result = { ...target }

    for (const key in source) {
      if (source[key] && typeof source[key] === 'object' && !Array.isArray(source[key])) {
        result[key] = this.deepMerge(target[key] || {}, source[key])
      } else {
        result[key] = source[key]
      }
    }

    return result
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É catalogs –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
   */
  initializeCatalogs() {
    const catalogs = { catalogs: {} }

    for (const [categoryKey, categoryConfig] of Object.entries(this.config.catalogs)) {
      if (categoryConfig.name === 'catalog') {
        catalogs.catalog = {}
      } else {
        catalogs.catalogs[categoryConfig.name] = {}
      }
    }

    return catalogs
  }

  /**
   * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É
   */
  showHelp() {
    console.log(`
üîß Generic Catalog Migration Script v2.0 - Migrate to Bun Catalogs

Usage: node scripts/migrate-to-catalog-generic.js <command> [options]

Commands:
  analyze          Analyze dependencies without making changes
  migrate          Perform migration to catalog structure
  init-config      Generate default configuration file
  help            Show this help message

Options:
  --config <file>  Path to configuration file (default: migrate-catalog.config.jsonc)
  --dry-run        Show what would be changed without applying changes

Examples:
  # Analyze with default config
  node scripts/migrate-to-catalog-generic.js analyze

  # Migrate with custom config
  node scripts/migrate-to-catalog-generic.js migrate --config my-config.jsonc

  # Generate default config
  node scripts/migrate-to-catalog-generic.js init-config

Migration Process:
  1. Load configuration and rules
  2. Scan all workspace packages
  3. Apply categorization rules to dependencies
  4. Resolve version conflicts using configured strategy
  5. Create catalog structure in root package.json
  6. Update workspace packages to use catalog:* references

Configuration:
  Create migrate-catalog.config.jsonc to customize:
  - Workspace patterns
  - Categorization rules
  - Version conflict resolution strategy
  - Dependency types to include/exclude
`)
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
   */
  initConfig() {
    const configPath = 'migrate-catalog.config.jsonc'

    if (fs.existsSync(configPath)) {
      console.log(`‚ö†Ô∏è  Config file already exists: ${configPath}`)
      console.log('Use --force to overwrite')
      return
    }

    fs.writeFileSync(configPath, JSON.stringify(this.config, null, 2) + '\n')
    console.log(`‚úÖ Generated default config: ${configPath}`)
    console.log('Edit this file to customize migration rules')
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Å –ø–æ–º–æ—â—å—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º—ã—Ö –ø—Ä–∞–≤–∏–ª
   */
  categorizeDependency(depName, depVersion) {
    for (const rule of this.config.categorization.rules) {
      for (const matcher of rule.matchers) {
        let matches = false

        switch (matcher.type) {
          case 'exact':
            matches = matcher.values.includes(depName)
            break
          case 'contains':
            matches = matcher.values.some(value => depName.includes(value))
            break
          case 'startsWith':
            matches = matcher.values.some(value => depName.startsWith(value))
            break
          case 'pattern':
            matches = new RegExp(matcher.pattern).test(depName)
            break
        }

        if (matches) {
          // –ï—Å–ª–∏ matcher –∏–º–µ–µ—Ç —Å–≤–æ—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
          return matcher.category || rule.category
        }
      }
    }

    return this.config.categorization.defaultCategory
  }

  /**
   * –£–º–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –≤–µ—Ä—Å–∏–π
   */
  resolveVersionConflict(depName, versions) {
    if (versions.length === 1) {
      return versions[0]
    }

    const uniqueVersions = [...new Set(versions)]
    if (uniqueVersions.length === 1) {
      return uniqueVersions[0]
    }

    const strategy = this.config.versionConflictResolution.strategy

    switch (strategy) {
      case 'semantic-latest':
        return this.resolveSemanticLatest(depName, uniqueVersions)
      case 'latest':
        return this.resolveLatest(depName, uniqueVersions)
      case 'first':
        return this.resolveFirst(depName, uniqueVersions)
      case 'manual':
        throw new Error(`Manual resolution required for ${depName}: ${uniqueVersions.join(', ')}`)
      default:
        console.warn(`‚ö†Ô∏è  Unknown strategy ${strategy}, using 'first'`)
        return this.resolveFirst(depName, uniqueVersions)
    }
  }

  /**
   * –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ø–æ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π –≤–µ—Ä—Å–∏–∏ (—Å–∞–º–∞—è –Ω–æ–≤–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–∞—è)
   */
  resolveSemanticLatest(depName, versions) {
    // –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ semver
    const sorted = versions.sort((a, b) => {
      // –£–±–∏—Ä–∞–µ–º ^ –∏ ~ –ø—Ä–µ—Ñ–∏–∫—Å—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
      const cleanA = a.replace(/^[~^]/, '')
      const cleanB = b.replace(/^[~^]/, '')

      // –ü—Ä–æ—Å—Ç–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–π (–¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
      return cleanB.localeCompare(cleanA, undefined, { numeric: true })
    })

    const result = sorted[0]
    console.log(`‚úÖ Resolved ${depName} to: ${result} (semantic-latest)`)
    this.stats.conflictsResolved++
    return result
  }

  /**
   * –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏ (–ø—Ä–æ—Å—Ç–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ)
   */
  resolveLatest(depName, versions) {
    const sorted = versions.sort((a, b) => b.localeCompare(a, undefined, { numeric: true }))
    const result = sorted[0]
    console.log(`‚úÖ Resolved ${depName} to: ${result} (latest)`)
    this.stats.conflictsResolved++
    return result
  }

  /**
   * –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–π –≤–µ—Ä—Å–∏–µ–π (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ)
   */
  resolveFirst(depName, versions) {
    const result = versions[0]
    console.log(`‚úÖ Resolved ${depName} to: ${result} (first)`)
    this.stats.conflictsResolved++
    return result
  }

  /**
   * –°–∫–∞–Ω–∏—Ä—É–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤ package.json —Ñ–∞–π–ª–µ —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–æ–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
   */
  scanPackageDependencies(packageFile) {
    try {
      const content = fs.readFileSync(packageFile, 'utf8')
      const packageData = JSON.parse(content)

      const dependencies = {}

      // –°–æ–±–∏—Ä–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏–∑ –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤
      for (const depType of this.config.dependencyTypes.include) {
        if (packageData[depType]) {
          Object.assign(dependencies, packageData[depType])
        }
      }

      // –ò—Å–∫–ª—é—á–∞–µ–º –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ —Ç–∏–ø—ã
      for (const depType of this.config.dependencyTypes.exclude) {
        if (packageData[depType]) {
          for (const depName of Object.keys(packageData[depType])) {
            delete dependencies[depName]
          }
        }
      }

      return dependencies
    } catch (error) {
      console.error(`‚ùå Error scanning ${packageFile}:`, error.message)
      return {}
    }
  }

  /**
   * –ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ workspace packages —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
   */
  findWorkspacePackages() {
    const packageFiles = []

    for (const pattern of this.config.workspacePatterns) {
      try {
        // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∞–∫ –ø—Ä–æ—Å—Ç—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤, —Ç–∞–∫ –∏ —Å–ª–æ–∂–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
        if (pattern.includes('*')) {
          const files = execSync(
            `find . -name "package.json" -path "./${pattern}" -not -path "*/node_modules/*" -type f`,
            {
              encoding: 'utf8',
              cwd: this.rootDir,
            },
          )
            .trim()
            .split('\n')
            .filter(Boolean)

          packageFiles.push(...files)
        } else {
          // –ü—Ä—è–º–æ–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
          if (fs.existsSync(pattern)) {
            packageFiles.push(pattern)
          }
        }
      } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
      }
    }

    return [...new Set(packageFiles)] // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
   */
  async analyze() {
    console.log('üîç Analyzing dependencies for generic catalog migration...')

    try {
      const packageFiles = this.findWorkspacePackages()
      console.log(`üì¶ Found ${packageFiles.length} workspace packages`)

      const allDependencies = new Map()

      for (const packageFile of packageFiles) {
        this.stats.packagesScanned++

        const dependencies = this.scanPackageDependencies(packageFile)

        for (const [depName, depVersion] of Object.entries(dependencies)) {
          // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º workspace –∏ –ª–æ–∫–∞–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
          if (
            depVersion.startsWith('workspace:') ||
            depVersion.startsWith('file:')
          ) {
            continue
          }

          this.stats.dependenciesFound++

          if (!allDependencies.has(depName)) {
            allDependencies.set(depName, {
              versions: [],
              category: this.categorizeDependency(depName, depVersion),
            })
          }

          const depInfo = allDependencies.get(depName)
          if (!depInfo.versions.includes(depVersion)) {
            depInfo.versions.push(depVersion)
          }
        }
      }

      // –†–∞–∑—Ä–µ—à–∞–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –≤–µ—Ä—Å–∏–π –∏ —Å—Ç—Ä–æ–∏–º catalogs
      for (const [depName, depInfo] of allDependencies) {
        const resolvedVersion = this.resolveVersionConflict(
          depName,
          depInfo.versions,
        )
        const category = depInfo.category

        const catalogConfig = this.config.catalogs[category]
        if (catalogConfig.name === 'catalog') {
          this.catalogs.catalog[depName] = resolvedVersion
        } else {
          this.catalogs.catalogs[catalogConfig.name][depName] = resolvedVersion
        }

        this.stats.catalogEntries++
      }

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      this.showAnalysisResults()

    } catch (error) {
      console.error('‚ùå Error during analysis:', error.message)
      process.exit(1)
    }
  }

  /**
   * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
   */
  showAnalysisResults() {
    console.log('\nüìä Analysis Results:')
    console.log(`üì¶ Packages scanned: ${this.stats.packagesScanned}`)
    console.log(`üîó Dependencies found: ${this.stats.dependenciesFound}`)
    console.log(`‚öîÔ∏è  Conflicts resolved: ${this.stats.conflictsResolved}`)
    console.log(`üìã Catalog entries: ${this.stats.catalogEntries}`)

    console.log('\nüì¶ Generated Catalogs:')
    if (Object.keys(this.catalogs.catalog).length > 0) {
      console.log('\nRuntime Dependencies (catalog):')
      for (const [dep, version] of Object.entries(this.catalogs.catalog)) {
        console.log(`  ${dep}: ${version}`)
      }
    }

    for (const [categoryName, deps] of Object.entries(this.catalogs.catalogs)) {
      if (Object.keys(deps).length > 0) {
        console.log(`\n${categoryName} Dependencies:`)
        for (const [dep, version] of Object.entries(deps)) {
          console.log(`  ${dep}: ${version}`)
        }
      }
    }

    console.log('\n‚úÖ Analysis completed successfully!')
    console.log('üí° Run "migrate" command to apply these changes')
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç –º–∏–≥—Ä–∞—Ü–∏—é –≤ catalog —Å—Ç—Ä—É–∫—Ç—É—Ä—É
   */
  async migrate() {
    console.log('üîÑ Starting generic catalog migration...')

    try {
      // –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
      await this.analyze()

      if (this.stats.catalogEntries === 0) {
        console.log('‚ÑπÔ∏è  No dependencies to migrate')
        return
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π root package.json
      const rootPackage = JSON.parse(
        fs.readFileSync(this.rootPackageJson, 'utf8'),
      )

      // –û–±–Ω–æ–≤–ª—è–µ–º workspaces —Å–µ–∫—Ü–∏—é
      if (!rootPackage.workspaces) {
        rootPackage.workspaces = { packages: ['packages/*'] }
      }

      // –ú–µ—Ä–¥–∂–∏–º catalogs
      rootPackage.workspaces.catalog = {
        ...rootPackage.workspaces.catalog,
        ...this.catalogs.catalog
      }

      rootPackage.workspaces.catalogs = {
        ...rootPackage.workspaces.catalogs,
        ...this.catalogs.catalogs
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π package.json
      fs.writeFileSync(
        this.rootPackageJson,
        JSON.stringify(rootPackage, null, 2) + '\n',
      )

      console.log('\n‚úÖ Migration completed successfully!')
      console.log(
        `üì¶ Updated root package.json with ${this.stats.catalogEntries} catalog entries`,
      )
      console.log('üéØ Dependencies are now centralized in catalogs')

      // –¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤ –ø–∞–∫–µ—Ç–∞—Ö –Ω–∞ catalog:*
      await this.updateWorkspacePackages()
    } catch (error) {
      console.error('‚ùå Error during migration:', error.message)
      process.exit(1)
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç workspace –ø–∞–∫–µ—Ç—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è catalog —Å—Å—ã–ª–æ–∫
   */
  async updateWorkspacePackages() {
    console.log('\nüîÑ Updating workspace packages to use catalog references...')

    try {
      const packageFiles = this.findWorkspacePackages()
      let updatedPackages = 0

      for (const packageFile of packageFiles) {
        try {
          const content = fs.readFileSync(packageFile, 'utf8')
          const packageData = JSON.parse(content)
          let modified = false

          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—Ü–∏—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
          for (const section of this.config.dependencyTypes.include) {
            if (!packageData[section]) continue

            for (const [depName, depVersion] of Object.entries(
              packageData[section],
            )) {
              // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º workspace –∏ –ª–æ–∫–∞–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
              if (
                depVersion.startsWith('workspace:') ||
                depVersion.startsWith('file:')
              ) {
                continue
              }

              // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤ –∫–∞—Ç–∞–ª–æ–≥–∞—Ö
              const category = this.categorizeDependency(depName, depVersion)
              const catalogConfig = this.config.catalogs[category]

              if (catalogConfig.name === 'catalog' && this.catalogs.catalog[depName]) {
                packageData[section][depName] = 'catalog:'
                modified = true
              } else if (
                catalogConfig.name !== 'catalog' &&
                this.catalogs.catalogs[catalogConfig.name]?.[depName]
              ) {
                packageData[section][depName] = `catalog:${catalogConfig.name}`
                modified = true
              }
            }
          }

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
          if (modified) {
            fs.writeFileSync(
              packageFile,
              JSON.stringify(packageData, null, 2) + '\n',
            )
            console.log(`‚úÖ Updated: ${packageFile}`)
            updatedPackages++
          }
        } catch (error) {
          console.error(`‚ùå Error updating ${packageFile}:`, error.message)
        }
      }

      console.log(`\n‚úÖ Updated ${updatedPackages} workspace packages`)
      console.log('üéØ All dependencies now use catalog:* references')
    } catch (error) {
      console.error('‚ùå Error updating workspace packages:', error.message)
    }
  }
}

// Main execution
async function main() {
  const args = process.argv.slice(2)
  const command = args[0] || 'help'

  // –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
  const options = {}
  for (let i = 1; i < args.length; i++) {
    if (args[i].startsWith('--')) {
      const key = args[i].slice(2)
      const value = args[i + 1] && !args[i + 1].startsWith('--') ? args[++i] : true
      options[key] = value
    }
  }

  const configPath = options.config || 'migrate-catalog.config.jsonc'
  const migrator = new GenericCatalogMigrator(configPath)

  switch (command) {
    case 'analyze':
      await migrator.analyze()
      break
    case 'migrate':
      await migrator.migrate()
      break
    case 'init-config':
      migrator.initConfig()
      break
    case 'help':
    case '--help':
    case '-h':
      migrator.showHelp()
      break
    default:
      console.error(`‚ùå Unknown command: ${command}`)
      console.error('Available commands: analyze, migrate, init-config, help')
      process.exit(1)
  }
}

// Run if executed directly
if (require.main === module) {
  main().catch((error) => {
    console.error('‚ùå Fatal error:', error.message)
    process.exit(1)
  })
}

module.exports = GenericCatalogMigrator
