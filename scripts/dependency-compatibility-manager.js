#!/usr/bin/env node

/**
 * Dependency Compatibility Manager for Bun + Lerna Integration
 *
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –º–µ–∂–¥—É:
 * - Bun catalog:* dependencies (Bun v1.2.16+)
 * - workspace:* dependencies (–ª–æ–∫–∞–ª—å–Ω—ã–µ –ø–∞–∫–µ—Ç—ã)
 * - Lerna publish (–Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç catalog:* protocol)
 *
 * Usage:
 *   node scripts/dependency-compatibility-manager.js backup-and-resolve
 *   lerna publish
 *   node scripts/dependency-compatibility-manager.js restore
 */

const fs = require('node:fs')
const path = require('node:path')
const { execSync } = require('node:child_process')

class DependencyCompatibilityManager {
  constructor() {
    this.backupFile = path.join(process.cwd(), '.dependency-backup.json')
    this.rootPackageJson = path.join(process.cwd(), 'package.json')
    this.lernaConfigFile = path.join(process.cwd(), 'lerna.json')
    this.workspacePatterns = ['apps/*/package.json', 'packages/*/package.json']

    this.catalogCache = new Map()
    this.lernaConfig = null
    this.backup = {
      timestamp: new Date().toISOString(),
      files: new Map(),
      catalogs: null,
      lernaConfig: null,
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç Lerna –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
   */
  async loadLernaConfig() {
    try {
      if (fs.existsSync(this.lernaConfigFile)) {
        this.lernaConfig = JSON.parse(
          fs.readFileSync(this.lernaConfigFile, 'utf8'),
        )
        console.log(
          'üìã Loaded Lerna config - version:',
          this.lernaConfig.version,
        )

        // –û–±–Ω–æ–≤–ª—è–µ–º workspace patterns –∏–∑ Lerna –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if (this.lernaConfig.packages) {
          this.workspacePatterns = Array.isArray(this.lernaConfig.packages)
            ? this.lernaConfig.packages.map((pattern) => {
              // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º packages/* –≤ packages/*/package.json
              return pattern.endsWith('/*')
                ? `${pattern.slice(0, -2)}/*/package.json`
                : `${pattern}/package.json`
            })
            : [this.lernaConfig.packages.replace('/*', '/*/package.json')]
        }

        console.log('üìÇ Workspace patterns:', this.workspacePatterns.join(', '))
      } else {
        console.log('‚ÑπÔ∏è  No lerna.json found, using default patterns')
      }
    } catch (error) {
      console.error('‚ùå Error loading lerna.json:', error.message)
      throw error
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç catalogs –∏–∑ root package.json
   */
  async loadCatalogs() {
    try {
      const rootPackage = JSON.parse(
        fs.readFileSync(this.rootPackageJson, 'utf8'),
      )

      if (rootPackage.workspaces?.catalog) {
        this.backup.catalogs = {
          catalog: rootPackage.workspaces.catalog,
          catalogs: rootPackage.workspaces.catalogs || {},
        }
        console.log('üì¶ Loaded catalogs from root package.json')
      } else {
        console.log('‚ÑπÔ∏è  No catalogs found in root package.json')
      }
    } catch (error) {
      console.error('‚ùå Error loading root package.json:', error.message)
      throw error
    }
  }

  /**
   * –ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ package.json —Ñ–∞–π–ª—ã –≤ workspace
   */
  async findWorkspacePackages() {
    const packageFiles = []

    for (const pattern of this.workspacePatterns) {
      try {
        const files = execSync(
          `find . -name "package.json" -path "./${pattern}" -type f`,
          {
            encoding: 'utf8',
            cwd: process.cwd(),
          },
        )
          .trim()
          .split('\n')
          .filter(Boolean)

        packageFiles.push(...files)
      } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–æ–∏—Å–∫–∞ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
      }
    }

    return packageFiles
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω package.json —Ñ–∞–π–ª
   */
  async processPackageFile(packageFile) {
    try {
      const content = fs.readFileSync(packageFile, 'utf8')
      const packageData = JSON.parse(content)
      let modified = false

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –¥–ª—è backup
      this.backup.files.set(packageFile, content)

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
      const depsToProcess = [
        ...(packageData.dependencies
          ? Object.entries(packageData.dependencies)
          : []),
        ...(packageData.devDependencies
          ? Object.entries(packageData.devDependencies)
          : []),
        ...(packageData.peerDependencies
          ? Object.entries(packageData.peerDependencies)
          : []),
      ]

      for (const [depName, depVersion] of depsToProcess) {
        if (this.isCatalogDependency(depVersion)) {
          const resolvedVersion = await this.resolveCatalogDependency(
            depName,
            depVersion,
          )
          if (resolvedVersion && resolvedVersion !== depVersion) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å
            if (packageData.dependencies && packageData.dependencies[depName]) {
              packageData.dependencies[depName] = resolvedVersion
            } else if (
              packageData.devDependencies &&
              packageData.devDependencies[depName]
            ) {
              packageData.devDependencies[depName] = resolvedVersion
            } else if (
              packageData.peerDependencies &&
              packageData.peerDependencies[depName]
            ) {
              packageData.peerDependencies[depName] = resolvedVersion
            }
            modified = true
            console.log(
              `üîÑ ${packageFile}: ${depName}: ${depVersion} ‚Üí ${resolvedVersion}`,
            )
          }
        } else if (this.isWorkspaceDependency(depVersion)) {
          const resolvedVersion = await this.resolveWorkspaceDependency(
            depName,
            packageFile,
          )
          if (resolvedVersion && resolvedVersion !== depVersion) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å
            if (packageData.dependencies && packageData.dependencies[depName]) {
              packageData.dependencies[depName] = resolvedVersion
            } else if (
              packageData.devDependencies &&
              packageData.devDependencies[depName]
            ) {
              packageData.devDependencies[depName] = resolvedVersion
            } else if (
              packageData.peerDependencies &&
              packageData.peerDependencies[depName]
            ) {
              packageData.peerDependencies[depName] = resolvedVersion
            }
            modified = true
            console.log(
              `üîÑ ${packageFile}: ${depName}: ${depVersion} ‚Üí ${resolvedVersion}`,
            )
          }
        }
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –µ—Å–ª–∏ –±—ã–ª–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
      if (modified) {
        fs.writeFileSync(
          packageFile,
          JSON.stringify(packageData, null, 2) + '\n',
        )
        console.log(`‚úÖ Processed: ${packageFile}`)
      }
    } catch (error) {
      console.error(`‚ùå Error processing ${packageFile}:`, error.message)
      throw error
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å catalog –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å—é
   */
  isCatalogDependency(version) {
    return typeof version === 'string' && version.startsWith('catalog:')
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å workspace –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å—é
   */
  isWorkspaceDependency(version) {
    return typeof version === 'string' && version.startsWith('workspace:')
  }

  /**
   * –†–∞–∑—Ä–µ—à–∞–µ—Ç catalog –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –≤–µ—Ä—Å–∏—é
   */
  async resolveCatalogDependency(depName, catalogRef) {
    const catalogName = catalogRef.replace('catalog:', '')

    if (!this.backup.catalogs) {
      return null
    }

    // –ò—â–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∫–∞—Ç–∞–ª–æ–≥–µ
    if (this.backup.catalogs.catalog && this.backup.catalogs.catalog[depName]) {
      return this.backup.catalogs.catalog[depName]
    }

    // –ò—â–µ–º –≤ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã—Ö –∫–∞—Ç–∞–ª–æ–≥–∞—Ö
    if (
      catalogName &&
      this.backup.catalogs.catalogs &&
      this.backup.catalogs.catalogs[catalogName]
    ) {
      const catalog = this.backup.catalogs.catalogs[catalogName]
      if (catalog[depName]) {
        return catalog[depName]
      }
    }

    return null
  }

  /**
   * –†–∞–∑—Ä–µ—à–∞–µ—Ç workspace –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –≤–µ—Ä—Å–∏—é
   */
  async resolveWorkspaceDependency(depName, currentPackageFile) {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Ä—Å–∏—é –∏–∑ lerna.json –∫–∞–∫ fallback
      if (this.lernaConfig?.version) {
        return this.lernaConfig.version
      }

      // –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–∞–∫–µ—Ç
      const packageFiles = await this.findWorkspacePackages()
      for (const packageFile of packageFiles) {
        if (packageFile === currentPackageFile) continue

        try {
          const content = fs.readFileSync(packageFile, 'utf8')
          const packageData = JSON.parse(content)

          if (packageData.name === depName && packageData.version) {
            return packageData.version
          }
        } catch (error) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
        }
      }

      return null
    } catch (error) {
      return null
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç backup —Ñ–∞–π–ª
   */
  async saveBackup() {
    try {
      const backupData = {
        timestamp: this.backup.timestamp,
        files: Array.from(this.backup.files.entries()),
        catalogs: this.backup.catalogs,
        lernaConfig: this.backup.lernaConfig,
      }

      fs.writeFileSync(this.backupFile, JSON.stringify(backupData, null, 2))
    } catch (error) {
      console.error('‚ùå Error saving backup:', error.message)
      throw error
    }
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è —Ä–µ–∂–∏–º–∞ backup-and-resolve
   */
  async backupAndResolve() {
    console.log(
      'üîÑ Starting Dependency Compatibility Manager - Backup & Resolve Mode',
    )

    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
      await this.loadLernaConfig()
      await this.loadCatalogs()

      // –ù–∞—Ö–æ–¥–∏–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞–∫–µ—Ç—ã
      const packageFiles = await this.findWorkspacePackages()
      console.log(`üì¶ Found ${packageFiles.length} workspace packages`)

      for (const packageFile of packageFiles) {
        await this.processPackageFile(packageFile)
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º backup –µ—Å–ª–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
      if (this.backup.files.size > 0) {
        await this.saveBackup()
        console.log('‚úÖ Backup and resolve completed successfully')
        console.log(`üíæ Backup saved to: ${this.backupFile}`)
        console.log(`üì¶ Backed up ${this.backup.files.size} modified files`)
      } else {
        console.log('‚úÖ Backup and resolve completed successfully')
        console.log(
          '‚ÑπÔ∏è  No catalog:* or workspace:* dependencies found to process',
        )
      }

      console.log('üöÄ Ready for lerna publish')
    } catch (error) {
      console.error('‚ùå Error during backup and resolve:', error.message)
      process.exit(1)
    }
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è —Ä–µ–∂–∏–º–∞ restore
   */
  async restore() {
    console.log('üîÑ Starting Dependency Compatibility Manager - Restore Mode')

    try {
      if (!fs.existsSync(this.backupFile)) {
        console.log('‚ÑπÔ∏è  No backup file found - nothing to restore')
        return
      }

      const backupData = JSON.parse(fs.readFileSync(this.backupFile, 'utf8'))

      console.log(`üì¶ Restoring ${backupData.files.length} files from backup`)
      console.log(`üìÖ Backup created: ${backupData.timestamp}`)

      for (const [filePath, originalContent] of backupData.files) {
        try {
          // –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
          const currentContent = fs.readFileSync(filePath, 'utf8')
          const currentPackage = JSON.parse(currentContent)

          // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
          fs.writeFileSync(filePath, originalContent)

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥–ª–∏ –±—ã—Ç—å –∏–∑–º–µ–Ω–µ–Ω—ã Lerna
          const originalPackage = JSON.parse(originalContent)

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ—Ä—Å–∏—é –∏ gitHead –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω—ã
          if (currentPackage.version !== originalPackage.version) {
            console.log(
              `üîí Preserved: ${filePath} version: ${originalPackage.version} ‚Üí ${currentPackage.version}`,
            )
            originalPackage.version = currentPackage.version
          }

          if (currentPackage.gitHead && !originalPackage.gitHead) {
            console.log(
              `üîí Preserved: ${filePath} gitHead: ${currentPackage.gitHead}`,
            )
            originalPackage.gitHead = currentPackage.gitHead
          }

          // –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º–∏ –ø–æ–ª—è–º–∏
          fs.writeFileSync(
            filePath,
            JSON.stringify(originalPackage, null, 2) + '\n',
          )

          console.log(`‚úÖ Restored: ${filePath}`)
        } catch (error) {
          console.error(`‚ùå Error restoring ${filePath}:`, error.message)
        }
      }

      console.log('‚úÖ Restore completed successfully')

      // –£–¥–∞–ª—è–µ–º backup —Ñ–∞–π–ª –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
      try {
        fs.unlinkSync(this.backupFile)
        console.log('üóëÔ∏è  Backup file removed')
      } catch (error) {
        console.warn('‚ö†Ô∏è  Could not remove backup file:', error.message)
      }
    } catch (error) {
      console.error('‚ùå Error during restore:', error.message)
      process.exit(1)
    }
  }

  /**
   * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤–µ—Ä—Å–∏–π —Å lerna.json
   */
  async syncVersions() {
    console.log(
      'üîÑ Starting Dependency Compatibility Manager - Sync Versions Mode',
    )

    try {
      await this.loadLernaConfig()

      if (!this.lernaConfig?.version) {
        console.error('‚ùå No version found in lerna.json')
        process.exit(1)
      }

      const targetVersion = this.lernaConfig.version
      console.log(`üìã Target Lerna version: ${targetVersion}`)

      const packageFiles = await this.findWorkspacePackages()
      console.log(`üì¶ Found ${packageFiles.length} workspace packages`)

      let updatedCount = 0
      let correctCount = 0

      for (const packageFile of packageFiles) {
        try {
          const content = fs.readFileSync(packageFile, 'utf8')
          const packageData = JSON.parse(content)

          if (packageData.version !== targetVersion) {
            packageData.version = targetVersion
            fs.writeFileSync(
              packageFile,
              JSON.stringify(packageData, null, 2) + '\n',
            )
            console.log(
              `üîÑ Updated: ${packageFile} (${packageData.version} ‚Üí ${targetVersion})`,
            )
            updatedCount++
          } else {
            console.log(`‚úÖ Correct: ${packageFile} (${packageData.version})`)
            correctCount++
          }
        } catch (error) {
          console.error(`‚ùå Error processing ${packageFile}:`, error.message)
        }
      }

      console.log('‚úÖ Version synchronization completed successfully')
      console.log(
        `üì¶ Updated ${updatedCount} packages to version ${targetVersion}`,
      )
      console.log(`‚úÖ ${correctCount} packages already had correct version`)
    } catch (error) {
      console.error('‚ùå Error during version sync:', error.message)
      process.exit(1)
    }
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
   */
  showHelp() {
    console.log(`
üîß Dependency Compatibility Manager - Bun + Lerna Integration

Usage: node scripts/dependency-compatibility-manager.js <command>

Commands:
  backup-and-resolve  Prepare packages for Lerna publish (replace catalog:* and workspace:*)
  restore            Restore original dependencies after Lerna publish
  sync-versions      Sync all package versions with lerna.json version

Examples:
  # Prepare for Lerna publish
  node scripts/dependency-compatibility-manager.js backup-and-resolve

  # Publish with Lerna
  lerna publish

  # Restore original dependencies
  node scripts/dependency-compatibility-manager.js restore

  # Sync versions with lerna.json
  node scripts/dependency-compatibility-manager.js sync-versions

Supported dependency formats:
  - catalog:*              ‚Üí Resolves to specific version from root package.json
  - catalog:name           ‚Üí Resolves to specific version from named catalog
  - workspace:*           ‚Üí Resolves to current version or lerna.json version
  - workspace:^1.0.0      ‚Üí Resolves to ^1.0.0 (preserves semver range)

Note: Always run restore after lerna publish to maintain catalog:* and workspace:* references.
`)
  }
}

// Main execution
async function main() {
  const command = process.argv[2]

  if (!command) {
    console.error('‚ùå No command specified')
    console.error(
      'Usage: node scripts/dependency-compatibility-manager.js <command>',
    )
    console.error('Run with --help for more information')
    process.exit(1)
  }

  const manager = new DependencyCompatibilityManager()

  switch (command) {
    case 'backup-and-resolve':
      await manager.backupAndResolve()
      break
    case 'restore':
      await manager.restore()
      break
    case 'sync-versions':
      await manager.syncVersions()
      break
    case 'help':
    case '--help':
    case '-h':
      manager.showHelp()
      break
    default:
      console.error(`‚ùå Unknown command: ${command}`)
      console.error('Run with --help for available commands')
      process.exit(1)
  }
}

// Run if executed directly
if (require.main === module) {
  main().catch((error) => {
    console.error('‚ùå Fatal error:', error.message)
    process.exit(1)
  })
}

module.exports = DependencyCompatibilityManager
