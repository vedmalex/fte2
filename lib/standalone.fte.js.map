{
  "version": 3,
  "sources": ["../node_modules/detect-indent/index.js", "../src/standalone/index.ts", "../src/common/helpers.ts", "../src/common/template.ts", "../src/standalone/template.ts", "../src/common/factory.ts", "../src/standalone/factory.ts", "../src/parser/parse.ts", "../src/templates/codeblock.njs.ts", "../src/templates/compilationError.njs.ts", "../src/templates/compiled.njs.ts", "../src/templates/es6module.njs.ts", "../src/templates/MainTemplate.njs.ts", "../src/templates/raw.njs.ts", "../src/templates/singlefile.es6.njs.ts", "../src/templates/singlefile.njs.ts", "../src/templates/standalone.es6.njs.ts", "../src/templates/standalone.index.es6.njs.ts", "../src/templates/standalone.index.njs.ts", "../src/templates/standalone.njs.ts", "../src/templates/index.ts", "../src/standalone/compile.ts"],
  "sourcesContent": ["'use strict';\n\n// Detect either spaces or tabs but not both to properly handle tabs for indentation and spaces for alignment\nconst INDENT_REGEX = /^(?:( )+|\\t+)/;\n\nconst INDENT_TYPE_SPACE = 'space';\nconst INDENT_TYPE_TAB = 'tab';\n\n// Make a Map that counts how many indents/unindents have occurred for a given size and how many lines follow a given indentation.\n// The key is a concatenation of the indentation type (s = space and t = tab) and the size of the indents/unindents.\n//\n// indents = {\n//    t3: [1, 0],\n//    t4: [1, 5],\n//    s5: [1, 0],\n//   s12: [1, 0],\n// }\nfunction makeIndentsMap(string, ignoreSingleSpaces) {\n\tconst indents = new Map();\n\n\t// Remember the size of previous line's indentation\n\tlet previousSize = 0;\n\tlet previousIndentType;\n\n\t// Indents key (ident type + size of the indents/unindents)\n\tlet key;\n\n\tfor (const line of string.split(/\\n/g)) {\n\t\tif (!line) {\n\t\t\t// Ignore empty lines\n\t\t\tcontinue;\n\t\t}\n\n\t\tlet indent;\n\t\tlet indentType;\n\t\tlet weight;\n\t\tlet entry;\n\t\tconst matches = line.match(INDENT_REGEX);\n\n\t\tif (matches === null) {\n\t\t\tpreviousSize = 0;\n\t\t\tpreviousIndentType = '';\n\t\t} else {\n\t\t\tindent = matches[0].length;\n\n\t\t\tif (matches[1]) {\n\t\t\t\tindentType = INDENT_TYPE_SPACE;\n\t\t\t} else {\n\t\t\t\tindentType = INDENT_TYPE_TAB;\n\t\t\t}\n\n\t\t\t// Ignore single space unless it's the only indent detected to prevent common false positives\n\t\t\tif (ignoreSingleSpaces && indentType === INDENT_TYPE_SPACE && indent === 1) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (indentType !== previousIndentType) {\n\t\t\t\tpreviousSize = 0;\n\t\t\t}\n\n\t\t\tpreviousIndentType = indentType;\n\n\t\t\tweight = 0;\n\n\t\t\tconst indentDifference = indent - previousSize;\n\t\t\tpreviousSize = indent;\n\n\t\t\t// Previous line have same indent?\n\t\t\tif (indentDifference === 0) {\n\t\t\t\tweight++;\n\t\t\t\t// We use the key from previous loop\n\t\t\t} else {\n\t\t\t\tconst absoluteIndentDifference = indentDifference > 0 ? indentDifference : -indentDifference;\n\t\t\t\tkey = encodeIndentsKey(indentType, absoluteIndentDifference);\n\t\t\t}\n\n\t\t\t// Update the stats\n\t\t\tentry = indents.get(key);\n\n\t\t\tif (entry === undefined) {\n\t\t\t\tentry = [1, 0]; // Init\n\t\t\t} else {\n\t\t\t\tentry = [++entry[0], entry[1] + weight];\n\t\t\t}\n\n\t\t\tindents.set(key, entry);\n\t\t}\n\t}\n\n\treturn indents;\n}\n\n// Encode the indent type and amount as a string (e.g. 's4') for use as a compound key in the indents Map.\nfunction encodeIndentsKey(indentType, indentAmount) {\n\tconst typeCharacter = indentType === INDENT_TYPE_SPACE ? 's' : 't';\n\treturn typeCharacter + String(indentAmount);\n}\n\n// Extract the indent type and amount from a key of the indents Map.\nfunction decodeIndentsKey(indentsKey) {\n\tconst keyHasTypeSpace = indentsKey[0] === 's';\n\tconst type = keyHasTypeSpace ? INDENT_TYPE_SPACE : INDENT_TYPE_TAB;\n\n\tconst amount = Number(indentsKey.slice(1));\n\n\treturn {type, amount};\n}\n\n// Return the key (e.g. 's4') from the indents Map that represents the most common indent,\n// or return undefined if there are no indents.\nfunction getMostUsedKey(indents) {\n\tlet result;\n\tlet maxUsed = 0;\n\tlet maxWeight = 0;\n\n\tfor (const [key, [usedCount, weight]] of indents) {\n\t\tif (usedCount > maxUsed || (usedCount === maxUsed && weight > maxWeight)) {\n\t\t\tmaxUsed = usedCount;\n\t\t\tmaxWeight = weight;\n\t\t\tresult = key;\n\t\t}\n\t}\n\n\treturn result;\n}\n\nfunction makeIndentString(type, amount) {\n\tconst indentCharacter = type === INDENT_TYPE_SPACE ? ' ' : '\\t';\n\treturn indentCharacter.repeat(amount);\n}\n\nmodule.exports = string => {\n\tif (typeof string !== 'string') {\n\t\tthrow new TypeError('Expected a string');\n\t}\n\n\t// Identify indents while skipping single space indents to avoid common edge cases (e.g. code comments)\n\t// If no indents are identified, run again and include all indents for comprehensive detection\n\tlet indents = makeIndentsMap(string, true);\n\tif (indents.size === 0) {\n\t\tindents = makeIndentsMap(string, false);\n\t}\n\n\tconst keyOfMostUsedIndent = getMostUsedKey(indents);\n\n\tlet type;\n\tlet amount = 0;\n\tlet indent = '';\n\n\tif (keyOfMostUsedIndent !== undefined) {\n\t\t({type, amount} = decodeIndentsKey(keyOfMostUsedIndent));\n\t\tindent = makeIndentString(type, amount);\n\t}\n\n\treturn {\n\t\tamount,\n\t\ttype,\n\t\tindent\n\t};\n};\n", "import { TemplateFactoryStandalone as Factory } from './factory'\nimport { TemplateBrowser as Template } from './template'\nimport {\n  compileFull,\n  compileLight,\n  compileTs,\n  Parser,\n  run,\n  parseFile,\n} from './compile'\n\nexport {\n  Factory,\n  Template,\n  run,\n  compileFull,\n  compileLight,\n  parseFile,\n  Parser,\n  compileTs,\n}\n", "import { HashType } from './interfaces'\n\nvar escapeExp = /[&<>\"]/,\n  escapeAmpExp = /&/g,\n  escapeLtExp = /</g,\n  escapeGtExp = />/g,\n  escapeQuotExp = /\"/g\n\nexport function escapeIt(text: string) {\n  if (text == null) {\n    return ''\n  }\n\n  var result = text.toString()\n  if (!escapeExp.test(result)) {\n    return result\n  }\n\n  return result\n    .replace(escapeAmpExp, '&amp;')\n    .replace(escapeLtExp, '&lt;')\n    .replace(escapeGtExp, '&gt;')\n    .replace(escapeQuotExp, '&quot;')\n}\n\nexport function applyIndent(_str: string, _indent: number | string) {\n  var str = String(_str)\n  var indent = ''\n  if (typeof _indent == 'number' && _indent > 0) {\n    var res = ''\n    for (var i = 0; i < _indent; i++) {\n      res += ' '\n    }\n    indent = res\n  }\n  if (typeof _indent == 'string' && _indent.length > 0) {\n    indent = _indent\n  }\n  if (indent && str) {\n    return str\n      .split('\\n')\n      .map((s) => indent + s)\n      .join('\\n')\n  } else {\n    return str\n  }\n}\n\nexport function set(data: HashType, path: string, value: any) {\n  if ('object' === typeof data) {\n    const parts = path.split('.')\n    if (Array.isArray(parts)) {\n      const curr = parts.shift()\n      if (parts.length > 0) {\n        if (!data[curr]) {\n          if (isNaN(parseInt(parts[0], 10))) {\n            data[curr] = {}\n          } else {\n            data[curr] = []\n          }\n        }\n        set(data[curr], parts.join('.'), value)\n      } else {\n        data[path] = value\n      }\n    } else {\n      data[path] = value\n    }\n  }\n}\n\nexport function get(data: HashType, path: string) {\n  if ('object' === typeof data) {\n    if (data[path] === undefined) {\n      const parts = path.split('.')\n      if (Array.isArray(parts)) {\n        const curr = parts.shift()\n        if (parts.length > 0) {\n          return get(data[curr], parts.join('.'))\n        }\n        return data[curr]\n      }\n    }\n    return data[path]\n  }\n  return data\n}\n\nexport function merge(a: HashType, b: HashType, property: string) {\n  let prop\n  const aProp = a[property]\n  if (aProp !== undefined) {\n    let bProp = b[property]\n    if (bProp === undefined) {\n      bProp = b[property] = {}\n    }\n    const propList = Object.keys(aProp)\n    for (let i = 0, pLen = propList.length; i < pLen; i++) {\n      prop = propList[i]\n      if (!(prop in bProp)) {\n        bProp[prop] = aProp[prop]\n      }\n    }\n  }\n}\n", "import { merge } from './helpers'\nimport { TemplateFactoryBase } from './factory'\nimport {\n  BlocksHash,\n  HashTypeGeneric,\n  BlockRunFunction,\n  TemplateConfig,\n  DefaultFactoryOption,\n} from './interfaces'\n\nexport class TemplateBase<T extends DefaultFactoryOption> {\n  public parent: string\n  public blocks: BlocksHash<T>\n  public slots: BlocksHash<T>\n  public aliases: HashTypeGeneric<string>\n  public alias: Array<string>\n  public dependency: HashTypeGeneric<boolean>\n  public absPath: string\n  public name: string\n  public chunks: string\n  public srcCode: string\n  public script: BlockRunFunction<T>\n  public factory: TemplateFactoryBase<T>\n\n  constructor(config: TemplateConfig<T>) {\n    if (!(this instanceof TemplateBase)) {\n      throw new Error('constructor is not a function')\n    }\n    this.srcCode = config.source ? config.source.toString() : ''\n    this.name = config.name\n    this.absPath = config.absPath\n    this.script = config.script\n    this.blocks = config.blocks\n    this.slots = config.slots\n    this.dependency = config.dependency\n    this.parent = config.parent ? config.parent.trim() : ''\n    this.aliases = config.aliases || {}\n    this.alias = config.alias || [config.name]\n    this.factory = config.factory\n    if (config.compile) {\n      this.compile = config.compile\n    }\n  }\n\n  public mergeParent(src: TemplateBase<T>) {\n    if (src) {\n      merge(src, this, 'blocks')\n      merge(src, this, 'aliases')\n      merge(src, this, 'slots')\n    }\n  }\n\n  public compile() {\n    throw new Error('abstract method call')\n  }\n}\n", "import { DefaultFactoryOption } from '../common/interfaces'\nimport { TemplateBase } from '../common/template'\n\nexport class TemplateBrowser<\n  T extends DefaultFactoryOption,\n> extends TemplateBase<T> {\n  public compile() {\n    if (this.parent) {\n      this.mergeParent(this.factory.ensure(this.parent))\n    }\n  }\n}\n", "declare let process: { browser: boolean; cwd: () => string }\n\nimport { TemplateBase } from './template'\nimport {\n  HashType,\n  BlockContent,\n  HashTypeGeneric,\n  PartialFunction,\n  ContentFunction,\n  SlotsHash,\n  SlotFunction,\n  DefaultFactoryOption,\n} from './../common/interfaces'\nimport { applyIndent, escapeIt } from './helpers'\nimport { BlockRunFunction } from './interfaces'\n\nexport const DefaultFactoryOptions: DefaultFactoryOption = {\n  applyIndent,\n  escapeIt,\n}\n\n/**\n * template factory -- it instantiate the templates\n */\nexport abstract class TemplateFactoryBase<T extends DefaultFactoryOption> {\n  public ext: Array<string> = []\n  public cache: HashTypeGeneric<TemplateBase<T>>\n  public debug = false\n  public watch = false\n  // \u043F\u043E\u0434\u0443\u043C\u0430\u0442\u044C \u043D\u0443\u0436\u043D\u043E \u043B\u0438 \u0434\u0435\u043B\u0430\u0442\u044C \u043E\u0434\u0438\u043D \u043E\u0431\u0449\u0438\u0439 \u0434\u043B\u044F \u0432\u0441\u0435 \u0441\u043F\u0438\u0441\u043E\u043A watchTree\n  public watchTree = undefined\n  public root = undefined\n  public options: T\n\n  constructor(\n    config: {\n      root?: string | Array<string>\n      debug?: boolean\n      watch?: boolean\n      ext?: Array<string>\n      preload?: boolean\n      options?: T\n    } = {},\n  ) {\n    config.options = { ...config.options, ...DefaultFactoryOptions }\n    this.options = config.options\n    if (!process.browser) {\n      // this only need in server-side code with server load code\n      this.root = config\n        ? config.root\n          ? Array.isArray(config.root)\n            ? config.root\n            : [config.root]\n          : [process.cwd()]\n        : [process.cwd()]\n      this.debug = (config && config.debug) || false\n      this.watch = config && config.watch\n\n      if (config && config.ext) {\n        if (Array.isArray(config.ext)) {\n          this.ext = config.ext\n        } else {\n          this.ext = [config.ext]\n        }\n      }\n      this.watchTree = {}\n    }\n    this.cache = {}\n    if (config && config.preload) {\n      this.preload()\n    }\n  }\n  public register(tpl: TemplateBase<T>, fileName?: string) {\n    if (!(tpl.name in this.cache)) {\n      this.cache[tpl.name] = tpl\n      if (tpl.alias && Array.isArray(tpl.alias)) {\n        tpl.alias\n          .filter((a) => a !== tpl.name)\n          .forEach((a) => {\n            this.cache[a] = tpl\n          })\n      }\n      this.cache[tpl.absPath] = tpl\n    }\n    return tpl\n  }\n\n  public ensure(fileName: string, absPath?: boolean): TemplateBase<T> {\n    if (!(fileName in this.cache)) {\n      const template = this.load(fileName, absPath)\n      if (this.watch) {\n        this.checkChanges(template, fileName, absPath)\n        const depList = Object.keys(template.dependency)\n        for (let i = 0, len = depList.length; i < len; i++) {\n          const templates =\n            this.watchTree[this.cache[depList[i]].absPath].templates\n          templates[template.absPath] = template\n        }\n      }\n      return template\n    }\n    return this.cache[fileName]\n  }\n  public blockContent(\n    tpl: TemplateBase<T>,\n    slots?: SlotsHash,\n  ): BlockContent<T> {\n    const scripts: Array<BlockRunFunction<T>> = []\n    const self = this\n    const bc: BlockContent<T> = {\n      slots: slots ? slots : {},\n      slot(name: string, content: string | Array<string>): void | string {\n        if (name) {\n          if (!this.slots.hasOwnProperty(name)) {\n            this.slots[name] = []\n          }\n          if (content) {\n            if (Array.isArray(content)) {\n              content.forEach((c) => this.slot(name, c))\n            } else {\n              if (this.slots[name].indexOf(content) === -1) {\n                this.slots[name].push(content)\n              }\n            }\n          } else {\n            return `#{partial(context['${name}'] || [], '${name}')}`\n          }\n        }\n      },\n      partial(obj: HashType, name: string): string {\n        if (tpl.aliases.hasOwnProperty(name)) {\n          return self.runPartial({\n            context: obj,\n            name: tpl.aliases[name],\n            absPath: true,\n            slots: this.slots,\n            options: this.options,\n          })\n        } else {\n          return self.runPartial({\n            context: obj,\n            name,\n            absPath: false,\n            slots: this.slots,\n            options: this.options,\n          })\n        }\n      },\n      content(\n        name: string,\n        context: HashType,\n        content: ContentFunction,\n        partial: PartialFunction,\n        slot: SlotFunction,\n      ) {\n        if (name) {\n          return tpl.blocks && tpl.blocks.hasOwnProperty(name)\n            ? tpl.blocks[name](context, content, partial, slot, self.options)\n            : ''\n        } else {\n          const fn = scripts.pop()\n          if (typeof fn === 'function') {\n            return fn(context, content, partial, slot, self.options)\n          } else {\n            return ''\n          }\n        }\n      },\n      run(\n        $context: HashType,\n        $content: ContentFunction,\n        $partial: PartialFunction,\n      ): string {\n        function go(\n          this: TemplateBase<T>,\n          context,\n          content,\n          partial,\n          slot,\n        ): string | Array<{ name: string; content: string }> {\n          const $this = this as TemplateBase<T>\n          if ($this.parent) {\n            const parent = self.ensure($this.parent)\n            // tpl.mergeParent(parent); moved to compile.\n            scripts.push($this.script)\n            return go.call(parent, context, content, partial, slot)\n          } else {\n            try {\n              return $this.script(context, content, partial, slot, self.options)\n            } catch (e) {\n              throw new Error(\n                `template ${$this.name} failed to execute with error\n                  '${e.message}\n                  ${e.stack}'`,\n              )\n            }\n          }\n        }\n        return go.call(tpl, $context, $content, $partial, this.slot)\n      },\n    }\n    bc.content = bc.content.bind(bc)\n    bc.partial = bc.partial.bind(bc)\n    bc.run = bc.run.bind(bc)\n    bc.slot = bc.slot.bind(bc)\n    return bc\n  }\n\n  public preload(fileName?: string) {\n    throw new Error('abstract method call')\n  }\n\n  public checkChanges(template?: any, fileName?: any, absPath?: boolean) {\n    throw new Error('abstract method call')\n  }\n\n  public load(fileName: string, absPath: boolean): TemplateBase<T> {\n    throw new Error('abstract method call')\n  }\n\n  public run<T extends Record<string, any>>(\n    context: HashType,\n    name: string,\n  ): string | Array<{ name: string; content: string }> {\n    throw new Error('abstract method call')\n  }\n\n  public runPartial<T extends Record<string, any>>({\n    context,\n    name,\n    absPath,\n    options,\n    slots,\n  }: {\n    context: HashType\n    name: string\n    absPath?: boolean\n    options: T\n    slots?: SlotsHash\n  }): string {\n    throw new Error('abstract method call')\n  }\n}\n\n// \u043D\u0430\u0434\u043E \u0443\u0434\u0430\u043B\u0438\u0442\u044C \u0442\u0430\u043A \u0436\u0435 \u0432\u0441\u0435 watcher \u0417\u0430\u0432\u0438\u0441\u0438\u043C\u043E\u0441\u0442\u0438 \u043E\u0431\u043D\u043E\u0432\u043B\u044F\u0435\u043C\u043E\u0433\u043E \u0448\u0430\u0431\u043B\u043E\u043D\u0430,\n// \u0432 \u0441\u043B\u0443\u0447\u0430\u0435 \u0435\u0433\u043E \u0443\u0434\u0430\u043B\u0435\u043D\u0438\u044F \u0438\u0437 \u043A\u044D\u0448\u0430, \u0438 \u0442\u0430\u043A \u0436\u0435 \u043D\u0435 \u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u044C \u043C\u0430\u0441\u0441\u0438\u0432, \u0430\n", "import { TemplateBrowser } from './template'\nimport { TemplateFactoryBase } from '../common/factory'\nimport { HashType, SlotsHash } from '../common/interfaces'\nimport { TemplateConfig } from '../common/interfaces'\nimport { DefaultFactoryOption } from '../common/interfaces'\n\n/**\n * We must ensure that template is registered with its compiled templates\n */\n\nexport class TemplateFactoryStandalone<\n  T extends DefaultFactoryOption,\n> extends TemplateFactoryBase<T> {\n  private templates: Record<string, TemplateConfig<T>>\n\n  constructor(templates: Record<string, TemplateConfig<T>>) {\n    super()\n    this.templates = templates\n    this.preload()\n  }\n  public resolveTemplateConfig(fileName: string): TemplateConfig<T> {\n    const result = this.templates[fileName]\n    if (result) {\n      result.factory = this\n      result.name = fileName\n      return result\n    } else {\n      throw new Error(`template ${fileName} not found`)\n    }\n  }\n\n  public load(fileName: string) {\n    const template = this.resolveTemplateConfig(fileName)\n    const templ = new TemplateBrowser<T>(template)\n    this.register(templ, fileName)\n    templ.compile()\n    return templ\n  }\n  public preload() {\n    Object.keys(this.templates).forEach((t) => this.load(t))\n  }\n  public run<T extends Record<string, any>>(\n    context: HashType,\n    name: string,\n  ): string | Array<{ name: string; content: string }> {\n    const templ = this.ensure(name)\n    const bc = this.blockContent(templ)\n    return bc.run(context, bc.content, bc.partial, bc.slot, this.options)\n  }\n\n  public runPartial<T extends Record<string, any>>({\n    context,\n    name,\n    slots,\n  }: {\n    context: HashType\n    name: string\n    absPath?: boolean\n    options?: T\n    slots?: SlotsHash\n  }): string {\n    const templ = this.ensure(name)\n    if (!templ.chunks) {\n      const bc = this.blockContent(templ, slots)\n      return bc.run(\n        context,\n        bc.content,\n        bc.partial,\n        bc.slot,\n        this.options,\n      ) as string\n    } else {\n      throw new Error(\"cant't use template with chunks as partial\")\n    }\n  }\n}\n", "import detectIndent from 'detect-indent'\n\nexport type StateDefinition = {\n  start?: Array<string>\n  end?: Array<string>\n  skip?: {\n    start?: Array<string>\n    end?: Array<string>\n  }\n  states?: Array<ResultTypes>\n  curly?: 0 | 1 | 2\n  type?: { [key: string]: ResultTypes }\n}\n/**\n <% 'Scriptlet' tag, for control-flow, no output\n <%_ \u2018Whitespace Slurping\u2019 Scriptlet tag, strips all whitespace before it\n <%= Outputs the value into the template (HTML escaped)\n <%- Outputs the unescaped value into the template\n <%# Comment tag, no execution, no output\n\n <%% Outputs a literal '<%'\n %> Plain ending tag\n removes/cleans whitespases after\n -%> Trim-mode ('newline slurp') tag, trims following newline\n _%> \u2018Whitespace Slurping\u2019 ending tag, removes all whitespace after it\n */\nexport type ResultTypes =\n  | 'unknown'\n  | 'expression'\n  | 'uexpression'\n  | 'expression2'\n  | 'uexpression2'\n  | 'code'\n  | 'directive'\n  | 'comments'\n  | 'slotStart'\n  | 'blockStart'\n  | 'blockEnd'\n  | 'text'\n  | 'skip'\n\nexport type SystemBlocksType =\n  | 'directive'\n  | 'comments'\n  | 'slotStart'\n  | 'blockStart'\n  | 'blockEnd'\n  | 'code'\n  | null\n\nconst globalStates: { [key: string]: StateDefinition } = {\n  /*\n  has chunks\n  has slots\n  has blocks\n  has ?? \u0432\u0441\u0435 \u0447\u0442\u043E \u0443\u0433\u043E\u0434\u043D\u043E \u043C\u043E\u0436\u043D\u043E \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C \u043F\u0440\u043E\u0441\u0442\u043E \u0430\u043D\u0430\u043B\u0438\u0437\u0438\u0440\u0443\u044F \u0441\u043E\u043E\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044E\u0449\u0438\u0439 \u043A\u043E\u043D\u0442\u0435\u043D\u0442, \u0438 \u0432\u044B\u0441\u0442\u0430\u0432\u043B\u044F\u0442\u044C \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u044F \u0432 \u0441\u043E\u043E\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044E\u0449\u0438\u0439 \u0431\u043B\u043E\u043A\n  \u0432 \u043D\u0435\u043A\u043E\u0442\u043E\u0440\u044B\u0445 \u0434\u0438\u0440\u0435\u043A\u0442\u0438\u0432\u0430\u0445 \u043D\u0435 \u0431\u0443\u0434\u0435\u0442 \u043D\u0443\u0436\u043D\u044B\n  \u043C\u043E\u0436\u043D\u043E \u0430\u0432\u0442\u043E\u043C\u0430\u0442\u0438\u0447\u0435\u0441\u043A\u0438 \u043E\u043F\u0440\u0435\u0434\u0435\u043B\u044F\u0442\u044C, \u043F\u0440\u043E\u0441\u0442\u043E \u0430\u043D\u0430\u043B\u0438\u0437\u0438\u0440\u0443\u044F \u0442\u0435\u043A\u0441\u0442\n  */\n  text: {\n    // \u043E\u0431\u0440\u0430\u0442\u043D\u044B\u0439 \u043F\u043E\u0440\u044F\u0434\u043E\u043A \u0434\u043B\u044F \u0443\u0441\u043A\u043E\u0440\u0435\u043D\u0438\u044F \u0446\u0438\u043A\u043B\u0430\n    states: [\n      'unknown',\n      'expression',\n      'uexpression',\n      'expression2',\n      'uexpression2',\n      'code',\n      'directive',\n      'slotStart',\n      'blockStart',\n      'blockEnd',\n      'comments',\n    ],\n  },\n  unknown: {\n    start: ['<%', '<%=', '<%-', '<%_', '<%#'],\n    end: ['%>', '-%>', '_%>'],\n    skip: {\n      start: ['<%%'],\n      end: ['%%>'],\n    },\n    type: {\n      '<%': 'code',\n      '<%=': 'uexpression',\n      '<%-': 'expression',\n      '<%#': 'comments',\n      '<%_': 'code',\n    },\n  },\n  expression: {\n    start: ['#{'],\n    end: ['}'],\n    curly: 1,\n  },\n  expression2: {\n    start: ['{{'],\n    end: ['}}'],\n    curly: 2,\n    skip: {\n      start: ['{{&'],\n    },\n  },\n  uexpression: {\n    start: ['!{'],\n    end: ['}'],\n    curly: 1,\n  },\n  uexpression2: {\n    start: ['{{&'],\n    end: ['}}'],\n    curly: 2,\n  },\n  code: {\n    start: ['<#', '<#-'],\n    end: ['#>', '-#>'],\n    skip: {\n      start: ['<#@', '<# block', '<# slot', '<# end #>'],\n    },\n  },\n  directive: {\n    start: ['<#@'],\n    end: ['#>'],\n  },\n  comments: {\n    start: ['<*'],\n    end: ['*>'],\n  },\n  blockStart: {\n    start: ['<# block', '<#- block'],\n    end: [': #>', ': -#>'],\n  },\n  slotStart: {\n    start: ['<# slot', '<#- slot'],\n    end: [': #>', ': -#>'],\n  },\n  blockEnd: {\n    start: ['<# end #>', '<#- end #>', '<# end -#>', '<#- end -#>'],\n  },\n}\nexport default globalStates\n\nexport interface ParserResult {\n  data: string\n  pos: number\n  line: number\n  column: number\n  type: ResultTypes\n  start?: string\n  end?: string\n  eol?: boolean\n}\n\nexport interface Items {\n  content?: string\n  pos: number\n  line: number\n  column: number\n  start: string\n  end: string\n  eol: boolean\n  type: ResultTypes\n}\n\nexport type RequireItem = {\n  name: string\n  alias: string\n}\n\nconst directives = [\n  'extend',\n  'context',\n  'alias',\n  'chunks',\n  'includeMainChunk',\n  'useHash',\n  'noContent',\n  'noSlots',\n  'noBlocks',\n  'noPartial',\n  'noOptions',\n  'promise',\n  'callback',\n  'noEscape',\n  'requireAs',\n]\n\nfunction detectDirective(input: string) {\n  let name\n  let params\n  if (input) {\n    input = input.trim()\n    for (let i = 0; i < directives.length; i += 1) {\n      const directive = directives[i]\n      if (SUB(input.trim(), directive) == directive) {\n        name = directive\n        params = UNPARAM(input.split(directive)[1])\n        break\n      }\n    }\n  }\n  return {\n    name: name ? name : input,\n    params,\n  }\n}\n\nexport class CodeBlockDirectives {\n  extend: string\n  context: string = 'context'\n  alias: Array<string>\n  chunks: string\n  includeMainChunk: boolean\n  useHash: boolean\n  content: boolean = true\n  slots: boolean = true\n  blocks: boolean = true\n  partial: boolean = true\n  options: boolean = true\n  escapeIt: boolean = true\n  // return promise\n  promise: boolean\n  // return callback\n  callback: boolean\n  requireAs: Array<RequireItem> = []\n  push(init: ParserResult) {\n    const { name, params } = detectDirective(init.data.trim())\n    switch (name) {\n      case 'extend':\n        this.extend = params[0]\n        break\n      case 'context':\n        this.context = params[0]\n        break\n      case 'alias':\n        this.alias = params\n        break\n      case 'chunks':\n        this.chunks = params[0]\n        break\n      case 'includeMainChunk':\n        this.includeMainChunk = true\n        break\n      case 'useHash':\n        this.useHash = true\n        break\n      case 'noContent':\n        this.content = false\n        break\n      case 'noSlots':\n        this.slots = false\n        break\n      case 'noBlocks':\n        this.blocks = false\n        break\n      case 'noPartial':\n        this.partial = false\n        break\n      case 'noOptions':\n        this.options = false\n        break\n      case 'promise':\n        this.promise = true\n        break\n      case 'callback':\n        this.callback = true\n        break\n      case 'noEscape':\n        this.escapeIt = false\n        break\n      case 'requireAs':\n        this.requireAs.push({ name: params[0], alias: params[1] })\n        break\n      default:\n        console.log('unknown directive: ' + name)\n    }\n  }\n}\n\nexport class CodeBlock {\n  name?: string\n  main: Array<Items> = []\n  // \u0441\u0434\u0435\u043B\u0430\u0442\u044C \u0432\u0441\u0435 \u043D\u0435\u043E\u0431\u0445\u043E\u0434\u0438\u043C\u044B\u0435 \u043F\u0440\u043E\u0432\u0435\u0440\u043A\u0438 \u0434\u043B\u044F \u0431\u043E\u043B\u0435\u0435 \u0447\u0438\u0441\u0442\u043E\u0433\u043E \u043A\u043E\u0434\u0430\n  //\n  directives: CodeBlockDirectives = new CodeBlockDirectives()\n  documentation: Array<Items> = []\n  slots?: { [slot: string]: CodeBlock } = {}\n  blocks?: { [block: string]: CodeBlock } = {}\n  constructor(init?: ParserResult) {\n    if (init) {\n      this.name = UNQUOTE(init.data)\n    }\n  }\n  addBlock(block: CodeBlock) {\n    this.directives.blocks = true\n    this.blocks[block.name] = block\n  }\n  addSlot(slot: CodeBlock) {\n    this.directives.slots = true\n    this.blocks[slot.name] = slot\n  }\n}\n\nconst UNQUOTE = (str?: string) => {\n  if (str) {\n    let res = str.trim()\n    res = res.match(/['\"`]([^`'\"].*)[`'\"]/)?.[1] ?? res\n    return res\n  } else {\n    return ''\n  }\n}\n\nconst UNPARAM = (str?: string) => {\n  if (str) {\n    let res = str?.trim()\n    res = res.match(/\\(?([^\\)].*\\))/)?.[1] ?? res\n    return res.split(',').map(UNQUOTE)\n  } else {\n    return []\n  }\n}\n\nexport class Parser {\n  private buffer: string\n  private size: number\n  public INDENT: number\n  private static INITIAL_STATE: ResultTypes = 'text'\n  private static DEFAULT_TAB_SIZE = 2\n  private globalState: ResultTypes\n  private actualState?: ResultTypes\n  private globalToken: ParserResult\n  private pos: number = 0\n  private line: number = 1\n  private column: number = 1\n  private curlyAware: 0 | 1 | 2 = 0\n  private curlyBalance: Array<number> = []\n  private result: Array<ParserResult> = []\n  public static parse(\n    text: string | Buffer,\n    options: { indent?: string | number } = {},\n  ) {\n    const parser = new Parser(\n      typeof text == 'string' ? text : text.toString(),\n      options,\n    )\n    parser.parse()\n    return parser.process()\n  }\n  private constructor(value: string, options: { indent?: string | number }) {\n    if (options.indent) {\n      this.INDENT =\n        typeof options.indent === 'string'\n          ? options.indent.length\n          : options.indent\n    }\n    this.globalState = Parser.INITIAL_STATE\n    this.buffer = value.toString()\n    this.size = this.buffer.length\n  }\n\n  collect() {\n    const { term, eol } = this.SYMBOL()\n    if (eol) {\n      this.globalToken.eol = true\n      this.term()\n    } else {\n      this.globalToken.data += term\n    }\n  }\n\n  private run(currentState: ResultTypes) {\n    const init_pos = this.pos\n    const state = globalStates[currentState]\n    this.curlyAware = state.curly\n    if (state.start) {\n      if (state.skip?.start) {\n        for (let i = 0; i < state.skip.start.length; i += 1) {\n          if (this.SUB(state.skip.start[i]) == state.skip.start[i]) {\n            // process as string\n            return false\n          }\n        }\n      }\n      //has start\n      let foundStart = false\n      let foundEnd = false\n      for (let i = state.start.length - 1; i >= 0; i -= 1) {\n        const p = state.start[i]\n        const subs = this.SUB(p).toLowerCase()\n        if (subs == p) {\n          foundStart = true\n          this.globalState = currentState\n          this.actualState = state.type?.[p] ?? currentState\n          this.term({ start: p })\n          this.SKIP(p)\n          break\n        }\n      }\n      if (foundStart)\n        do {\n          if (state.end) {\n            let i\n            for (i = state.end.length - 1; i >= 0; i -= 1) {\n              const p = state.end[i]\n              if (state.curly == 1 && p.indexOf('}') > -1) {\n                if (this.curlyBalance.length > 0) {\n                  break\n                }\n              }\n              if (state.curly == 2 && p.indexOf('}}') > -1) {\n                if (this.curlyBalance.length > 0) {\n                  break\n                }\n              }\n              const subs = this.SUB(p).toLowerCase()\n              if (subs == p) {\n                this.SKIP(p)\n                foundEnd = true\n                break\n              }\n            }\n            if (!foundEnd) {\n              this.collect()\n            } else {\n              this.globalToken.end = state.end[i]\n              this.actualState = null\n            }\n          } else {\n            foundEnd = true\n          }\n        } while (!foundEnd && this.pos < this.size)\n    }\n\n    // has only states\n    else if (state.states) {\n      let found = false\n      for (let i = state.states.length - 1; i >= 0; i -= 1) {\n        const name = state.states[i]\n        found = this.run(name)\n        if (found) {\n          this.globalState = currentState\n          this.actualState = null\n          this.term()\n          break\n        }\n      }\n      if (!found) {\n        this.collect()\n      }\n    }\n    return init_pos != this.pos\n  }\n\n  private parse() {\n    if (this.size > 0) {\n      this.term()\n      do {\n        this.run(this.globalState)\n      } while (this.pos < this.size)\n      this.term()\n    }\n  }\n\n  private process() {\n    const content = new CodeBlock()\n\n    const resultSize = this.result.length\n    let curr = content\n    let state: SystemBlocksType = null\n    for (let i = 0; i < resultSize; i += 1) {\n      let r = this.result[i]\n      let { type, pos, line, column, start, end, data, eol } = r\n\n      const trimStartLines = (lines?: number) => {\n        do {\n          if (curr.main.length > 0) {\n            let prev = curr.main[curr.main.length - 1]\n            if (prev.type == 'text') {\n              prev.content = prev.content.trimEnd()\n              if (!prev.content) {\n                curr.main.pop()\n                if (lines) {\n                  lines -= 1\n                  if (!lines) {\n                    break\n                  }\n                }\n              } else {\n                prev.eol = false\n                break\n              }\n            } else {\n              break\n            }\n          } else {\n            break\n          }\n        } while (true)\n      }\n      const trimEndLines = (lines?: number) => {\n        let nextline = 0\n        do {\n          nextline += 1\n          if (i + nextline < resultSize) {\n            let next = this.result[i + nextline]\n            if (next.type == 'text') {\n              next.data = next.data.trimStart()\n              if (!next.data) {\n                next.type = 'skip'\n                if (lines) {\n                  lines -= 1\n                  if (!lines) {\n                    break\n                  }\n                }\n              } else {\n                next.eol = false\n                break\n              }\n            } else {\n              break\n            }\n          } else {\n            break\n          }\n        } while (true)\n      }\n      const trimStartSpases = () => {\n        if (curr.main.length > 0) {\n          let prev = curr.main[curr.main.length - 1]\n          if (prev.type == 'text') {\n            prev.content = prev.content.replaceAll(' ', '')\n            if (!prev.content) {\n              curr.main.pop()\n            }\n          }\n        }\n      }\n\n      const trimEndSpaces = () => {\n        if (i + 1 < resultSize) {\n          let next = this.result[i + 1]\n          if (next.type == 'text') {\n            next.data = next.data.replaceAll(' ', '')\n            if (!next.data) {\n              next.type = 'skip'\n            }\n          }\n        }\n      }\n\n      if (curr.main.length > 0) {\n        let prev = curr.main[curr.main.length - 1]\n        if (prev.line != line) {\n          curr.main[curr.main.length - 1].eol = true\n        } else {\n          curr.main[curr.main.length - 1].eol = false\n        }\n      }\n      switch (type) {\n        case 'directive':\n          state = 'directive'\n          trimStartLines()\n          trimEndLines()\n          curr.directives.push(r)\n          break\n        case 'blockStart':\n          state = 'blockStart'\n          trimStartLines()\n          trimEndLines()\n          curr = new CodeBlock(r)\n          content.addBlock(curr)\n          break\n        case 'slotStart':\n          state = 'slotStart'\n          trimStartLines()\n          trimEndLines()\n          curr = new CodeBlock(r)\n          content.addSlot(curr)\n          break\n        case 'blockEnd':\n          state = 'blockEnd'\n          trimStartLines()\n          curr = content\n          trimEndLines()\n          break\n        case 'unknown':\n          /**\n            <% 'Scriptlet' tag, for control-flow, no output\n            <%_ \u2018Whitespace Slurping\u2019 Scriptlet tag, strips all whitespace before it\n            <%= Outputs the value into the template (HTML escaped)\n            <%- Outputs the unescaped value into the template\n             */\n          let actual_type: ResultTypes\n          switch (r.start) {\n            case '<%':\n              actual_type = 'code'\n              break\n            case '<%_':\n              actual_type = 'code'\n              trimStartSpases()\n              break\n            case '<%-':\n              actual_type = 'expression'\n              break\n            case '<%=':\n              actual_type = 'uexpression'\n              break\n            case '<%#':\n              actual_type = 'comments'\n              break\n          }\n          switch (r.end) {\n            case '-%>':\n              trimEndLines(1)\n              break\n            case '_%>':\n              trimEndSpaces()\n              break\n          }\n          if (data) {\n            if (actual_type !== 'comments') {\n              curr.main.push({\n                content: data,\n                pos,\n                line,\n                column,\n                start,\n                end,\n                type: actual_type,\n                eol,\n              })\n            } else {\n              curr.documentation.push({\n                content: data,\n                pos,\n                line,\n                column,\n                start,\n                end,\n                type: actual_type,\n                eol,\n              })\n            }\n          }\n          break\n        case 'code':\n          if (start == '<#-') {\n            trimStartLines()\n          }\n          if (end == '-#>') {\n            trimEndLines()\n          }\n          if (data) {\n            state = 'code'\n            curr.main.push({\n              content: data,\n              pos,\n              line,\n              column,\n              start,\n              end,\n              type,\n              eol,\n            })\n          }\n          break\n        case 'expression':\n        case 'expression2':\n          if (data) {\n            curr.main.push({\n              content: data,\n              pos,\n              line,\n              column,\n              start,\n              end,\n              type: 'expression',\n              eol,\n            })\n          }\n          break\n        case 'uexpression':\n        case 'uexpression2':\n          if (data) {\n            curr.main.push({\n              content: data,\n              pos,\n              line,\n              column,\n              start,\n              end,\n              type: 'uexpression',\n              eol,\n            })\n          }\n          break\n        case 'text':\n          state = null\n          curr.main.push({\n            content: data,\n            pos,\n            line,\n            column,\n            start,\n            end,\n            type,\n            eol,\n          })\n          break\n        case 'comments':\n          trimStartLines()\n          trimEndLines()\n          if (data) {\n            curr.documentation.push({\n              content: data,\n              pos,\n              line,\n              column,\n              start,\n              end,\n              type,\n              eol,\n            })\n          }\n          break\n      }\n    }\n    return content\n  }\n\n  private SYMBOL() {\n    const res = this.buffer[this.pos]\n    if (this.curlyAware == 1) {\n      if (~res.indexOf('{')) {\n        this.curlyBalance.push(this.pos)\n      } else if (~res.indexOf('}')) {\n        this.curlyBalance.pop()\n      }\n    }\n    if (this.curlyAware == 2) {\n      if (~res.indexOf('{{')) {\n        this.curlyBalance.push(this.pos)\n      } else if (~res.indexOf('}}')) {\n        this.curlyBalance.pop()\n      }\n    }\n    // can return more than one char as autoocorrection of endof lines\n    return this.SKIP(res)\n  }\n  private DETECT_INDENT() {\n    const { buffer } = this\n    const indent = detectIndent(buffer).indent\n    if (~indent.indexOf('\\t')) {\n      this.INDENT = Parser.DEFAULT_TAB_SIZE\n    } else {\n      this.INDENT = indent.length\n    }\n  }\n  private SKIP(term: string) {\n    const { INDENT } = this\n    let eol = false\n    if (term.length == 1) {\n      if (\n        term == '\\n' ||\n        term == '\\r' ||\n        term == '\\u2028' ||\n        term == '\\u2029'\n      ) {\n        if (term == '\\r' && this.SUB('\\r\\n') == '\\r\\n') {\n          term = '\\r\\n'\n        }\n        this.column = 1\n        this.line += 1\n        eol = true\n      } else if (term == '\\t') {\n        if (!INDENT) this.DETECT_INDENT()\n        this.column += this.INDENT\n      } else {\n        this.column += 1\n      }\n      this.pos += term.length\n    } else {\n      // \u043A\u0430\u0436\u0434\u043E\u0435 \u0432\u0445\u043E\u0436\u0434\u0435\u043D\u0438\u0435 \u043D\u0443\u0436\u043D\u043E \u0440\u0430\u0437\u043E\u0431\u0440\u0430\u0442\u044C\n      // \u0438\u043C\u0438\u0442\u0438\u0440\u0443\u0435\u043C \u043F\u043E\u0441\u0438\u043C\u0432\u043E\u043B\u044C\u043D\u0443\u044E \u043F\u0435\u0440\u0435\u0434\u0430\u0447\u0443\n      const startPos = this.pos\n      let nTerm = ''\n      do {\n        // \u043C\u043E\u0436\u0435\u0442 \u043F\u0435\u0440\u0435\u0445\u043E\u0434\u0438\u0442\u044C \u0431\u043E\u043B\u044C\u0448\u0435 \u0447\u0435\u043C \u043D\u0430 1 \u0441\u0438\u043C\u0432\u043E\u043B\n        nTerm += this.SKIP(this.buffer[this.pos])\n      } while (this.pos < startPos + term.length)\n      term = nTerm\n    }\n\n    return { term, eol }\n  }\n  private block(extra: Partial<ParserResult> = {}): ParserResult {\n    const { pos, line, column, globalState, actualState } = this\n    return {\n      data: '',\n      pos,\n      line,\n      column,\n      type: actualState || globalState,\n      ...extra,\n    }\n  }\n  private SUB(str) {\n    const { pos, size, buffer } = this\n    return SUB(buffer, str, pos, size)\n  }\n  private term(extra = {}) {\n    this.globalToken = this.block(extra)\n    this.result.push(this.globalToken)\n  }\n}\n\nfunction SUB(buffer: string, str: string, pos: number = 0, size: number = 0) {\n  if (!size) {\n    size = buffer.length\n  }\n  const len = str.length\n  const from = pos\n  const to = pos + len\n  if (to <= size) {\n    let res = ''\n    for (let i = from; i < to; i += 1) {\n      res += buffer[i]\n    }\n    return res\n  } else {\n    return ''\n  }\n}\n", "export default {\n    alias: [\"codeblock.njs\"],\n    script: function (blockList, _content, partial, slot, options) {\n        var out = [];\n        var textQuote = false;\n        for (var i = 0, len = blockList.length; i < len; i++) {\n            var block = blockList[i];\n            var cont = block.content;\n            switch (block.type) {\n                case 'text':\n                    {\n                        let res = '';\n                        if (!textQuote) {\n                            textQuote = true;\n                            res = ';out.push(\\n';\n                        }\n                        else {\n                            let lasItem = out.pop();\n                            res = `${lasItem} + `;\n                        }\n                        if (block.eol) {\n                            res += JSON.stringify(cont + '\\n');\n                            res += '\\n';\n                            //   textQuote = false\n                        }\n                        else {\n                            res += JSON.stringify(cont);\n                        }\n                        out.push(res);\n                    }\n                    break;\n                case 'uexpression':\n                    {\n                        let res = '';\n                        if (!textQuote) {\n                            textQuote = true;\n                            res = ';out.push(\\n';\n                        }\n                        else {\n                            let lasItem = out.pop();\n                            res = `${lasItem} + `;\n                        }\n                        res += `escapeIt(${cont})`;\n                        if (textQuote && !block.eol) {\n                            out.push(res);\n                        }\n                        else {\n                            // textQuote = false\n                            out.push(`${res}\\n`);\n                        }\n                    }\n                    break;\n                case 'expression':\n                    {\n                        let res = '';\n                        if (!textQuote) {\n                            textQuote = true;\n                            res = ';out.push(\\n';\n                        }\n                        else {\n                            let lasItem = out.pop();\n                            res = `${lasItem} + `;\n                        }\n                        res += `(${cont})`;\n                        if (textQuote && !block.eol) {\n                            out.push(res);\n                        }\n                        else {\n                            // textQuote = false\n                            out.push(`${res}\\n`);\n                        }\n                    }\n                    break;\n                case 'code':\n                    if (textQuote) {\n                        let item = out.pop();\n                        out.push(`${item});\\n`);\n                        textQuote = false;\n                    }\n                    out.push(`${cont}${block.eol ? '\\n' : ''}`);\n                    break;\n            }\n        }\n        if (textQuote) {\n            let lasItem = out.pop();\n            out.push(`${lasItem});\\n`);\n        }\n        ;\n        out.push(\"\" + \"\");\n        return out.join('');\n    },\n    compile: function () {\n        this.alias = [\"codeblock.njs\"];\n    },\n    dependency: {}\n};\n", "export default {\n    alias: [\"compilationError.njs\"],\n    script: function (context, _content, partial, slot, options) {\n        var out = [];\n        out.push((context.error.message) + \";\\n\"\n            + \"\" + (context.compiledFile) + \";\" + \"\");\n        return out.join('');\n    },\n    compile: function () {\n        this.alias = [\"compilationError.njs\"];\n    },\n    dependency: {}\n};\n", "export default {\n    alias: [\"compiled.njs\"],\n    script: function (context, _content, partial, slot, options) {\n        var out = [];\n        out.push(\"module.exports = \" + (partial(context, 'core')) + \";\\n\"\n            + \"\" + \"\");\n        return out.join('');\n    },\n    compile: function () {\n        this.alias = [\"compiled.njs\"];\n        this.aliases = {};\n        this.aliases[\"core\"] = \"MainTemplate.njs\";\n        this.factory.ensure(\"MainTemplate.njs\");\n    },\n    dependency: {\n        \"MainTemplate.njs\": true,\n        \"core\": true,\n    }\n};\n", "export default {\n    alias: [\"es6module.njs\"],\n    script: function (context, _content, partial, slot, options) {\n        var out = [];\n        out.push(\"export default \" + (partial(context, 'core')) + \";\\n\"\n            + \"\" + \"\");\n        return out.join('');\n    },\n    compile: function () {\n        this.alias = [\"es6module.njs\"];\n        this.aliases = {};\n        this.aliases[\"core\"] = \"MainTemplate.njs\";\n        this.factory.ensure(\"MainTemplate.njs\");\n    },\n    dependency: {\n        \"MainTemplate.njs\": true,\n        \"core\": true,\n    }\n};\n", "export default {\n    alias: [\"MainTemplate.njs\"],\n    script: function (context, _content, partial, slot, options) {\n        function content(blockName, ctx) {\n            if (ctx === undefined || ctx === null)\n                ctx = context;\n            return _content(blockName, ctx, content, partial, slot);\n        }\n        var out = [];\n        const { directives } = context;\n        out.push(\"{\\n\"\n            + \"\");\n        if (directives.chunks) {\n            ;\n            out.push(\"\\n\"\n                + \"chinks: \" + (directives.chunks) + \"\\n\"\n                + \"\");\n        }\n        ;\n        out.push(\"\\n\"\n            + \"\");\n        if (directives.alias) {\n            ;\n            out.push(\"\\n\"\n                + \"alias: \" + (JSON.stringify(directives.alias)) + \",\\n\"\n                + \"\");\n        }\n        ;\n        out.push(\"script: function (\" + (directives.context) + \", _content, partial, slot, options){\\n\"\n            + \"    \" + (content('maincontent', directives)) + \"\\n\"\n            + \"    var out = []\\n\"\n            + \"    \" + (content('chunks-start', directives)) + \"\\n\"\n            + \"    \" + (partial(context.main, 'codeblock')) + \"\\n\"\n            + \"    \" + (content('chunks-finish', directives)) + \"\\n\"\n            + \"     return out.join('')\\n\"\n            + \"  },\\n\"\n            + \"\\n\");\n        const blockNames = Object.keys(context.blocks);\n        if (blockNames.length > 0) {\n            ;\n            out.push(\"blocks : {\\n\"\n                + \"\\n\");\n            for (let i = 0; i < blockNames.length; i += 1) {\n                const block = context.blocks[blockNames[i]];\n                out.push(\"\\\"\" + (blockNames[i]) + \"\\\": function(\" + (block.directives.context) + \",  _content, partial, slot, options) {\\n\"\n                    + \"      \" + (content('maincontent', block.directives)) + \"\\n\"\n                    + \"      var out = []\\n\"\n                    + \"      \" + (partial(block.main, 'codeblock')) + \"\\n\"\n                    + \"      return out.join('')\\n\"\n                    + \"    },\\n\"\n                    + \"\");\n            }\n            ;\n            out.push(\"\\n\"\n                + \"  },\");\n        }\n        const slotNames = Object.keys(context.slots);\n        if (slotNames.length > 0) {\n            ;\n            out.push(\"slots : {\\n\"\n                + \"\\n\");\n            for (let i = 0; i < slotNames.length; i += 1) {\n                const slot = context.blocks[slotNames[i]];\n                out.push(\"\\\"\" + (slotNames[i]) + \"\\\": function(\" + (slot.directives.context) + \",  _content, partial, slot, options){\\n\"\n                    + \"      \" + (content('maincontent', slot.directives)) + \"\\n\"\n                    + \"      var out = []\\n\"\n                    + \"      \" + (partial(slot.main, 'codeblock')) + \"\\n\"\n                    + \"      return out.join('')\\n\"\n                    + \"    },\\n\"\n                    + \"\");\n            }\n            ;\n            out.push(\"\\n\"\n                + \"  },\\n\"\n                + \"\");\n        }\n        ;\n        out.push(\"\\n\"\n            + \"  compile: function() {\\n\"\n            + \"\");\n        if (directives.alias) {\n            ;\n            out.push(\"\\n\"\n                + \"    this.alias = \" + (JSON.stringify(directives.alias)) + \"\\n\"\n                + \"\");\n        }\n        ;\n        out.push(\"\\n\"\n            + \"\");\n        if (directives.requireAs.length > 0) {\n            ;\n            out.push(\"\\n\"\n                + \"    this.aliases={}\\n\"\n                + \"\");\n            var rq;\n            for (var i = 0, len = directives.requireAs.length; i < len; i++) {\n                rq = directives.requireAs[i];\n                out.push(\"\\n\"\n                    + \"    this.aliases[\\\"\" + (rq.alias) + \"\\\"] = \\\"\" + (rq.name) + \"\\\"\\n\"\n                    + \"    this.factory.ensure(\\\"\" + (rq.name) + \"\\\")\\n\"\n                    + \"\\n\");\n            }\n        }\n        ;\n        out.push(\"\\n\"\n            + \"\\n\"\n            + \"\");\n        if (directives.extend) {\n            ;\n            out.push(\"\\n\"\n                + \"    this.parent = \" + (JSON.stringify(directives.extend)) + \"\\n\"\n                + \"    this.mergeParent(this.factory.ensure(this.parent))\\n\"\n                + \"\");\n        }\n        ;\n        out.push(\"\\n\"\n            + \"  },\\n\"\n            + \"  dependency: {\\n\"\n            + \"  \");\n        if (directives.extend) {\n            ;\n            out.push((JSON.stringify(directives.extend)) + \": true,\\n\"\n                + \"  \");\n        }\n        if (directives.requireAs.length > 0) {\n            for (var i = 0, len = directives.requireAs.length; i < len; i++) {\n                rq = directives.requireAs[i];\n                out.push(\"\\n\"\n                    + \"    \\\"\" + (rq.name) + \"\\\": true,\\n\"\n                    + \"    \\\"\" + (rq.alias) + \"\\\": true,\\n\"\n                    + \"\\n\");\n            }\n        }\n        ;\n        out.push(\"\\n\"\n            + \"  }\\n\"\n            + \"}\\n\"\n            + \"\" + \"\");\n        return out.join('');\n    },\n    blocks: {\n        \"maincontent\": function (directives, _content, partial, slot, options) {\n            var out = [];\n            if (directives.escapeIt) {\n                ;\n                out.push(\"\\n\"\n                    + \"    const {escapeIt} = options\\n\"\n                    + \"  \");\n            }\n            if (directives.content) {\n                ;\n                out.push(\"\\n\"\n                    + \"    function content(blockName, ctx) {\\n\"\n                    + \"      if(ctx === undefined || ctx === null) ctx = \" + (directives.context) + \"\\n\"\n                    + \"      return _content(blockName, ctx, content, partial, slot)\\n\"\n                    + \"    }\\n\"\n                    + \"  \");\n            }\n            return out.join('');\n        },\n        \"chunks-start\": function (directives, _content, partial, slot, options) {\n            var out = [];\n            if (directives.chunks) {\n                ;\n                out.push(\"\\n\"\n                    + \"    const _partial = partial\\n\"\n                    + \"    partial = function(obj, template) {\\n\"\n                    + \"      const result = _partial(obj, template)\\n\"\n                    + \"      if(Array.isArray(result)){\\n\"\n                    + \"        result.forEach(r => {\\n\"\n                    + \"          chunkEnsure(r.name, r.content)\\n\"\n                    + \"        })\\n\"\n                    + \"        return ''\\n\"\n                    + \"      } else {\\n\"\n                    + \"        return result\\n\"\n                    + \"      }\\n\"\n                    + \"    }\\n\"\n                    + \"    const main = '\" + (directives.chunks) + \"'\\n\"\n                    + \"    var current = main\\n\"\n                    + \"    let outStack = [current]\\n\"\n                    + \"    let result\\n\"\n                    + \"\\n\"\n                    + \"    function chunkEnsure(name, content) {\\n\"\n                    + \"      if (!result) {\\n\"\n                    + \"        result = {}\\n\"\n                    + \"      }\\n\"\n                    + \"      if (!result.hasOwnProperty(name)) {\\n\"\n                    + \"        result[name] = content ? content : []\\n\"\n                    + \"      }\\n\"\n                    + \"    }\\n\"\n                    + \"    function chunkStart(name) {\\n\"\n                    + \"      chunkEnsure(name)\\n\"\n                    + \"      chunkEnd()\\n\"\n                    + \"      current = name\\n\"\n                    + \"      out = []\\n\"\n                    + \"    }\\n\"\n                    + \"    function chunkEnd() {\\n\"\n                    + \"      result[current].push(out)\\n\"\n                    + \"      out = []\\n\"\n                    + \"      current = outStack.pop() || main\\n\"\n                    + \"    }\\n\"\n                    + \"    chunkStart(main)\\n\"\n                    + \"  \");\n            }\n            return out.join('');\n        },\n        \"chunks-finish\": function (directives, _content, partial, slot, options) {\n            var out = [];\n            if (directives.chunks) {\n                ;\n                out.push(\"\\n\"\n                    + \"    chunkEnd()\\n\"\n                    + \"    \");\n                if (!directives.useHash) {\n                    ;\n                    out.push(\"\\n\"\n                        + \"    out = Object.keys(result)\\n\"\n                        + \"      \");\n                    if (!directives.includeMainChunk) {\n                        ;\n                        out.push(\"\\n\"\n                            + \"      .filter(i => i !== '\" + (directives.chunks) + \"')\\n\"\n                            + \"      \");\n                    }\n                    ;\n                    out.push(\"\\n\"\n                        + \"      .map(curr => ({ name: curr, content: result[curr] }))\\n\"\n                        + \"      \");\n                }\n                else {\n                    ;\n                    out.push(\"\\n\"\n                        + \"    out = result\\n\"\n                        + \"      \");\n                    if (!directives.includeMainChunk) {\n                        ;\n                        out.push(\"\\n\"\n                            + \"    delete out['\" + (directives.chunks) + \"']\\n\"\n                            + \"      \");\n                    }\n                    ;\n                    out.push(\"\\n\"\n                        + \"    \");\n                }\n                ;\n                out.push(\"\\n\"\n                    + \"  \");\n            }\n            return out.join('');\n        },\n    },\n    compile: function () {\n        this.alias = [\"MainTemplate.njs\"];\n        this.aliases = {};\n        this.aliases[\"codeblock\"] = \"codeblock.njs\";\n        this.factory.ensure(\"codeblock.njs\");\n    },\n    dependency: {\n        \"codeblock.njs\": true,\n        \"codeblock\": true,\n    }\n};\n", "export default {\n    alias: [\"raw.njs\"],\n    script: function (context, _content, partial, slot, options) {\n        var out = [];\n        out.push(\"(function(){\\n\"\n            + \"  return \" + (partial(context, 'core')) + \";\\n\"\n            + \"})();\" + \"\");\n        return out.join('');\n    },\n    compile: function () {\n        this.alias = [\"raw.njs\"];\n        this.aliases = {};\n        this.aliases[\"core\"] = \"MainTemplate.njs\";\n        this.factory.ensure(\"MainTemplate.njs\");\n    },\n    dependency: {\n        \"MainTemplate.njs\": true,\n        \"core\": true,\n    }\n};\n", "export default {\n    alias: [\"singlefile.es6.njs\"],\n    script: function (files, _content, partial, slot, options) {\n        var out = [];\n        out.push(\"import { Factory } from 'fte.js/lib/standalone.fte.js'\\n\"\n            + \"\\n\"\n            + \"export const templates = {\\n\"\n            + \"\");\n        files.forEach(file => {\n            ;\n            out.push(\"\\n\"\n                + \"  ['\" + ((file.template.alias || file.name)) + \"']: \" + (partial(file.template, 'core')) + \",\\n\"\n                + \"\");\n        });\n        out.push(\"\\n\"\n            + \"}\\n\"\n            + \"\\n\"\n            + \"const F = new Factory(templates)\\n\"\n            + \"\\n\"\n            + \"export function run (context, name) {\\n\"\n            + \"  return F.run(context, name)\\n\"\n            + \"}\\n\"\n            + \"\\n\"\n            + \"\" + \"\");\n        return out.join('');\n    },\n    compile: function () {\n        this.alias = [\"singlefile.es6.njs\"];\n        this.aliases = {};\n        this.aliases[\"core\"] = \"MainTemplate.njs\";\n        this.factory.ensure(\"MainTemplate.njs\");\n    },\n    dependency: {\n        \"MainTemplate.njs\": true,\n        \"core\": true,\n    }\n};\n", "export default {\n    alias: [\"singlefile.njs\"],\n    script: function (files, _content, partial, slot, options) {\n        var out = [];\n        out.push(\"const { Factory } = require('fte.js/lib/standalone.fte.js')\\n\"\n            + \"\\n\"\n            + \"const templates = {\\n\"\n            + \"\");\n        files.forEach(file => {\n            ;\n            out.push(\"\\n\"\n                + \"  ['\" + ((file.template.alias || file.name)) + \"']: \" + (partial(file.template, 'core')) + \",\\n\"\n                + \"\");\n        });\n        out.push(\"\\n\"\n            + \"}\\n\"\n            + \"\\n\"\n            + \"exports.templates = templates\\n\"\n            + \"const F = new Factory(templates)\\n\"\n            + \"\\n\"\n            + \"function run(context, name){\\n\"\n            + \"  return F.run( context, name )\\n\"\n            + \"}\\n\"\n            + \"\\n\"\n            + \"exports.run = run\\n\"\n            + \"\" + \"\");\n        return out.join('');\n    },\n    compile: function () {\n        this.alias = [\"singlefile.njs\"];\n        this.aliases = {};\n        this.aliases[\"core\"] = \"MainTemplate.njs\";\n        this.factory.ensure(\"MainTemplate.njs\");\n    },\n    dependency: {\n        \"MainTemplate.njs\": true,\n        \"core\": true,\n    }\n};\n", "export default {\n    alias: [\"standalone.es6.njs\"],\n    script: function (files, _content, partial, slot, options) {\n        var out = [];\n        out.push(\"import { Factory } from 'fte.js/lib/standalone.fte.js'\\n\"\n            + \"\\n\"\n            + \"\");\n        for (let i = 0; i < files.length; i += 1) {\n            ;\n            out.push(\"\\n\"\n                + \"  import \" + (files[i].name.replaceAll(/[\\s\\.]/g, '_')) + \" from '\" + (files[i].path) + \"'\\n\"\n                + \"\");\n        }\n        ;\n        out.push(\"\\n\"\n            + \"\\n\"\n            + \"const templates = {\\n\"\n            + \"\");\n        for (let i = 0; i < files.length; i += 1) {\n            ;\n            out.push(\"\\n\"\n                + \"  '\" + (files[i].name) + \"': \" + (files[i].name.replaceAll(/[\\s\\.]/g, '_')) + \",\\n\"\n                + \"\");\n        }\n        ;\n        out.push(\"\\n\"\n            + \"}\\n\"\n            + \"\\n\"\n            + \"const F = new Factory(templates)\\n\"\n            + \"\\n\"\n            + \"module.exports = (context, name) => {\\n\"\n            + \"  F.run( context, name )\\n\"\n            + \"}\\n\"\n            + \"\" + \"\");\n        return out.join('');\n    },\n    compile: function () {\n        this.alias = [\"standalone.es6.njs\"];\n    },\n    dependency: {}\n};\n", "export default {\n    alias: [\"standalone.index.es6.njs\"],\n    script: function (files, _content, partial, slot, options) {\n        var out = [];\n        for (let i = 0; i < files.length; i += 1) {\n            ;\n            out.push(\"\\n\"\n                + \"  import \" + (files[i].name.replaceAll(/[\\s\\.]/g, '_')) + \" from '\" + (files[i].path) + \"'\\n\"\n                + \"\");\n        }\n        ;\n        out.push(\"\\n\"\n            + \"\\n\"\n            + \"const templates = {\\n\"\n            + \"\");\n        for (let i = 0; i < files.length; i += 1) {\n            ;\n            out.push(\"\\n\"\n                + \"  '\" + (files[i].name) + \"': \" + (files[i].name.replaceAll(/[\\s\\.]/g, '_')) + \",\\n\"\n                + \"\");\n        }\n        ;\n        out.push(\"\\n\"\n            + \"}\\n\"\n            + \"export default templates\" + \"\");\n        return out.join('');\n    },\n    compile: function () {\n        this.alias = [\"standalone.index.es6.njs\"];\n    },\n    dependency: {}\n};\n", "export default {\n    alias: [\"standalone.index.njs\"],\n    script: function (files, _content, partial, slot, options) {\n        var out = [];\n        out.push(\"const templates = {\\n\"\n            + \"\");\n        for (let i = 0; i < files.length; i += 1) {\n            ;\n            out.push(\"\\n\"\n                + \"  '\" + (files[i].name) + \"': require('\" + (files[i].path) + \"'),\\n\"\n                + \"\");\n        }\n        ;\n        out.push(\"\\n\"\n            + \"}\\n\"\n            + \"module.exports = templates\" + \"\");\n        return out.join('');\n    },\n    compile: function () {\n        this.alias = [\"standalone.index.njs\"];\n    },\n    dependency: {}\n};\n", "export default {\n    alias: [\"standalone.njs\"],\n    script: function (files, _content, partial, slot, options) {\n        var out = [];\n        out.push(\"const { Factory } = require('fte.js/lib/standalone.fte.js')\\n\"\n            + \"\\n\"\n            + \"const templates = {\\n\"\n            + \"\");\n        for (let i = 0; i < files.length; i += 1) {\n            ;\n            out.push(\"\\n\"\n                + \"  '\" + (files[i].name) + \"': require('\" + (files[i].path) + \"'),\\n\"\n                + \"\");\n        }\n        ;\n        out.push(\"\\n\"\n            + \"}\\n\"\n            + \"\\n\"\n            + \"const F = new Factory(templates)\\n\"\n            + \"\\n\"\n            + \"module.exports = (context, name) => {\\n\"\n            + \"  F.run( context, name )\\n\"\n            + \"}\\n\"\n            + \"\" + \"\");\n        return out.join('');\n    },\n    compile: function () {\n        this.alias = [\"standalone.njs\"];\n    },\n    dependency: {}\n};\n", "\n  import codeblock_njs from './codeblock.njs'\n\n  import compilationError_njs from './compilationError.njs'\n\n  import compiled_njs from './compiled.njs'\n\n  import es6module_njs from './es6module.njs'\n\n  import MainTemplate_njs from './MainTemplate.njs'\n\n  import raw_njs from './raw.njs'\n\n  import singlefile_es6_njs from './singlefile.es6.njs'\n\n  import singlefile_njs from './singlefile.njs'\n\n  import standalone_es6_njs from './standalone.es6.njs'\n\n  import standalone_index_es6_njs from './standalone.index.es6.njs'\n\n  import standalone_index_njs from './standalone.index.njs'\n\n  import standalone_njs from './standalone.njs'\n\n\nconst templates = {\n\n  'codeblock.njs': codeblock_njs,\n\n  'compilationError.njs': compilationError_njs,\n\n  'compiled.njs': compiled_njs,\n\n  'es6module.njs': es6module_njs,\n\n  'MainTemplate.njs': MainTemplate_njs,\n\n  'raw.njs': raw_njs,\n\n  'singlefile.es6.njs': singlefile_es6_njs,\n\n  'singlefile.njs': singlefile_njs,\n\n  'standalone.es6.njs': standalone_es6_njs,\n\n  'standalone.index.es6.njs': standalone_index_es6_njs,\n\n  'standalone.index.njs': standalone_index_njs,\n\n  'standalone.njs': standalone_njs,\n\n}\nexport default templates", "import { Parser } from '../parser/parse'\nimport { TemplateFactoryStandalone } from './factory'\nimport templates from '../templates'\n\nexport { Parser }\nexport const F = new TemplateFactoryStandalone(templates)\n\nexport function run(context: any, template: keyof typeof templates) {\n  return F.run(context, template)\n}\n\nexport function compileLight(content: Buffer | string) {\n  const compiled = Parser.parse(content.toString())\n  return run(compiled, 'raw.njs')\n}\n\nexport function compileFull(content: Buffer | string) {\n  const compiled = Parser.parse(content.toString())\n  return run(compiled, 'compiled.njs')\n}\n\nexport function compileTs(content: Buffer | string) {\n  const compiled = Parser.parse(content.toString())\n  return run(compiled, 'es6module.njs')\n}\n\nexport function parseFile(content: Buffer | string) {\n  return Parser.parse(content.toString())\n}\n"],
  "mappings": "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",
  "names": ["module", "templates", "templates", "detectIndent", "directives", "i", "slot"]
}
