{
  "version": 3,
  "sources": ["../src/browser/index.ts", "../src/common/helpers.ts", "../src/common/template.ts", "../src/browser/template.ts", "../src/common/factory.ts", "../src/browser/factory.ts"],
  "sourcesContent": ["import { TemplateFactoryBrowser as Factory } from './factory'\nimport { TemplateBrowser as Template } from './template'\n\nexport { Factory, Template }\n", "import { HashType } from './interfaces'\n\nvar escapeExp = /[&<>\"]/,\n  escapeAmpExp = /&/g,\n  escapeLtExp = /</g,\n  escapeGtExp = />/g,\n  escapeQuotExp = /\"/g\n\nexport function escapeIt(text: string) {\n  if (text == null) {\n    return ''\n  }\n\n  var result = text.toString()\n  if (!escapeExp.test(result)) {\n    return result\n  }\n\n  return result\n    .replace(escapeAmpExp, '&amp;')\n    .replace(escapeLtExp, '&lt;')\n    .replace(escapeGtExp, '&gt;')\n    .replace(escapeQuotExp, '&quot;')\n}\n\nexport function applyIndent(_str: string, _indent: number | string) {\n  var str = String(_str)\n  var indent = ''\n  if (typeof _indent == 'number' && _indent > 0) {\n    var res = ''\n    for (var i = 0; i < _indent; i++) {\n      res += ' '\n    }\n    indent = res\n  }\n  if (typeof _indent == 'string' && _indent.length > 0) {\n    indent = _indent\n  }\n  if (indent && str) {\n    return str\n      .split('\\n')\n      .map((s) => indent + s)\n      .join('\\n')\n  } else {\n    return str\n  }\n}\n\nexport function set(data: HashType, path: string, value: any) {\n  if ('object' === typeof data) {\n    const parts = path.split('.')\n    if (Array.isArray(parts)) {\n      const curr = parts.shift()\n      if (parts.length > 0) {\n        if (!data[curr]) {\n          if (isNaN(parseInt(parts[0], 10))) {\n            data[curr] = {}\n          } else {\n            data[curr] = []\n          }\n        }\n        set(data[curr], parts.join('.'), value)\n      } else {\n        data[path] = value\n      }\n    } else {\n      data[path] = value\n    }\n  }\n}\n\nexport function get(data: HashType, path: string) {\n  if ('object' === typeof data) {\n    if (data[path] === undefined) {\n      const parts = path.split('.')\n      if (Array.isArray(parts)) {\n        const curr = parts.shift()\n        if (parts.length > 0) {\n          return get(data[curr], parts.join('.'))\n        }\n        return data[curr]\n      }\n    }\n    return data[path]\n  }\n  return data\n}\n\nexport function merge(a: HashType, b: HashType, property: string) {\n  let prop\n  const aProp = a[property]\n  if (aProp !== undefined) {\n    let bProp = b[property]\n    if (bProp === undefined) {\n      bProp = b[property] = {}\n    }\n    const propList = Object.keys(aProp)\n    for (let i = 0, pLen = propList.length; i < pLen; i++) {\n      prop = propList[i]\n      if (!(prop in bProp)) {\n        bProp[prop] = aProp[prop]\n      }\n    }\n  }\n}\n", "import { merge } from './helpers'\nimport { TemplateFactoryBase } from './factory'\nimport {\n  BlocksHash,\n  HashTypeGeneric,\n  BlockRunFunction,\n  TemplateConfig,\n  DefaultFactoryOption,\n} from './interfaces'\n\nexport class TemplateBase<T extends DefaultFactoryOption> {\n  public parent: string\n  public blocks: BlocksHash<T>\n  public slots: BlocksHash<T>\n  public aliases: HashTypeGeneric<string>\n  public alias: Array<string>\n  public dependency: HashTypeGeneric<boolean>\n  public absPath: string\n  public name: string\n  public chunks: string\n  public srcCode: string\n  public script: BlockRunFunction<T>\n  public factory: TemplateFactoryBase<T>\n\n  constructor(config: TemplateConfig<T>) {\n    if (!(this instanceof TemplateBase)) {\n      throw new Error('constructor is not a function')\n    }\n    this.srcCode = config.source ? config.source.toString() : ''\n    this.name = config.name\n    this.absPath = config.absPath\n    this.script = config.script\n    this.blocks = config.blocks\n    this.slots = config.slots\n    this.dependency = config.dependency\n    this.parent = config.parent ? config.parent.trim() : ''\n    this.aliases = config.aliases || {}\n    this.alias = config.alias || [config.name]\n    this.factory = config.factory\n    if (config.compile) {\n      this.compile = config.compile\n    }\n  }\n\n  public mergeParent(src: TemplateBase<T>) {\n    if (src) {\n      merge(src, this, 'blocks')\n      merge(src, this, 'aliases')\n      merge(src, this, 'slots')\n    }\n  }\n\n  public compile() {\n    throw new Error('abstract method call')\n  }\n}\n", "import { DefaultFactoryOption } from '../common/interfaces'\nimport { TemplateBase } from '../common/template'\n\nexport class TemplateBrowser<\n  T extends DefaultFactoryOption,\n> extends TemplateBase<T> {\n  public compile() {\n    if (this.parent) {\n      this.mergeParent(this.factory.ensure(this.parent))\n    }\n  }\n}\n", "declare let process: { browser: boolean; cwd: () => string }\n\nimport { TemplateBase } from './template'\nimport {\n  HashType,\n  BlockContent,\n  HashTypeGeneric,\n  PartialFunction,\n  ContentFunction,\n  SlotsHash,\n  SlotFunction,\n  DefaultFactoryOption,\n} from './../common/interfaces'\nimport { applyIndent, escapeIt } from './helpers'\n\nexport const DefaultFactoryOptions: DefaultFactoryOption = {\n  applyIndent,\n  escapeIt,\n}\n\n/**\n * template factory -- it instantiate the templates\n */\nexport abstract class TemplateFactoryBase<T extends DefaultFactoryOption> {\n  public ext: Array<string> = []\n  public cache: HashTypeGeneric<TemplateBase<T>>\n  public debug = false\n  public watch = false\n  // \u043F\u043E\u0434\u0443\u043C\u0430\u0442\u044C \u043D\u0443\u0436\u043D\u043E \u043B\u0438 \u0434\u0435\u043B\u0430\u0442\u044C \u043E\u0434\u0438\u043D \u043E\u0431\u0449\u0438\u0439 \u0434\u043B\u044F \u0432\u0441\u0435 \u0441\u043F\u0438\u0441\u043E\u043A watchTree\n  public watchTree = undefined\n  public root = undefined\n  public options: T\n\n  constructor(\n    config: {\n      root?: string | Array<string>\n      debug?: boolean\n      watch?: boolean\n      ext?: Array<string>\n      preload?: boolean\n      options?: T\n    } = {},\n  ) {\n    config.options = { ...config.options, ...DefaultFactoryOptions }\n    this.options = config.options\n    if (!process.browser) {\n      // this only need in server-side code with server load code\n      this.root = config\n        ? config.root\n          ? Array.isArray(config.root)\n            ? config.root\n            : [config.root]\n          : [process.cwd()]\n        : [process.cwd()]\n      this.debug = (config && config.debug) || false\n      this.watch = config && config.watch\n\n      if (config && config.ext) {\n        if (Array.isArray(config.ext)) {\n          this.ext = config.ext\n        } else {\n          this.ext = [config.ext]\n        }\n      }\n      this.watchTree = {}\n    }\n    this.cache = {}\n    if (config && config.preload) {\n      this.preload()\n    }\n  }\n  public register(tpl: TemplateBase<T>, fileName?: string) {\n    if (!(tpl.name in this.cache)) {\n      this.cache[tpl.name] = tpl\n      if (tpl.alias && Array.isArray(tpl.alias)) {\n        tpl.alias\n          .filter((a) => a !== tpl.name)\n          .forEach((a) => {\n            this.cache[a] = tpl\n          })\n      }\n      this.cache[tpl.absPath] = tpl\n    }\n    return tpl\n  }\n\n  public ensure(fileName: string, absPath?: boolean): TemplateBase<T> {\n    if (!(fileName in this.cache)) {\n      const template = this.load(fileName, absPath)\n      if (this.watch) {\n        this.checkChanges(template, fileName, absPath)\n        const depList = Object.keys(template.dependency)\n        for (let i = 0, len = depList.length; i < len; i++) {\n          const templates =\n            this.watchTree[this.cache[depList[i]].absPath].templates\n          templates[template.absPath] = template\n        }\n      }\n      return template\n    }\n    return this.cache[fileName]\n  }\n  public blockContent(\n    tpl: TemplateBase<T>,\n    slots?: SlotsHash,\n  ): BlockContent<T> {\n    const scripts = []\n    const self = this\n    const bc: BlockContent<T> = {\n      slots: slots ? slots : {},\n      slot(name: string, content: string | Array<string>): void | string {\n        if (name) {\n          if (!this.slots.hasOwnProperty(name)) {\n            this.slots[name] = []\n          }\n          if (content) {\n            if (Array.isArray(content)) {\n              content.forEach((c) => this.slot(name, c))\n            } else {\n              if (this.slots[name].indexOf(content) === -1) {\n                this.slots[name].push(content)\n              }\n            }\n          } else {\n            return `#{partial(context['${name}'] || [], '${name}')}`\n          }\n        }\n      },\n      partial(obj: HashType, name: string): string {\n        if (tpl.aliases.hasOwnProperty(name)) {\n          return self.runPartial({\n            context: obj,\n            name: tpl.aliases[name],\n            absPath: true,\n            slots: this.slots,\n            options: this.options,\n          })\n        } else {\n          return self.runPartial({\n            context: obj,\n            name,\n            absPath: false,\n            slots: this.slots,\n            options: this.options,\n          })\n        }\n      },\n      content(\n        name: string,\n        context: HashType,\n        content: ContentFunction,\n        partial: PartialFunction,\n        slot: SlotFunction,\n      ) {\n        if (name) {\n          return tpl.blocks && tpl.blocks.hasOwnProperty(name)\n            ? tpl.blocks[name](context, content, partial, slot, self.options)\n            : ''\n        } else {\n          const fn = scripts.pop()\n          if (typeof fn === 'function') {\n            return fn(context, content, partial)\n          } else {\n            return ''\n          }\n        }\n      },\n      run(\n        $context: HashType,\n        $content: ContentFunction,\n        $partial: PartialFunction,\n      ): string {\n        function go(\n          this: TemplateBase<T>,\n          context,\n          content,\n          partial,\n          slot,\n        ): string | Array<{ name: string; content: string }> {\n          const $this = this as TemplateBase<T>\n          if ($this.parent) {\n            const parent = self.ensure($this.parent)\n            // tpl.mergeParent(parent); moved to compile.\n            scripts.push($this.script)\n            return go.call(parent, context, content, partial, slot)\n          } else {\n            try {\n              return $this.script(context, content, partial, slot, self.options)\n            } catch (e) {\n              throw new Error(\n                `template ${$this.name} failed to execute with error\n                  '${e.message}\n                  ${e.stack}'`,\n              )\n            }\n          }\n        }\n        return go.call(tpl, $context, $content, $partial, this.slot)\n      },\n    }\n    bc.content = bc.content.bind(bc)\n    bc.partial = bc.partial.bind(bc)\n    bc.run = bc.run.bind(bc)\n    bc.slot = bc.slot.bind(bc)\n    return bc\n  }\n\n  public preload(fileName?: string) {\n    throw new Error('abstract method call')\n  }\n\n  public checkChanges(template?: any, fileName?: any, absPath?: boolean) {\n    throw new Error('abstract method call')\n  }\n\n  public load(fileName: string, absPath: boolean): TemplateBase<T> {\n    throw new Error('abstract method call')\n  }\n\n  public run<T extends Record<string, any>>(\n    context: HashType,\n    name: string,\n  ): string | Array<{ name: string; content: string }> {\n    throw new Error('abstract method call')\n  }\n\n  public runPartial<T extends Record<string, any>>({\n    context,\n    name,\n    absPath,\n    options,\n    slots,\n  }: {\n    context: HashType\n    name: string\n    absPath?: boolean\n    options: T\n    slots?: SlotsHash\n  }): string {\n    throw new Error('abstract method call')\n  }\n}\n\n// \u043D\u0430\u0434\u043E \u0443\u0434\u0430\u043B\u0438\u0442\u044C \u0442\u0430\u043A \u0436\u0435 \u0432\u0441\u0435 watcher \u0417\u0430\u0432\u0438\u0441\u0438\u043C\u043E\u0441\u0442\u0438 \u043E\u0431\u043D\u043E\u0432\u043B\u044F\u0435\u043C\u043E\u0433\u043E \u0448\u0430\u0431\u043B\u043E\u043D\u0430,\n// \u0432 \u0441\u043B\u0443\u0447\u0430\u0435 \u0435\u0433\u043E \u0443\u0434\u0430\u043B\u0435\u043D\u0438\u044F \u0438\u0437 \u043A\u044D\u0448\u0430, \u0438 \u0442\u0430\u043A \u0436\u0435 \u043D\u0435 \u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u044C \u043C\u0430\u0441\u0441\u0438\u0432, \u0430\n", "import { TemplateBrowser } from './template'\nimport { TemplateFactoryBase } from './../common/factory'\nimport { HashTypeGeneric, HashType, SlotsHash } from './../common/interfaces'\nimport { TemplateConfig } from './../common/interfaces'\nimport { DefaultFactoryOption } from '../common/interfaces'\n\n/**\n * We must ensure that template is registered with its compiled templates\n */\ndeclare let global: {\n  fte<T extends DefaultFactoryOption>(filename): TemplateConfig<T>\n}\n\nexport class TemplateFactoryBrowser<\n  T extends DefaultFactoryOption,\n> extends TemplateFactoryBase<T> {\n  public resolveTemplateConfig(fileName: string): TemplateConfig<T> {\n    const result = global.fte<T>(fileName)\n    result.factory = this\n    result.name = fileName\n    return result\n  }\n\n  public load(fileName: string, absPath?: boolean) {\n    const template = this.resolveTemplateConfig(fileName)\n    const templ = new TemplateBrowser<T>(template)\n    this.register(templ, fileName)\n    templ.compile()\n    return templ\n  }\n\n  public run<T extends Record<string, any>>(\n    context: HashType,\n    name: string,\n  ): string | Array<{ name: string; content: string }> {\n    const templ = this.ensure(name)\n    const bc = this.blockContent(templ)\n    return bc.run(context, bc.content, bc.partial, bc.slot, this.options)\n  }\n\n  public runPartial<T extends Record<string, any>>({\n    context,\n    name,\n    absPath,\n    options,\n    slots,\n  }: {\n    context: HashType\n    name: string\n    absPath?: boolean\n    options: T\n    slots?: SlotsHash\n  }): string {\n    const templ = this.ensure(name)\n    if (!templ.chunks) {\n      const bc = this.blockContent(templ, slots)\n      return bc.run(\n        context,\n        bc.content,\n        bc.partial,\n        bc.slot,\n        this.options,\n      ) as string\n    } else {\n      throw new Error(\"cant't use template with chunks as partial\")\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
