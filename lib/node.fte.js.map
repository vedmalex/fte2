{
  "version": 3,
  "sources": ["../src/node/index.ts", "../src/node/factory.ts", "../src/common/helpers.ts", "../src/common/template.ts", "../src/node/helpers.ts", "../src/parser/parse.ts", "../src/node/compile.ts", "../src/templates/codeblock.njs.ts", "../src/templates/compilationError.njs.ts", "../src/templates/compiled.njs.ts", "../src/templates/es6module.njs.ts", "../src/templates/MainTemplate.njs.ts", "../src/templates/raw.njs.ts", "../src/templates/singlefile.es6.njs.ts", "../src/templates/singlefile.njs.ts", "../src/templates/standalone.es6.njs.ts", "../src/templates/standalone.index.es6.njs.ts", "../src/templates/standalone.index.njs.ts", "../src/templates/standalone.njs.ts", "../src/templates/index.ts", "../src/standalone/template.ts", "../src/common/factory.ts", "../src/standalone/factory.ts", "../src/node/template.ts"],
  "sourcesContent": ["import { TemplateFactory as Factory } from './factory'\nimport { Template } from './template'\nimport {\n  F,\n  compileFull,\n  compileLight,\n  compileTs,\n  run,\n  parseFile,\n} from './compile'\nimport { Parser } from '../parser/parse'\n\nexport {\n  Factory,\n  Template,\n  compileLight,\n  compileFull,\n  Parser,\n  run,\n  compileTs,\n  parseFile,\n}\n\nexport function parse(source: string, context: any): string | object[] {\n  const ONLY_ONE = 'ONLY_ONE'\n  const factory = new Factory({})\n  const tpl = new Template({\n    source: source,\n    name: ONLY_ONE,\n    factory,\n  })\n  tpl.compile()\n  factory.cache[ONLY_ONE] = tpl\n  return tpl.factory.run(context, ONLY_ONE)\n}\n", "import * as fs from 'fs'\nimport * as path from 'path'\nimport * as glob from 'glob'\nimport { Template } from './template'\nimport { FactoryConfig, TemplateFactoryBase } from './../common/factory'\nimport { safeEval } from './helpers'\nimport { FSWatcher, watch } from 'chokidar'\n\nimport {\n  DefaultFactoryOption,\n  HashType,\n  SlotsHash,\n} from './../common/interfaces'\nimport { TemplateBase } from 'src/common/template'\n\nexport class TemplateFactory<\n  T extends DefaultFactoryOption,\n> extends TemplateFactoryBase<T> {\n  // \u043F\u043E\u0434\u0443\u043C\u0430\u0442\u044C \u043D\u0443\u0436\u043D\u043E \u043B\u0438 \u0434\u0435\u043B\u0430\u0442\u044C \u043E\u0434\u0438\u043D \u043E\u0431\u0449\u0438\u0439 \u0434\u043B\u044F \u0432\u0441\u0435 \u0441\u043F\u0438\u0441\u043E\u043A watchTree\n  public watchList: Array<string> = []\n  public watcher: FSWatcher = undefined\n  public override load(fileName: string, absPath?: boolean) {\n    let root\n    for (let i = 0, len = this.root.length; i < len; i++) {\n      root = this.root[i]\n      const fn = absPath\n        ? path.resolve(fileName)\n        : path.resolve(path.join(root, fileName))\n      const compiledJS = fn + '.js'\n      if (fs.existsSync(compiledJS)) {\n        let result\n        // always\n        try {\n          // try to resolve module\n          result = require(compiledJS)\n        } catch (error) {\n          // load as file\n          const storedScript = fs.readFileSync(compiledJS)\n          result = safeEval(storedScript.toString())\n        }\n        if (result instanceof Function) {\n          result = {\n            script: result,\n            compile: new Function(),\n          }\n        }\n        result.absPath = fn\n        result.name = fileName\n        result.factory = this\n        const templ = new Template<T>(result)\n        this.register(templ, fileName)\n        templ.compile()\n        return templ\n      } else if (fs.existsSync(fn)) {\n        const content = fs.readFileSync(fn)\n        const tpl = new Template({\n          source: content.toString(),\n          name: fileName,\n          absPath: fn,\n          factory: this,\n        })\n        let hasException = true\n        try {\n          tpl.compile()\n          hasException = false\n        } finally {\n          if (!hasException) {\n            return this.register(new Template(tpl), fileName)\n          }\n        }\n      }\n    }\n    throw new Error(`template ${fileName} not found (absPath= ${absPath} )`)\n  }\n\n  public override preload() {\n    let files = []\n    for (let i = 0, rLen = this.root.length; i < rLen; i++) {\n      for (let j = 0, eLen = this.ext.length; j < eLen; j++) {\n        files = files.concat(\n          glob.sync('*.' + this.ext[j], {\n            root: this.root[i],\n            cwd: this.root[i],\n            matchBase: true,\n          }),\n        )\n      }\n    }\n    for (let i = 0, len = files.length; i < len; i++) {\n      this.load(files[i])\n    }\n  }\n\n  public standalone(source: string) {\n    const tpl = new Template({\n      source: source,\n      factory: this,\n    })\n    return tpl.compile()\n  }\n\n  // \u0441\u043E\u0437\u0434\u0430\u0435\u0442 \u0448\u0430\u0431\u043B\u043E\u043D \u0438\u0437 \u0442\u0435\u043A\u0441\u0442\u0430\n  public create(source: string, name?: string) {\n    if (!name) {\n      name = 'freegenerated' + Math.random().toString() + '.js'\n    }\n    const tpl = this.standalone(source)\n    tpl.name = name\n    tpl.absPath = name\n    this.register(tpl)\n    return name\n  }\n\n  public override run<T extends Record<string, any>>(\n    context: HashType,\n    name: string,\n    absPath?: boolean,\n  ) {\n    const templ = this.ensure(name, absPath)\n\n    // const source = new SourceNode(0, 0, templ.absPath)\n    // context.directives.forEach((d) => {\n    //   source.add(\n    //     new SourceNode(d.line, d.column, `// ${d.content} -> ${d.name}`),\n    //   )\n    // })\n\n    // context.main.forEach((m) => {\n    //   source.add(new SourceNode(m.column, m.line, m.content))\n    // })\n    const bc = this.blockContent(templ, {})\n    const result = bc.run(\n      context,\n      bc.content,\n      bc.partial,\n      bc.slot,\n      this.options,\n    )\n    if (Object.keys(bc.slots).length > 0) {\n      if (Array.isArray(result)) {\n        return result.map((r) => {\n          const tpl = this.standalone(r.content)\n          const content = tpl.script(\n            bc.slots,\n            bc.content,\n            bc.partial,\n            bc.slot,\n            this.options,\n          )\n          return {\n            name: r.name,\n            content,\n          }\n        })\n      } else {\n        const res = this.standalone(result)\n        return res.script(\n          bc.slots,\n          bc.content,\n          bc.partial,\n          bc.slot,\n          this.options,\n        )\n      }\n    } else {\n      return result\n    }\n  }\n\n  public override runPartial<T extends Record<string, any>>({\n    context,\n    name,\n    absPath,\n    options,\n    slots,\n  }: {\n    context: HashType\n    name: string\n    absPath?: boolean\n    options?: T\n    slots?: SlotsHash\n  }): string {\n    const templ = this.ensure(name, absPath)\n    if (!templ.chunks) {\n      const bc = this.blockContent(templ, slots)\n      return bc.run(\n        context,\n        bc.content,\n        bc.partial,\n        bc.slot,\n        this.options,\n      ) as string\n    } else {\n      throw new Error(\"cant't use template with chunks as partial\")\n    }\n  }\n\n  public express() {\n    const self = this\n    return (fileName, context, callback) => {\n      const templ = self.ensure(fileName, true)\n      const bc = self.blockContent(templ)\n      let result, err\n      try {\n        result = bc.run(context, bc.content, bc.partial, bc.slot, this.options)\n      } catch (e) {\n        err = e\n      } finally {\n        callback(err, result)\n      }\n    }\n  }\n\n  public clearCache(template: TemplateBase<T>) {\n    delete this.cache[template.name]\n    delete this.cache[template.absPath]\n    template.alias.forEach((alias) => {\n      delete this.cache[alias]\n    })\n  }\n\n  public override ensure(fileName: string, absPath?: boolean): TemplateBase<T> {\n    const template = super.ensure(fileName, absPath)\n    if (this.watch) {\n      if (!this.watchList) this.watchList = []\n      if (!this.watcher) {\n        this.watcher = watch(this.watchList)\n\n        this.watcher.on('change', (fn: string) => {\n          const template = this.cache[fn]\n          this.clearCache(template)\n          this.ensure(template.absPath, true)\n          delete require.cache[fn]\n        })\n\n        this.watcher.on('unlink', (fn: string) => {\n          this.clearCache(this.cache[fn])\n          const index = this.watchList.indexOf(fn)\n          delete require.cache[fn]\n          const temp = [...this.watchList]\n          this.watcher.unwatch(temp)\n          this.watchList = this.watchList.splice(index, 1)\n          if (this.watchList.length > 0) {\n            this.watcher.add(temp)\n          }\n        })\n      }\n      if (this.watchList.indexOf(template.absPath) == -1) {\n        this.watchList.push(template.absPath)\n        this.watcher.add(template.absPath)\n      }\n    }\n    return template\n  }\n}\n", "import { HashType } from './interfaces'\n\nvar escapeExp = /[&<>\"]/,\n  escapeAmpExp = /&/g,\n  escapeLtExp = /</g,\n  escapeGtExp = />/g,\n  escapeQuotExp = /\"/g\n\nexport function escapeIt(text: string) {\n  if (text == null) {\n    return ''\n  }\n\n  var result = text.toString()\n  if (!escapeExp.test(result)) {\n    return result\n  }\n\n  return result\n    .replace(escapeAmpExp, '&amp;')\n    .replace(escapeLtExp, '&lt;')\n    .replace(escapeGtExp, '&gt;')\n    .replace(escapeQuotExp, '&quot;')\n}\n\nexport function applyDeindent(\n  str: string | Array<string>,\n  numChars: number | string,\n) {\n  if (!str) return str\n  let lines = Array.isArray(str) ? [...str] : str.split('\\n')\n  // \u043F\u043E \u043F\u0435\u0440\u0432\u043E\u0439 \u0441\u0442\u0440\u043E\u043A\u0435\n  if (typeof numChars == 'string') {\n    numChars = numChars.length\n  }\n\n  if (numChars != 0) {\n    let i = 0\n    do {\n      if (lines[i].trim().length !== 0) break\n      i += 1\n      if (i >= lines.length - 1) break\n    } while (true)\n    if (i < lines.length) {\n      numChars = lines[i].length - lines[i].trimStart().length\n    }\n  }\n  if (numChars > 0) {\n    for (let i = 0; i < lines.length; i++) {\n      let spaceCount = 0\n      for (let j = 0; j < lines[i].length; j++) {\n        if (lines[i][j] === ' ') {\n          spaceCount++\n        } else {\n          break\n        }\n      }\n      if (spaceCount > 0) {\n        if (spaceCount <= numChars) {\n          lines[i] = lines[i].trimStart()\n        } else {\n          lines[i] = lines[i].substring(numChars)\n        }\n      }\n    }\n  }\n  return Array.isArray(str) ? lines : lines.join('\\n')\n}\n\nexport function applyIndent(\n  srt: string | Array<string>,\n  _indent: number | string,\n) {\n  if (!srt) return srt\n  var indent = ''\n  if (typeof _indent == 'number' && _indent > 0) {\n    var res = ''\n    for (var i = 0; i < _indent; i++) {\n      res += ' '\n    }\n    indent = res\n  }\n  if (typeof _indent == 'string' && _indent.length > 0) {\n    indent = _indent\n  }\n  let lines = Array.isArray(srt) ? [...srt] : srt.split('\\n')\n  if (indent && lines) {\n    let res = lines.map((s) => indent + s)\n    return Array.isArray(srt) ? res : res.join('\\n')\n  } else {\n    return lines\n  }\n}\n\nexport function set(data: HashType, path: string, value: any) {\n  if ('object' === typeof data) {\n    const parts = path.split('.')\n    if (Array.isArray(parts)) {\n      const curr = parts.shift()\n      if (parts.length > 0) {\n        if (!data[curr]) {\n          if (isNaN(parseInt(parts[0], 10))) {\n            data[curr] = {}\n          } else {\n            data[curr] = []\n          }\n        }\n        set(data[curr], parts.join('.'), value)\n      } else {\n        data[path] = value\n      }\n    } else {\n      data[path] = value\n    }\n  }\n}\n\nexport function get(data: HashType, path: string) {\n  if ('object' === typeof data) {\n    if (data[path] === undefined) {\n      const parts = path.split('.')\n      if (Array.isArray(parts)) {\n        const curr = parts.shift()\n        if (parts.length > 0) {\n          return get(data[curr], parts.join('.'))\n        }\n        return data[curr]\n      }\n    }\n    return data[path]\n  }\n  return data\n}\n\nexport function merge(a: HashType, b: HashType, property: string) {\n  let prop\n  const aProp = a[property]\n  if (aProp !== undefined) {\n    let bProp = b[property]\n    if (bProp === undefined) {\n      bProp = b[property] = {}\n    }\n    const propList = Object.keys(aProp)\n    for (let i = 0, pLen = propList.length; i < pLen; i++) {\n      prop = propList[i]\n      if (!(prop in bProp)) {\n        bProp[prop] = aProp[prop]\n      }\n    }\n  }\n}\n", "import { merge } from './helpers'\nimport { TemplateFactoryBase } from './factory'\nimport {\n  BlocksHash,\n  HashTypeGeneric,\n  BlockRunFunction,\n  TemplateConfig,\n  DefaultFactoryOption,\n} from './interfaces'\n\nexport class TemplateBase<T extends DefaultFactoryOption> {\n  public parent: string\n  public blocks: BlocksHash<T>\n  public slots: BlocksHash<T>\n  public aliases: HashTypeGeneric<string>\n  public alias: Array<string>\n  public dependency: HashTypeGeneric<boolean>\n  public absPath: string\n  public name: string\n  public chunks: string\n  public srcCode: string\n  public script: BlockRunFunction<T>\n  public factory: TemplateFactoryBase<T>\n\n  constructor(config: TemplateConfig<T>) {\n    if (!(this instanceof TemplateBase)) {\n      throw new Error('constructor is not a function')\n    }\n    this.srcCode = config.source ? config.source.toString() : ''\n    this.name = config.name\n    this.absPath = config.absPath\n    this.script = config.script\n    this.blocks = config.blocks\n    this.slots = config.slots\n    this.dependency = config.dependency\n    this.parent = config.parent ? config.parent.trim() : ''\n    this.aliases = config.aliases || {}\n    this.alias = config.alias || [config.name]\n    this.factory = config.factory\n    if (config.compile) {\n      this.compile = config.compile\n    }\n  }\n\n  public mergeParent(src: TemplateBase<T>) {\n    if (src) {\n      merge(src, this, 'blocks')\n      merge(src, this, 'aliases')\n      merge(src, this, 'slots')\n    }\n  }\n\n  public compile() {\n    throw new Error('abstract method call')\n  }\n}\n", "import * as fs from 'fs'\nimport { compileLight as compileTemplate } from './compile'\n\nexport function safeEval(src: string) {\n  let retval\n  try {\n    retval = eval(src)\n  } catch (err) {\n    fs.writeFileSync('failed.js', src)\n    console.log('\\t \\x1b[34m' + err.message + '\\x1b[0m')\n    console.log(\"for mode debug information see 'failed.js' \")\n  }\n  return retval\n}\n\nexport function makeFunction(fnDef, name) {\n  let result: { err?: any; code?: any }\n  try {\n    const fname = name.replace(/[\\s,\\\\\\/\\.\\-]/g, '_')\n    result = safeEval(\n      'function ' +\n        fname +\n        ' (' +\n        fnDef.parameters +\n        '){\\n' +\n        fnDef.body +\n        '\\n}',\n    )\n  } catch (error) {\n    result = {\n      err: error,\n      code: fnDef.body,\n    }\n  } finally {\n    return result\n  }\n}\n\nexport function makeTemplate(src: string, optimize: boolean = true) {\n  let result\n  const compiled = compileTemplate(src, optimize)\n  try {\n    result = safeEval(compiled)\n  } catch (error) {\n    result = {\n      error: error,\n      code: src,\n    }\n  } finally {\n    return result\n  }\n}\n", "import detectIndent from 'detect-indent'\n\nexport type StateDefinition = {\n  start?: Array<string>\n  end?: Array<string>\n  skip?: {\n    start?: Array<string>\n    end?: Array<string>\n  }\n  states?: Array<ResultTypes>\n  curly?: 0 | 1 | 2\n  type?: { [key: string]: ResultTypes }\n}\n/**\n <% 'Scriptlet' tag, for control-flow, no output\n <%_ \u2018Whitespace Slurping\u2019 Scriptlet tag, strips all whitespace before it\n <%= Outputs the value into the template (HTML escaped)\n <%- Outputs the unescaped value into the template\n <%# Comment tag, no execution, no output\n\n <%% Outputs a literal '<%'\n %> Plain ending tag\n removes/cleans whitespases after\n -%> Trim-mode ('newline slurp') tag, trims following newline\n _%> \u2018Whitespace Slurping\u2019 ending tag, removes all whitespace after it\n */\nexport type ResultTypes =\n  | 'unknown'\n  | 'expression'\n  | 'uexpression'\n  | 'expression2'\n  | 'uexpression2'\n  | 'code'\n  | 'directive'\n  | 'comments'\n  | 'slotStart'\n  | 'blockStart'\n  | 'blockEnd'\n  | 'text'\n  | 'skip'\n  | 'empty'\n\nexport type SystemBlocksType =\n  | 'directive'\n  | 'comments'\n  | 'slotStart'\n  | 'blockStart'\n  | 'blockEnd'\n  | 'code'\n  | null\n\nconst globalStates: { [key: string]: StateDefinition } = {\n  /*\n  has chunks\n  has slots\n  has blocks\n  has ?? \u0432\u0441\u0435 \u0447\u0442\u043E \u0443\u0433\u043E\u0434\u043D\u043E \u043C\u043E\u0436\u043D\u043E \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C \u043F\u0440\u043E\u0441\u0442\u043E \u0430\u043D\u0430\u043B\u0438\u0437\u0438\u0440\u0443\u044F \u0441\u043E\u043E\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044E\u0449\u0438\u0439 \u043A\u043E\u043D\u0442\u0435\u043D\u0442, \u0438 \u0432\u044B\u0441\u0442\u0430\u0432\u043B\u044F\u0442\u044C \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u044F \u0432 \u0441\u043E\u043E\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044E\u0449\u0438\u0439 \u0431\u043B\u043E\u043A\n  \u0432 \u043D\u0435\u043A\u043E\u0442\u043E\u0440\u044B\u0445 \u0434\u0438\u0440\u0435\u043A\u0442\u0438\u0432\u0430\u0445 \u043D\u0435 \u0431\u0443\u0434\u0435\u0442 \u043D\u0443\u0436\u043D\u044B\n  \u043C\u043E\u0436\u043D\u043E \u0430\u0432\u0442\u043E\u043C\u0430\u0442\u0438\u0447\u0435\u0441\u043A\u0438 \u043E\u043F\u0440\u0435\u0434\u0435\u043B\u044F\u0442\u044C, \u043F\u0440\u043E\u0441\u0442\u043E \u0430\u043D\u0430\u043B\u0438\u0437\u0438\u0440\u0443\u044F \u0442\u0435\u043A\u0441\u0442\n  */\n  text: {\n    // \u043E\u0431\u0440\u0430\u0442\u043D\u044B\u0439 \u043F\u043E\u0440\u044F\u0434\u043E\u043A \u0434\u043B\u044F \u0443\u0441\u043A\u043E\u0440\u0435\u043D\u0438\u044F \u0446\u0438\u043A\u043B\u0430\n    states: [\n      'unknown',\n      'expression',\n      'uexpression',\n      'code',\n      'directive',\n      'slotStart',\n      'blockStart',\n      'blockEnd',\n      'comments',\n    ],\n  },\n  unknown: {\n    start: ['<%', '<%=', '<%-', '<%_', '<%#'],\n    end: ['%>', '-%>', '_%>'],\n    skip: {\n      start: ['<%%'],\n      end: ['%%>'],\n    },\n    type: {\n      '<%': 'code',\n      '<%=': 'uexpression',\n      '<%-': 'expression',\n      '<%#': 'comments',\n      '<%_': 'code',\n    },\n  },\n  expression: {\n    start: ['#{'],\n    end: ['}'],\n    curly: 1,\n  },\n  uexpression: {\n    start: ['!{'],\n    end: ['}'],\n    curly: 1,\n  },\n  code: {\n    start: ['<#', '<#-'],\n    end: ['#>', '-#>'],\n    skip: {\n      start: ['<#@', '<# block', '<# slot', '<# end #>', '<#{'],\n    },\n  },\n  directive: {\n    start: ['<#@'],\n    end: ['#>', '-#>'],\n  },\n  comments: {\n    start: ['<*'],\n    end: ['*>'],\n  },\n  blockStart: {\n    start: ['<# block', '<#- block'],\n    end: [': #>', ': -#>'],\n  },\n  slotStart: {\n    start: ['<# slot', '<#- slot'],\n    end: [': #>', ': -#>'],\n  },\n  blockEnd: {\n    start: ['<# end #>', '<#- end #>', '<# end -#>', '<#- end -#>'],\n  },\n}\nexport default globalStates\n\nexport interface ParserResult {\n  data: string\n  pos: number\n  line: number\n  column: number\n  type: ResultTypes\n  start?: string\n  end?: string\n  eol?: boolean\n}\n\nexport interface Items {\n  content?: string\n  indent?: string\n  pos: number\n  line: number\n  column: number\n  start: string\n  end: string\n  eol: boolean\n  type: ResultTypes\n}\n\nexport type RequireItem = {\n  name: string\n  alias: string\n}\n\nconst directives = [\n  'extend',\n  'context',\n  'alias',\n  'deindent',\n  'chunks',\n  'includeMainChunk',\n  'useHash',\n  'noContent',\n  'noSlots',\n  'noBlocks',\n  'noPartial',\n  'noOptions',\n  'promise',\n  'callback',\n  'requireAs',\n]\n\nfunction detectDirective(input: string) {\n  let name\n  let params\n  if (input) {\n    input = input.trim()\n    for (let i = 0; i < directives.length; i += 1) {\n      const directive = directives[i]\n      if (SUB(input.trim(), directive) == directive) {\n        name = directive\n        params = UNPARAM(input.slice(directive.length))\n        break\n      }\n    }\n  }\n  return {\n    name: name ? name : input,\n    params,\n  }\n}\n\nexport class CodeBlockDirectives {\n  extend: string\n  deindent: number | boolean\n  context: string = 'context'\n  alias: Array<string>\n  chunks: string\n  includeMainChunk: boolean\n  useHash: boolean\n  content: boolean = true\n  slots: boolean = true\n  blocks: boolean = true\n  partial: boolean = true\n  options: boolean = true\n  // return promise\n  promise: boolean\n  // return callback\n  callback: boolean\n  requireAs: Array<RequireItem> = []\n  push(init: ParserResult) {\n    const { name, params } = detectDirective(init.data.trim())\n    switch (name) {\n      case 'deindent':\n        this.deindent = params.length > 0 ? parseInt(params[0]) : true\n        break\n      case 'extend':\n        this.extend = params[0]\n        break\n      case 'context':\n        this.context = params[0]\n        break\n      case 'alias':\n        this.alias = params\n        break\n      case 'chunks':\n        this.chunks = params[0]\n        break\n      case 'includeMainChunk':\n        this.includeMainChunk = true\n        break\n      case 'useHash':\n        this.useHash = true\n        break\n      case 'noContent':\n        this.content = false\n        break\n      case 'noSlots':\n        this.slots = false\n        break\n      case 'noBlocks':\n        this.blocks = false\n        break\n      case 'noPartial':\n        this.partial = false\n        break\n      case 'noOptions':\n        this.options = false\n        break\n      case 'promise':\n        this.promise = true\n        break\n      case 'callback':\n        this.callback = true\n        break\n      case 'requireAs':\n        this.requireAs.push({ name: params[0], alias: params[1] })\n        break\n      default:\n      // console.log('unknown directive: ' + name)\n    }\n  }\n}\n\nexport class CodeBlock {\n  name?: string\n  main: Array<Items> = []\n  // \u0441\u0434\u0435\u043B\u0430\u0442\u044C \u0432\u0441\u0435 \u043D\u0435\u043E\u0431\u0445\u043E\u0434\u0438\u043C\u044B\u0435 \u043F\u0440\u043E\u0432\u0435\u0440\u043A\u0438 \u0434\u043B\u044F \u0431\u043E\u043B\u0435\u0435 \u0447\u0438\u0441\u0442\u043E\u0433\u043E \u043A\u043E\u0434\u0430\n  //\n  directives: CodeBlockDirectives = new CodeBlockDirectives()\n  documentation: Array<Items> = []\n  slots?: { [slot: string]: CodeBlock } = {}\n  blocks?: { [block: string]: CodeBlock } = {}\n  constructor(init?: ParserResult) {\n    if (init) {\n      this.name = UNQUOTE(init.data)\n    }\n  }\n  addBlock(block: CodeBlock) {\n    this.directives.blocks = true\n    this.blocks[block.name] = block\n  }\n  addSlot(slot: CodeBlock) {\n    this.directives.slots = true\n    this.blocks[slot.name] = slot\n  }\n}\n\nconst UNQUOTE = (str?: string) => {\n  if (str) {\n    let res = str.trim()\n    res = res.match(/['\"`]([^`'\"].*)[`'\"]/)?.[1] ?? res\n    return res\n  } else {\n    return ''\n  }\n}\n\nconst UNPARAM = (str?: string) => {\n  if (str) {\n    let res = str?.trim()\n    res = res.match(/\\(?([^\\)].*\\))/)?.[1] ?? res\n    return res.split(',').map(UNQUOTE)\n  } else {\n    return []\n  }\n}\n\nexport class Parser {\n  private buffer: string\n  private size: number\n  public INDENT: number\n  private static INITIAL_STATE: ResultTypes = 'text'\n  private static DEFAULT_TAB_SIZE = 2\n  private globalState: ResultTypes\n  private actualState?: ResultTypes\n  private globalToken: ParserResult\n  private pos: number = 0\n  private line: number = 1\n  private column: number = 1\n  private curlyAware: 0 | 1 | 2 = 0\n  private curlyBalance: Array<number> = []\n  private result: Array<ParserResult> = []\n  public static parse(\n    text: string | Buffer,\n    options: { indent?: string | number } = {},\n  ) {\n    const parser = new Parser(\n      typeof text == 'string' ? text : text.toString(),\n      options,\n    )\n    parser.parse()\n    return parser.process()\n  }\n  private constructor(value: string, options: { indent?: string | number }) {\n    if (options.indent) {\n      this.INDENT =\n        typeof options.indent === 'string'\n          ? options.indent.length\n          : options.indent\n    }\n    this.globalState = Parser.INITIAL_STATE\n    this.buffer = value.toString()\n    this.size = this.buffer.length\n  }\n\n  collect() {\n    const { term, eol } = this.SYMBOL()\n    if (eol) {\n      this.globalToken.eol = true\n      this.term()\n    } else {\n      this.globalToken.data += term\n    }\n  }\n\n  private run(currentState: ResultTypes) {\n    const init_pos = this.pos\n    const state = globalStates[currentState]\n    this.curlyAware = state.curly\n    if (state.start) {\n      if (state.skip?.start) {\n        for (let i = 0; i < state.skip.start.length; i += 1) {\n          if (this.SUB(state.skip.start[i]) == state.skip.start[i]) {\n            // process as string\n            return false\n          }\n        }\n      }\n      //has start\n      let foundStart = false\n      let foundEnd = false\n      for (let i = state.start.length - 1; i >= 0; i -= 1) {\n        const p = state.start[i]\n        const subs = this.SUB(p).toLowerCase()\n        if (subs == p) {\n          foundStart = true\n          this.globalState = currentState\n          this.actualState = state.type?.[p] ?? currentState\n          this.term({ start: p })\n          this.SKIP(p)\n          break\n        }\n      }\n      if (foundStart)\n        do {\n          if (state.end) {\n            let i\n            for (i = state.end.length - 1; i >= 0; i -= 1) {\n              const p = state.end[i]\n              if (state.curly == 1 && p.indexOf('}') > -1) {\n                if (this.curlyBalance.length > 0) {\n                  break\n                }\n              }\n              if (state.curly == 2 && p.indexOf('}}') > -1) {\n                if (this.curlyBalance.length > 0) {\n                  break\n                }\n              }\n              const subs = this.SUB(p).toLowerCase()\n              if (subs == p) {\n                this.SKIP(p)\n                foundEnd = true\n                break\n              }\n            }\n            if (!foundEnd) {\n              this.collect()\n            } else {\n              this.globalToken.end = state.end[i]\n              this.actualState = null\n            }\n          } else {\n            foundEnd = true\n          }\n        } while (!foundEnd && this.pos < this.size)\n    }\n\n    // has only states\n    else if (state.states) {\n      let found = false\n      for (let i = state.states.length - 1; i >= 0; i -= 1) {\n        const name = state.states[i]\n        found = this.run(name)\n        if (found) {\n          this.globalState = currentState\n          this.actualState = null\n          this.term()\n          break\n        }\n      }\n      if (!found) {\n        this.collect()\n      }\n    }\n    return init_pos != this.pos\n  }\n\n  private parse() {\n    if (this.size > 0) {\n      this.term()\n      do {\n        this.run(this.globalState)\n      } while (this.pos < this.size)\n      this.term()\n    }\n  }\n\n  private process() {\n    const content = new CodeBlock()\n\n    const resultSize = this.result.length\n    let curr = content\n    let state: SystemBlocksType = null\n    for (let i = 0; i < resultSize; i += 1) {\n      let r = this.result[i]\n      let { type, pos, line, column, start, end, data, eol } = r\n\n      const trimStartLines = (lines?: number) => {\n        let newLine = false\n        do {\n          if (curr.main.length > 0) {\n            let prev = curr.main[curr.main.length - 1]\n            if (\n              prev?.type == 'text' ||\n              (prev?.type == 'empty' && type === 'code')\n            ) {\n              prev.content = prev.content.trimEnd()\n              if (!prev.content) {\n                if (prev.eol) newLine = true\n                curr.main.pop()\n                if (lines) {\n                  lines -= 1\n                  if (!lines) {\n                    break\n                  }\n                }\n              } else {\n                prev.eol = false\n                break\n              }\n            } else {\n              if (newLine && prev.type === 'code') prev.eol = true\n              break\n            }\n          } else {\n            break\n          }\n        } while (true)\n      }\n      const trimEndLines = (lines?: number) => {\n        let nextline = 0\n        do {\n          nextline += 1\n          if (i + nextline < resultSize) {\n            let next = this.result[i + nextline]\n            if (next.type == 'text') {\n              next.data = next.data.trimStart()\n              if (!next.data) {\n                next.type = 'skip'\n                if (lines) {\n                  lines -= 1\n                  if (!lines) {\n                    break\n                  }\n                }\n              } else {\n                next.eol = false\n                break\n              }\n            } else {\n              break\n            }\n          } else {\n            break\n          }\n        } while (true)\n      }\n      const trimStartSpases = () => {\n        if (curr.main.length > 0) {\n          let prev = curr.main[curr.main.length - 1]\n          if (prev.type == 'text') {\n            prev.content = prev.content.replaceAll(' ', '')\n            if (!prev.content) {\n              curr.main.pop()\n            }\n          }\n        }\n      }\n\n      const trimEndSpaces = () => {\n        if (i + 1 < resultSize) {\n          let next = this.result[i + 1]\n          if (next.type == 'text') {\n            next.data = next.data.replaceAll(' ', '')\n            if (!next.data) {\n              next.type = 'skip'\n            }\n          }\n        }\n      }\n\n      if (curr.main.length > 0) {\n        let prev = curr.main[curr.main.length - 1]\n        if (prev.line != line) {\n          curr.main[curr.main.length - 1].eol = true\n        } else {\n          curr.main[curr.main.length - 1].eol = false\n        }\n      }\n      switch (type) {\n        case 'directive':\n          state = 'directive'\n          trimStartLines()\n          trimEndLines()\n          curr.directives.push(r)\n          break\n        case 'blockStart':\n          state = 'blockStart'\n          trimStartLines()\n          trimEndLines()\n          curr = new CodeBlock(r)\n          content.addBlock(curr)\n          break\n        case 'slotStart':\n          state = 'slotStart'\n          trimStartLines()\n          trimEndLines()\n          curr = new CodeBlock(r)\n          content.addSlot(curr)\n          break\n        case 'blockEnd':\n          state = 'blockEnd'\n          trimStartLines()\n          curr = content\n          trimEndLines()\n          break\n        case 'unknown':\n          /**\n            <% 'Scriptlet' tag, for control-flow, no output\n            <%_ \u2018Whitespace Slurping\u2019 Scriptlet tag, strips all whitespace before it\n            <%= Outputs the value into the template (HTML escaped)\n            <%- Outputs the unescaped value into the template\n             */\n          let actual_type: ResultTypes\n          switch (r.start) {\n            case '<%':\n              actual_type = 'code'\n              break\n            case '<%_':\n              actual_type = 'code'\n              trimStartSpases()\n              break\n            case '<%-':\n              actual_type = 'expression'\n              break\n            case '<%=':\n              actual_type = 'uexpression'\n              break\n            case '<%#':\n              actual_type = 'comments'\n              break\n          }\n          switch (r.end) {\n            case '-%>':\n              trimEndLines(1)\n              break\n            case '_%>':\n              trimEndSpaces()\n              break\n          }\n          // if (data) {\n          if (actual_type !== 'comments') {\n            curr.main.push({\n              content: data,\n              pos,\n              line,\n              column,\n              start,\n              end,\n              type: actual_type,\n              eol,\n            })\n          } else {\n            curr.documentation.push({\n              content: data,\n              pos,\n              line,\n              column,\n              start,\n              end,\n              type: actual_type,\n              eol,\n            })\n          }\n          // }\n          break\n        case 'code':\n          if (start == '<#-') {\n            trimStartLines()\n          }\n          if (end == '-#>') {\n            trimEndLines()\n          }\n          // if (data) {\n          state = 'code'\n          curr.main.push({\n            content: data,\n            pos,\n            line,\n            column,\n            start,\n            end,\n            type,\n            eol,\n          })\n          // }\n          break\n        case 'expression':\n        case 'expression2':\n          // if (data)\n          {\n            const current: Items = {\n              content: data,\n              pos,\n              line,\n              column,\n              start,\n              end,\n              type: 'expression',\n              eol,\n            }\n\n            const prev = curr.main.pop()\n            if (\n              prev?.type !== 'text' ||\n              (prev?.type === 'text' && prev?.content.trim().length > 0) ||\n              (prev?.type === 'text' && prev?.eol)\n            ) {\n              curr.main.push(prev)\n            } else {\n              current.indent = prev.content\n            }\n\n            curr.main.push(current)\n          }\n          break\n        case 'uexpression':\n        case 'uexpression2':\n          // if (data) {\n          const current: Items = {\n            content: data,\n            pos,\n            line,\n            column,\n            start,\n            end,\n            type: 'uexpression',\n            eol,\n          }\n\n          const prev = curr.main.pop()\n          if (prev?.type !== 'text' || (prev?.type === 'text' && prev?.eol)) {\n            curr.main.push(prev)\n          } else {\n            current.indent = prev.content\n          }\n\n          curr.main.push(current)\n          // }\n          break\n        case 'text': {\n          state = null\n          let actualType: ResultTypes = data || eol ? type : 'empty'\n          curr.main.push({\n            content: data,\n            pos,\n            line,\n            column,\n            start,\n            end,\n            type: actualType,\n            eol,\n          })\n          break\n        }\n        case 'comments':\n          trimStartLines()\n          trimEndLines()\n          // if (data) {\n          curr.documentation.push({\n            content: data,\n            pos,\n            line,\n            column,\n            start,\n            end,\n            type,\n            eol,\n          })\n          // }\n          break\n      }\n    }\n    return content\n  }\n\n  private SYMBOL() {\n    const res = this.buffer[this.pos]\n    if (this.curlyAware == 1) {\n      if (~res.indexOf('{')) {\n        this.curlyBalance.push(this.pos)\n      } else if (~res.indexOf('}')) {\n        this.curlyBalance.pop()\n      }\n    }\n    if (this.curlyAware == 2) {\n      if (~res.indexOf('{{')) {\n        this.curlyBalance.push(this.pos)\n      } else if (~res.indexOf('}}')) {\n        this.curlyBalance.pop()\n      }\n    }\n    // can return more than one char as autoocorrection of endof lines\n    return this.SKIP(res)\n  }\n  private DETECT_INDENT() {\n    const { buffer } = this\n    const indent = detectIndent(buffer).indent\n    if (~indent.indexOf('\\t')) {\n      this.INDENT = Parser.DEFAULT_TAB_SIZE\n    } else {\n      this.INDENT = indent.length\n    }\n  }\n  private SKIP(term: string) {\n    const { INDENT } = this\n    let eol = false\n    if (term.length == 1) {\n      if (\n        term == '\\n' ||\n        term == '\\r' ||\n        term == '\\u2028' ||\n        term == '\\u2029'\n      ) {\n        if (term == '\\r' && this.SUB('\\r\\n') == '\\r\\n') {\n          term = '\\r\\n'\n        }\n        this.column = 1\n        this.line += 1\n        eol = true\n      } else if (term == '\\t') {\n        if (!INDENT) this.DETECT_INDENT()\n        this.column += this.INDENT\n      } else {\n        this.column += 1\n      }\n      this.pos += term.length\n    } else {\n      // \u043A\u0430\u0436\u0434\u043E\u0435 \u0432\u0445\u043E\u0436\u0434\u0435\u043D\u0438\u0435 \u043D\u0443\u0436\u043D\u043E \u0440\u0430\u0437\u043E\u0431\u0440\u0430\u0442\u044C\n      // \u0438\u043C\u0438\u0442\u0438\u0440\u0443\u0435\u043C \u043F\u043E\u0441\u0438\u043C\u0432\u043E\u043B\u044C\u043D\u0443\u044E \u043F\u0435\u0440\u0435\u0434\u0430\u0447\u0443\n      const startPos = this.pos\n      let nTerm = ''\n      do {\n        // \u043C\u043E\u0436\u0435\u0442 \u043F\u0435\u0440\u0435\u0445\u043E\u0434\u0438\u0442\u044C \u0431\u043E\u043B\u044C\u0448\u0435 \u0447\u0435\u043C \u043D\u0430 1 \u0441\u0438\u043C\u0432\u043E\u043B\n        nTerm += this.SKIP(this.buffer[this.pos])\n      } while (this.pos < startPos + term.length)\n      term = nTerm\n    }\n\n    return { term, eol }\n  }\n  private block(extra: Partial<ParserResult> = {}): ParserResult {\n    const { pos, line, column, globalState, actualState } = this\n    return {\n      data: '',\n      pos,\n      line,\n      column,\n      type: actualState || globalState,\n      ...extra,\n    }\n  }\n  private SUB(str) {\n    const { pos, size, buffer } = this\n    return SUB(buffer, str, pos, size)\n  }\n  private term(extra = {}) {\n    this.globalToken = this.block(extra)\n    this.result.push(this.globalToken)\n  }\n}\n\nfunction SUB(buffer: string, str: string, pos: number = 0, size: number = 0) {\n  if (!size) {\n    size = buffer.length\n  }\n  const len = str.length\n  const from = pos\n  const to = pos + len\n  if (to <= size) {\n    let res = ''\n    for (let i = from; i < to; i += 1) {\n      res += buffer[i]\n    }\n    return res\n  } else {\n    return ''\n  }\n}\n", "import { Parser } from '../parser/parse'\nimport * as esbuild from 'esbuild'\n\nfunction prepareCode(text) {\n  // return text\n  const result = esbuild.transformSync(text, {\n    minify: false,\n    // treeShaking: true,\n    // minifySyntax: true,\n  })\n  return result.code\n}\n\nimport templates from '../templates'\nimport { TemplateFactoryStandalone } from '../standalone/factory'\n\nexport const F = new TemplateFactoryStandalone(templates)\n\nexport function run(context: any, template: keyof typeof templates) {\n  return F.run(context, template)\n}\n\nexport function compileLight(content: Buffer | string, optimize: boolean) {\n  const compiled = Parser.parse(content.toString())\n  const text = run(compiled, 'raw.njs')\n  return optimize ? prepareCode(text) : (text as string)\n}\n\nexport function compileFull(content: Buffer | string, optimize: boolean) {\n  const compiled = Parser.parse(content.toString())\n  const text = run(compiled, 'compiled.njs')\n  return optimize ? prepareCode(text) : (text as string)\n}\n\nexport function compileTs(content: Buffer | string, optimize: boolean) {\n  const compiled = Parser.parse(content.toString())\n  const text = run(compiled, 'es6module.njs')\n  return optimize ? prepareCode(text) : (text as string)\n}\n\nexport function parseFile(content: Buffer | string) {\n  return Parser.parse(content.toString())\n}\n", "export default {\n  alias: [\"codeblock.njs\"],\n  script: function(blockList, _content, partial, slot, options) {\n    var out = [];\n    var textQuote = false;\n    do {\n      const cur = blockList.shift();\n      if (cur.type !== \"empty\" || cur.type === \"text\" && cur.content.trim()) {\n        blockList.unshift(cur);\n        break;\n      }\n      if (blockList.length == 0)\n        break;\n    } while (true);\n    do {\n      const cur = blockList.pop();\n      if (cur.type !== \"empty\" || cur.type === \"text\" && cur.content.trim()) {\n        blockList.push(cur);\n        break;\n      }\n      if (blockList.length == 0)\n        break;\n    } while (true);\n    blockList[blockList.length - 1].eol = false;\n    for (var i = 0, len = blockList.length; i < len; i++) {\n      var last = i === blockList.length - 1;\n      var block = blockList[i];\n      var next = i + 1 < len ? blockList[i + 1] : null;\n      var cont = block?.content;\n      switch (block.type) {\n        case \"text\":\n          {\n            let res = \"\";\n            if (!textQuote) {\n              textQuote = true;\n              res = \"out.push(\";\n            } else {\n              let lasItem = out.pop();\n              res = lasItem + \" + \";\n            }\n            if (!block.eol) {\n              res += JSON.stringify(cont);\n            } else {\n              res += JSON.stringify(cont + \"\\n\");\n              res += \");\" + (last ? \"\" : \"\\n\");\n              textQuote = false;\n            }\n            out.push(res);\n          }\n          break;\n        case \"uexpression\":\n          {\n            let res = \"\";\n            if (!textQuote) {\n              textQuote = true;\n              res = \"out.push(\";\n            } else {\n              let lasItem = out.pop();\n              res = lasItem + \" + \";\n            }\n            let lcont = \"options.escapeIt(\" + cont + \")\";\n            if (block.indent) {\n              lcont = \"options.applyIndent(\" + lcont + \", '\" + block.indent + \"')\";\n            }\n            if (block.start && block.end) {\n              res += \"(\" + lcont + \")\";\n            } else if (block.start) {\n              res += \"(\" + lcont;\n            } else if (block.end) {\n              res += lcont + \")\";\n            } else {\n              res += lcont;\n            }\n            if (!block.eol) {\n              out.push(res);\n            } else {\n              out.push(res + \");\" + (last ? \"\" : \"\\n\"));\n              textQuote = false;\n            }\n          }\n          break;\n        case \"expression\":\n          {\n            let res = \"\";\n            if (!textQuote) {\n              textQuote = true;\n              res = \"out.push(\";\n            } else {\n              if (block.start) {\n                let lasItem = out.pop();\n                res = lasItem + \" + \";\n              }\n            }\n            if (block.indent) {\n              cont = \"options.applyIndent(\" + cont + \", '\" + block.indent + \"')\";\n            }\n            if (block.start && block.end) {\n              res += \"(\" + cont + \")\";\n            } else if (block.start) {\n              res += \"(\" + cont;\n            } else if (block.end) {\n              res += cont + \")\";\n            } else {\n              res += cont;\n            }\n            if (!block.eol) {\n              out.push(res);\n            } else {\n              out.push(res + \");\" + (last ? \"\" : \"\\n\"));\n              textQuote = false;\n            }\n          }\n          break;\n        case \"code\":\n          if (textQuote) {\n            let item = out.pop();\n            out.push(item + \");\\n\");\n            textQuote = false;\n          }\n          out.push(cont + (block.eol || next?.type != \"code\" ? \"\\n\" : \"\"));\n          break;\n      }\n    }\n    if (textQuote) {\n      let lasItem = out.pop();\n      out.push(lasItem + \");\");\n    }\n    return out.join(\"\");\n  },\n  compile: function() {\n    this.alias = [\"codeblock.njs\"];\n  },\n  dependency: {}\n};\n", "export default {\n  alias: [\"compilationError.njs\"],\n  script: function(context, _content, partial, slot, options) {\n    var out = [];\n    out.push(context.error.message + \";\\n\");\n    out.push(context.compiledFile + \";\");\n    return out.join(\"\");\n  },\n  compile: function() {\n    this.alias = [\"compilationError.njs\"];\n  },\n  dependency: {}\n};\n", "export default {\n  alias: [\"compiled.njs\"],\n  script: function(context, _content, partial, slot, options) {\n    var out = [];\n    out.push(\"module.exports = \" + partial(context, \"core\") + \";\");\n    return out.join(\"\");\n  },\n  compile: function() {\n    this.alias = [\"compiled.njs\"];\n    this.aliases = {};\n    this.aliases[\"core\"] = \"MainTemplate.njs\";\n    this.factory.ensure(\"MainTemplate.njs\");\n  },\n  dependency: {\n    \"MainTemplate.njs\": true,\n    \"core\": true\n  }\n};\n", "export default {\n  alias: [\"es6module.njs\"],\n  script: function(context, _content, partial, slot, options) {\n    var out = [];\n    out.push(\"export default \" + partial(context, \"core\") + \";\");\n    return out.join(\"\");\n  },\n  compile: function() {\n    this.alias = [\"es6module.njs\"];\n    this.aliases = {};\n    this.aliases[\"core\"] = \"MainTemplate.njs\";\n    this.factory.ensure(\"MainTemplate.njs\");\n  },\n  dependency: {\n    \"MainTemplate.njs\": true,\n    \"core\": true\n  }\n};\n", "export default {\n  alias: [\"MainTemplate.njs\"],\n  script: function(context, _content, partial, slot, options) {\n    function content(blockName, ctx) {\n      if (ctx === void 0 || ctx === null)\n        ctx = context;\n      return _content(blockName, ctx, content, partial, slot);\n    }\n    var out = [];\n    const { directives } = context;\n    out.push(\"{\");\n    if (directives.chunks) {\n      out.push(\"\\n\");\n      out.push(\"chunks: \" + JSON.stringify(directives.chunks) + \",\");\n    }\n    if (directives.alias) {\n      out.push(\"\\n\");\n      out.push(\"alias: \" + JSON.stringify(directives.alias) + \",\");\n    }\n    out.push(\"\\n\");\n    out.push(\"\\n\");\n    out.push(\"script: function (\" + directives.context + \", _content, partial, slot, options){\\n\");\n    out.push(options.applyIndent(content(\"maincontent\", directives), \"    \") + \"\\n\");\n    out.push(\"    var out = []\\n\");\n    out.push(options.applyIndent(content(\"chunks-start\", directives), \"    \") + \"\\n\");\n    out.push(options.applyIndent(partial(context.main, \"codeblock\"), \"    \") + \"\\n\");\n    out.push(options.applyIndent(content(\"chunks-finish\", directives), \"    \"));\n    if (directives.chunks) {\n      out.push(\"\\n\");\n      out.push(\"    if(out.some(t=>typeof t == 'object')){\\n\");\n      out.push(\"      return out.map(chunk=>(\\n\");\n      out.push(\"          {...chunk,\\n\");\n      out.push(\"            content:\");\n      if (directives.deindent) {\n        out.push(\" options.applyDeindent(\");\n      }\n      out.push(\"\\n\");\n      out.push(\"            Array.isArray(chunk.content)\\n\");\n      out.push(\"              ? chunk.content.join('')\\n\");\n      out.push(\"              : chunk.content\");\n      if (directives.deindent) {\n        out.push(\")\");\n      }\n      out.push(\"\\n\");\n      out.push(\"          }\\n\");\n      out.push(\"        )\\n\");\n      out.push(\"      )\\n\");\n      out.push(\"    } else {\\n\");\n      out.push(\"      return \");\n      if (directives.deindent) {\n        out.push(\" options.applyDeindent(\");\n      }\n      out.push(\"out\");\n      if (directives.deindent) {\n        out.push(\")\");\n      }\n      out.push(\".join('')\\n\");\n      out.push(\"    }\");\n    } else {\n      out.push(\"\\n\");\n      out.push(\"      return \");\n      if (directives.deindent) {\n        out.push(\" options.applyDeindent(\");\n      }\n      out.push(\"out\");\n      if (directives.deindent) {\n        out.push(\")\");\n      }\n      out.push(\".join('')\");\n    }\n    out.push(\"\\n\");\n    out.push(\"  },\");\n    const blockNames = Object.keys(context.blocks);\n    if (blockNames.length > 0) {\n      out.push(\"\\n\");\n      out.push(\"  blocks : {\");\n      for (let i2 = 0; i2 < blockNames.length; i2 += 1) {\n        const block = context.blocks[blockNames[i2]];\n        out.push(\"\\n\");\n        out.push('    \"' + blockNames[i2] + '\": function(' + block.directives.context + \",  _content, partial, slot, options) {\\n\");\n        out.push(options.applyIndent(content(\"maincontent\", block.directives), \"      \") + \"\\n\");\n        out.push(\"      var out = []\\n\");\n        out.push(options.applyIndent(partial(block.main, \"codeblock\"), \"      \"));\n        if (directives.chunks) {\n          out.push(\"\\n\");\n          out.push(\"      if(out.some(t=>typeof t == 'object')){\\n\");\n          out.push(\"        return out.map(chunk=>(\\n\");\n          out.push(\"            {...chunk,\\n\");\n          out.push(\"              content:\");\n          if (directives.deindent) {\n            out.push(\" options.applyDeindent(\");\n          }\n          out.push(\"\\n\");\n          out.push(\"              Array.isArray(chunk.content)\\n\");\n          out.push(\"                ? chunk.content.join('')\\n\");\n          out.push(\"                : chunk.content\");\n          if (directives.deindent) {\n            out.push(\")\");\n          }\n          out.push(\"\\n\");\n          out.push(\"            }\\n\");\n          out.push(\"          )\\n\");\n          out.push(\"        )\\n\");\n          out.push(\"      } else {\\n\");\n          out.push(\"        return \");\n          if (directives.deindent) {\n            out.push(\" options.applyDeindent(\");\n          }\n          out.push(\"out\");\n          if (directives.deindent) {\n            out.push(\")\");\n          }\n          out.push(\".join('')\\n\");\n          out.push(\"      }\");\n        } else {\n          out.push(\"\\n\");\n          out.push(\"        return \");\n          if (directives.deindent) {\n            out.push(\" options.applyDeindent(\");\n          }\n          out.push(\"out\");\n          if (directives.deindent) {\n            out.push(\")\");\n          }\n          out.push(\".join('')\");\n        }\n        out.push(\"\\n\");\n        out.push(\"    },\");\n      }\n      out.push(\"\\n\");\n      out.push(\"  },\");\n    }\n    const slotNames = Object.keys(context.slots);\n    if (slotNames.length > 0) {\n      out.push(\"\\n\");\n      out.push(\"  slots : {\");\n      for (let i2 = 0; i2 < slotNames.length; i2 += 1) {\n        const slot2 = context.blocks[slotNames[i2]];\n        out.push(\"\\n\");\n        out.push('    \"' + slotNames[i2] + '\": function(' + slot2.directives.context + \",  _content, partial, slot, options){\\n\");\n        out.push(options.applyIndent(content(\"maincontent\", slot2.directives), \"      \") + \"\\n\");\n        out.push(\"      var out = []\\n\");\n        out.push(options.applyIndent(partial(slot2.main, \"codeblock\"), \"      \"));\n        if (directives.chunks) {\n          out.push(\"\\n\");\n          out.push(\"      if(out.some(t=>typeof t == 'object')){\\n\");\n          out.push(\"        return out.map(chunk=>(\\n\");\n          out.push(\"            {...chunk,\\n\");\n          out.push(\"              content:\");\n          if (directives.deindent) {\n            out.push(\" options.applyDeindent(\");\n          }\n          out.push(\"\\n\");\n          out.push(\"              Array.isArray(chunk.content)\\n\");\n          out.push(\"                ? chunk.content.join('')\\n\");\n          out.push(\"                : chunk.content\");\n          if (directives.deindent) {\n            out.push(\")\");\n          }\n          out.push(\"\\n\");\n          out.push(\"            }\\n\");\n          out.push(\"          )\\n\");\n          out.push(\"        )\\n\");\n          out.push(\"      } else {\\n\");\n          out.push(\"        return \");\n          if (directives.deindent) {\n            out.push(\" options.applyDeindent(\");\n          }\n          out.push(\"out\");\n          if (directives.deindent) {\n            out.push(\")\");\n          }\n          out.push(\".join('')\\n\");\n          out.push(\"      }\");\n        } else {\n          out.push(\"\\n\");\n          out.push(\"        return \");\n          if (directives.deindent) {\n            out.push(\" options.applyDeindent(\");\n          }\n          out.push(\"out\");\n          if (directives.deindent) {\n            out.push(\")\");\n          }\n          out.push(\".join('')\");\n        }\n        out.push(\"\\n\");\n        out.push(\"    },\");\n      }\n      out.push(\"\\n\");\n      out.push(\"  },\");\n    }\n    out.push(\"\\n\");\n    out.push(\"  compile: function() {\");\n    if (directives.alias) {\n      out.push(\"\\n\");\n      out.push(\"    this.alias = \" + JSON.stringify(directives.alias));\n    }\n    if (directives.requireAs.length > 0) {\n      out.push(\"\\n\");\n      out.push(\"    this.aliases={}\");\n      var rq;\n      for (var i = 0, len = directives.requireAs.length; i < len; i++) {\n        rq = directives.requireAs[i];\n        out.push(\"\\n\");\n        out.push('    this.aliases[\"' + rq.alias + '\"] = \"' + rq.name + '\"\\n');\n        out.push('    this.factory.ensure(\"' + rq.name + '\")');\n      }\n    }\n    if (directives.extend) {\n      out.push(\"\\n\");\n      out.push(\"    this.parent = \" + JSON.stringify(directives.extend) + \"\\n\");\n      out.push(\"    this.mergeParent(this.factory.ensure(this.parent))\");\n    }\n    out.push(\"\\n\");\n    out.push(\"  },\\n\");\n    out.push(\"  dependency: {\");\n    if (directives.extend) {\n      out.push(\"\\n\");\n      out.push(options.applyIndent(JSON.stringify(directives.extend), \"    \") + \": true,\");\n    }\n    if (directives.requireAs.length > 0) {\n      for (var i = 0, len = directives.requireAs.length; i < len; i++) {\n        rq = directives.requireAs[i];\n        out.push(\"\\n\");\n        out.push('    \"' + rq.name + '\": true,\\n');\n        out.push('    \"' + rq.alias + '\": true,');\n      }\n    }\n    out.push(\"\\n\");\n    out.push(\"  }\\n\");\n    out.push(\"}\");\n    return out.join(\"\");\n  },\n  blocks: {\n    \"maincontent\": function(directives, _content, partial, slot, options) {\n      var out = [];\n      if (directives?.content) {\n        out.push(\"function content(blockName, ctx) {\\n\");\n        out.push(\"  if(ctx === undefined || ctx === null) ctx = \" + directives.context + \"\\n\");\n        out.push(\"  return _content(blockName, ctx, content, partial, slot)\\n\");\n        out.push(\"}\");\n      }\n      out.push(\"\");\n      return out.join(\"\");\n    },\n    \"chunks-start\": function(directives, _content, partial, slot, options) {\n      var out = [];\n      if (directives.chunks) {\n        out.push(\"\\n\");\n        out.push(\"const _partial = partial\\n\");\n        out.push(\"partial = function(obj, template) {\\n\");\n        out.push(\"  const result = _partial(obj, template)\\n\");\n        out.push(\"  if(Array.isArray(result)){\\n\");\n        out.push(\"    result.forEach(r => {\\n\");\n        out.push(\"      chunkEnsure(r.name, r.content)\\n\");\n        out.push(\"    })\\n\");\n        out.push(\"    return ''\\n\");\n        out.push(\"  } else {\\n\");\n        out.push(\"    return result\\n\");\n        out.push(\"  }\\n\");\n        out.push(\"}\\n\");\n        out.push(\"const main = '\" + directives.chunks + \"'\\n\");\n        out.push(\"var current = main\\n\");\n        out.push(\"let outStack = [current]\\n\");\n        out.push(\"let result\\n\");\n        out.push(\"\\n\");\n        out.push(\"function chunkEnsure(name, content) {\\n\");\n        out.push(\"  if (!result) {\\n\");\n        out.push(\"    result = {}\\n\");\n        out.push(\"  }\\n\");\n        out.push(\"  if (!result.hasOwnProperty(name)) {\\n\");\n        out.push(\"    result[name] = content ? content : []\\n\");\n        out.push(\"  }\\n\");\n        out.push(\"}\\n\");\n        out.push(\"function chunkStart(name) {\\n\");\n        out.push(\"  chunkEnsure(name)\\n\");\n        out.push(\"  chunkEnd()\\n\");\n        out.push(\"  current = name\\n\");\n        out.push(\"  out = []\\n\");\n        out.push(\"}\\n\");\n        out.push(\"function chunkEnd() {\\n\");\n        out.push(\"  result[current].push(...out)\\n\");\n        out.push(\"  out = []\\n\");\n        out.push(\"  current = outStack.pop() || main\\n\");\n        out.push(\"}\\n\");\n        out.push(\"chunkStart(main)\");\n      }\n      out.push(\"\");\n      return out.join(\"\");\n    },\n    \"chunks-finish\": function(directives, _content, partial, slot, options) {\n      var out = [];\n      if (directives.chunks) {\n        out.push(\"\\n\");\n        out.push(\"    chunkEnd()\");\n        if (!directives.useHash) {\n          out.push(\"\\n\");\n          out.push(\"    out = Object.keys(result)\");\n          if (!directives.includeMainChunk) {\n            out.push(\"\\n\");\n            out.push(\"      .filter(i => i !== '\" + directives.chunks + \"')\");\n          }\n          out.push(\"\\n\");\n          out.push(\"      .map(curr => ({ name: curr, content: result[curr] }))\");\n        } else {\n          out.push(\"\\n\");\n          out.push(\"    out = result\");\n          if (!directives.includeMainChunk) {\n            out.push(\"\\n\");\n            out.push(\"    delete out['\" + directives.chunks + \"']\");\n          }\n        }\n      }\n      out.push(\"\");\n      return out.join(\"\");\n    }\n  },\n  compile: function() {\n    this.alias = [\"MainTemplate.njs\"];\n    this.aliases = {};\n    this.aliases[\"codeblock\"] = \"codeblock.njs\";\n    this.factory.ensure(\"codeblock.njs\");\n  },\n  dependency: {\n    \"codeblock.njs\": true,\n    \"codeblock\": true\n  }\n};\n", "export default {\n  alias: [\"raw.njs\"],\n  script: function(context, _content, partial, slot, options) {\n    var out = [];\n    out.push(\"(function(){\\n\");\n    out.push(\"  return \" + partial(context, \"core\") + \";\\n\");\n    out.push(\"})();\");\n    return out.join(\"\");\n  },\n  compile: function() {\n    this.alias = [\"raw.njs\"];\n    this.aliases = {};\n    this.aliases[\"core\"] = \"MainTemplate.njs\";\n    this.factory.ensure(\"MainTemplate.njs\");\n  },\n  dependency: {\n    \"MainTemplate.njs\": true,\n    \"core\": true\n  }\n};\n", "export default {\n  alias: [\"singlefile.es6.njs\"],\n  script: function(files, _content, partial, slot, options) {\n    var out = [];\n    out.push(\"import { Factory } from 'fte.js/lib/standalone.fte.js'\\n\");\n    out.push(\"\\n\");\n    out.push(\"export const templates = {\");\n    files.forEach((file) => {\n      out.push(\"\\n\");\n      out.push(\"  ['\" + (file.template.alias || file.name) + \"']: \" + partial(file.template, \"core\") + \",\");\n    });\n    out.push(\"\\n\");\n    out.push(\"}\\n\");\n    out.push(\"\\n\");\n    out.push(\"const F = new Factory(templates)\\n\");\n    out.push(\"\\n\");\n    out.push(\"export function run (context, name) {\\n\");\n    out.push(\"  return F.run(context, name)\\n\");\n    out.push(\"}\\n\");\n    out.push(\"\");\n    return out.join(\"\");\n  },\n  compile: function() {\n    this.alias = [\"singlefile.es6.njs\"];\n    this.aliases = {};\n    this.aliases[\"core\"] = \"MainTemplate.njs\";\n    this.factory.ensure(\"MainTemplate.njs\");\n  },\n  dependency: {\n    \"MainTemplate.njs\": true,\n    \"core\": true\n  }\n};\n", "export default {\n  alias: [\"singlefile.njs\"],\n  script: function(files, _content, partial, slot, options) {\n    var out = [];\n    out.push(\"const { Factory } = require('fte.js/lib/standalone.fte.js')\\n\");\n    out.push(\"\\n\");\n    out.push(\"const templates = {\");\n    files.forEach((file) => {\n      out.push(\"\\n\");\n      out.push(\"  ['\" + (file.template.alias || file.name) + \"']: \" + partial(file.template, \"core\") + \",\");\n    });\n    out.push(\"\\n\");\n    out.push(\"}\\n\");\n    out.push(\"\\n\");\n    out.push(\"exports.templates = templates\\n\");\n    out.push(\"const F = new Factory(templates)\\n\");\n    out.push(\"\\n\");\n    out.push(\"function run(context, name){\\n\");\n    out.push(\"  return F.run( context, name )\\n\");\n    out.push(\"}\\n\");\n    out.push(\"\\n\");\n    out.push(\"exports.run = run\");\n    return out.join(\"\");\n  },\n  compile: function() {\n    this.alias = [\"singlefile.njs\"];\n    this.aliases = {};\n    this.aliases[\"core\"] = \"MainTemplate.njs\";\n    this.factory.ensure(\"MainTemplate.njs\");\n  },\n  dependency: {\n    \"MainTemplate.njs\": true,\n    \"core\": true\n  }\n};\n", "export default {\n  alias: [\"standalone.es6.njs\"],\n  script: function(files, _content, partial, slot, options) {\n    var out = [];\n    out.push(\"import { Factory } from 'fte.js/lib/standalone.fte.js'\");\n    for (let i = 0; i < files.length; i += 1) {\n      out.push(\"\\n\");\n      out.push(\"  import \" + files[i].name.replaceAll(/[\\s\\.]/g, \"_\") + \" from '\" + files[i].path + \"'\");\n    }\n    out.push(\"\\n\");\n    out.push(\"\\n\");\n    out.push(\"const templates = {\");\n    for (let i = 0; i < files.length; i += 1) {\n      out.push(\"\\n\");\n      out.push(\"  '\" + files[i].name + \"': \" + files[i].name.replaceAll(/[\\s\\.]/g, \"_\") + \",\");\n    }\n    out.push(\"\\n\");\n    out.push(\"}\\n\");\n    out.push(\"\\n\");\n    out.push(\"const F = new Factory(templates)\\n\");\n    out.push(\"\\n\");\n    out.push(\"module.exports = (context, name) => {\\n\");\n    out.push(\"  return F.run( context, name )\\n\");\n    out.push(\"}\");\n    return out.join(\"\");\n  },\n  compile: function() {\n    this.alias = [\"standalone.es6.njs\"];\n  },\n  dependency: {}\n};\n", "export default {\n  alias: [\"standalone.index.es6.njs\"],\n  script: function(files, _content, partial, slot, options) {\n    var out = [];\n    for (let i = 0; i < files.length; i += 1) {\n      out.push(\"\\n\");\n      out.push(\"  import \" + files[i].name.replaceAll(/[\\s\\.]/g, \"_\") + \" from '\" + files[i].path + \"'\");\n    }\n    out.push(\"\\n\");\n    out.push(\"\\n\");\n    out.push(\"const templates = {\");\n    for (let i = 0; i < files.length; i += 1) {\n      out.push(\"\\n\");\n      out.push(\"  '\" + files[i].name + \"': \" + files[i].name.replaceAll(/[\\s\\.]/g, \"_\") + \",\");\n    }\n    out.push(\"\\n\");\n    out.push(\"}\\n\");\n    out.push(\"export default templates\");\n    return out.join(\"\");\n  },\n  compile: function() {\n    this.alias = [\"standalone.index.es6.njs\"];\n  },\n  dependency: {}\n};\n", "export default {\n  alias: [\"standalone.index.njs\"],\n  script: function(files, _content, partial, slot, options) {\n    var out = [];\n    out.push(\"const templates = {\");\n    for (let i = 0; i < files.length; i += 1) {\n      out.push(\"\\n\");\n      out.push(\"  '\" + files[i].name + \"': require('\" + files[i].path + \"'),\");\n    }\n    out.push(\"\\n\");\n    out.push(\"}\\n\");\n    out.push(\"module.exports = templates\");\n    return out.join(\"\");\n  },\n  compile: function() {\n    this.alias = [\"standalone.index.njs\"];\n  },\n  dependency: {}\n};\n", "export default {\n  alias: [\"standalone.njs\"],\n  script: function(files, _content, partial, slot, options) {\n    var out = [];\n    out.push(\"const { Factory } = require('fte.js/lib/standalone.fte.js')\\n\");\n    out.push(\"\\n\");\n    out.push(\"const templates = {\");\n    for (let i = 0; i < files.length; i += 1) {\n      out.push(\"\\n\");\n      out.push(\"  '\" + files[i].name + \"': require('\" + files[i].path + \"'),\");\n    }\n    out.push(\"\\n\");\n    out.push(\"}\\n\");\n    out.push(\"\\n\");\n    out.push(\"const F = new Factory(templates)\\n\");\n    out.push(\"\\n\");\n    out.push(\"module.exports = (context, name) => {\\n\");\n    out.push(\"  return F.run( context, name )\\n\");\n    out.push(\"}\");\n    return out.join(\"\");\n  },\n  compile: function() {\n    this.alias = [\"standalone.njs\"];\n  },\n  dependency: {}\n};\n", "import codeblock_njs from \"./codeblock.njs\";\nimport compilationError_njs from \"./compilationError.njs\";\nimport compiled_njs from \"./compiled.njs\";\nimport es6module_njs from \"./es6module.njs\";\nimport MainTemplate_njs from \"./MainTemplate.njs\";\nimport raw_njs from \"./raw.njs\";\nimport singlefile_es6_njs from \"./singlefile.es6.njs\";\nimport singlefile_njs from \"./singlefile.njs\";\nimport standalone_es6_njs from \"./standalone.es6.njs\";\nimport standalone_index_es6_njs from \"./standalone.index.es6.njs\";\nimport standalone_index_njs from \"./standalone.index.njs\";\nimport standalone_njs from \"./standalone.njs\";\nconst templates = {\n  \"codeblock.njs\": codeblock_njs,\n  \"compilationError.njs\": compilationError_njs,\n  \"compiled.njs\": compiled_njs,\n  \"es6module.njs\": es6module_njs,\n  \"MainTemplate.njs\": MainTemplate_njs,\n  \"raw.njs\": raw_njs,\n  \"singlefile.es6.njs\": singlefile_es6_njs,\n  \"singlefile.njs\": singlefile_njs,\n  \"standalone.es6.njs\": standalone_es6_njs,\n  \"standalone.index.es6.njs\": standalone_index_es6_njs,\n  \"standalone.index.njs\": standalone_index_njs,\n  \"standalone.njs\": standalone_njs\n};\nexport default templates;\n", "import { DefaultFactoryOption } from '../common/interfaces'\nimport { TemplateBase } from '../common/template'\n\nexport class TemplateBrowser<\n  T extends DefaultFactoryOption,\n> extends TemplateBase<T> {\n  public override compile() {\n    if (this.parent) {\n      this.mergeParent(this.factory.ensure(this.parent))\n    }\n  }\n}\n", "declare let process: { browser: boolean; cwd: () => string }\nimport { TemplateBase } from './template'\nimport {\n  HashType,\n  BlockContent,\n  HashTypeGeneric,\n  PartialFunction,\n  ContentFunction,\n  SlotsHash,\n  SlotFunction,\n  DefaultFactoryOption,\n} from './../common/interfaces'\nimport { applyIndent, escapeIt, applyDeindent } from './helpers'\nimport { BlockRunFunction } from './interfaces'\n\nexport const DefaultFactoryOptions: DefaultFactoryOption = {\n  applyIndent,\n  escapeIt,\n  applyDeindent,\n}\n\nexport interface FactoryConfig<T> {\n  root?: string | Array<string>\n  ext?: Array<string>\n  preload?: boolean\n  options?: T\n  watch?: boolean\n}\n\n/**\n * template factory -- it instantiate the templates\n */\nexport abstract class TemplateFactoryBase<T extends DefaultFactoryOption> {\n  public ext: Array<string> = []\n  public cache: HashTypeGeneric<TemplateBase<T>>\n  public root = undefined\n  public options: T\n  public watch = false\n\n  constructor(config: FactoryConfig<T> = {}) {\n    config.options = { ...config.options, ...DefaultFactoryOptions }\n    this.options = config.options\n    this.watch = config && config.watch\n    if (!process.browser) {\n      // this only need in server-side code with server load code\n      this.root = config\n        ? config.root\n          ? Array.isArray(config.root)\n            ? config.root\n            : [config.root]\n          : [process.cwd()]\n        : [process.cwd()]\n\n      if (config && config.ext) {\n        if (Array.isArray(config.ext)) {\n          this.ext = config.ext\n        } else {\n          this.ext = [config.ext]\n        }\n      }\n    }\n    this.cache = {}\n    if (config && config.preload) {\n      this.preload()\n    }\n  }\n  public register(tpl: TemplateBase<T>, fileName?: string) {\n    if (!(tpl.name in this.cache)) {\n      this.cache[tpl.name] = tpl\n      if (tpl.alias && Array.isArray(tpl.alias)) {\n        tpl.alias\n          .filter((a) => a !== tpl.name)\n          .forEach((a) => {\n            this.cache[a] = tpl\n          })\n      }\n      this.cache[tpl.absPath] = tpl\n    }\n    return tpl\n  }\n\n  public ensure(fileName: string, absPath?: boolean): TemplateBase<T> {\n    if (!(fileName in this.cache)) {\n      return this.load(fileName, absPath)\n    }\n    return this.cache[fileName]\n  }\n  public blockContent(\n    tpl: TemplateBase<T>,\n    slots?: SlotsHash,\n  ): BlockContent<T> {\n    const scripts: Array<BlockRunFunction<T>> = []\n    const self = this\n    const bc: BlockContent<T> = {\n      slots: slots ? slots : {},\n      slot(name: string, content: string | Array<string>): void | string {\n        if (name) {\n          if (!this.slots.hasOwnProperty(name)) {\n            this.slots[name] = []\n          }\n          if (content) {\n            if (Array.isArray(content)) {\n              content.forEach((c) => this.slot(name, c))\n            } else {\n              if (this.slots[name].indexOf(content) === -1) {\n                this.slots[name].push(content)\n              }\n            }\n          } else {\n            return `#{partial(context['${name}'] || [], '${name}')}`\n          }\n        }\n      },\n      partial(obj: HashType, name: string): string {\n        if (tpl.aliases.hasOwnProperty(name)) {\n          return self.runPartial({\n            context: obj,\n            name: tpl.aliases[name],\n            absPath: true,\n            slots: this.slots,\n            options: this.options,\n          })\n        } else {\n          return self.runPartial({\n            context: obj,\n            name,\n            absPath: false,\n            slots: this.slots,\n            options: this.options,\n          })\n        }\n      },\n      content(\n        name: string,\n        context: HashType,\n        content: ContentFunction,\n        partial: PartialFunction,\n        slot: SlotFunction,\n      ) {\n        if (name) {\n          return tpl.blocks && tpl.blocks.hasOwnProperty(name)\n            ? tpl.blocks[name](context, content, partial, slot, self.options)\n            : ''\n        } else {\n          const fn = scripts.pop()\n          if (typeof fn === 'function') {\n            return fn(context, content, partial, slot, self.options)\n          } else {\n            return ''\n          }\n        }\n      },\n      run(\n        $context: HashType,\n        $content: ContentFunction,\n        $partial: PartialFunction,\n      ): string {\n        function go(\n          this: TemplateBase<T>,\n          context,\n          content,\n          partial,\n          slot,\n        ): string | Array<{ name: string; content: string }> {\n          const $this = this as TemplateBase<T>\n          if ($this.parent) {\n            const parent = self.ensure($this.parent)\n            // tpl.mergeParent(parent); moved to compile.\n            scripts.push($this.script)\n            return go.call(parent, context, content, partial, slot)\n          } else {\n            try {\n              return $this.script(context, content, partial, slot, self.options)\n            } catch (e) {\n              throw new Error(\n                `template ${$this.name} failed to execute with error\n                  '${e.message}\n                  ${e.stack}'`,\n              )\n            }\n          }\n        }\n        return go.call(tpl, $context, $content, $partial, this.slot)\n      },\n    }\n    bc.content = bc.content.bind(bc)\n    bc.partial = bc.partial.bind(bc)\n    bc.run = bc.run.bind(bc)\n    bc.slot = bc.slot.bind(bc)\n    return bc\n  }\n\n  public preload(fileName?: string) {\n    throw new Error('abstract method call')\n  }\n\n  public load(fileName: string, absPath: boolean): TemplateBase<T> {\n    throw new Error('abstract method call')\n  }\n\n  public run<T extends Record<string, any>>(\n    context: HashType,\n    name: string,\n  ): string | Array<{ name: string; content: string }> {\n    throw new Error('abstract method call')\n  }\n\n  public runPartial<T extends Record<string, any>>({\n    context,\n    name,\n    absPath,\n    options,\n    slots,\n  }: {\n    context: HashType\n    name: string\n    absPath?: boolean\n    options: T\n    slots?: SlotsHash\n  }): string {\n    throw new Error('abstract method call')\n  }\n}\n", "import { TemplateBrowser } from './template'\nimport { TemplateFactoryBase } from '../common/factory'\nimport { HashType, SlotsHash } from '../common/interfaces'\nimport { TemplateConfig } from '../common/interfaces'\nimport { DefaultFactoryOption } from '../common/interfaces'\n\n/**\n * We must ensure that template is registered with its compiled templates\n */\n\nexport class TemplateFactoryStandalone<\n  T extends DefaultFactoryOption,\n> extends TemplateFactoryBase<T> {\n  private templates: Record<string, TemplateConfig<T>>\n\n  constructor(templates: Record<string, TemplateConfig<T>>) {\n    super()\n    this.templates = templates\n    this.preload()\n  }\n  public resolveTemplateConfig(fileName: string): TemplateConfig<T> {\n    const result = this.templates[fileName]\n    if (result) {\n      result.factory = this\n      result.name = fileName\n      return result\n    } else {\n      throw new Error(`template ${fileName} not found`)\n    }\n  }\n\n  public override load(fileName: string) {\n    const template = this.resolveTemplateConfig(fileName)\n    const templ = new TemplateBrowser<T>(template)\n    this.register(templ, fileName)\n    templ.compile()\n    return templ\n  }\n  public override preload() {\n    Object.keys(this.templates).forEach((t) => this.load(t))\n  }\n  public override run<T extends Record<string, any>>(\n    context: HashType,\n    name: string,\n  ): string | Array<{ name: string; content: string }> {\n    const templ = this.ensure(name)\n    const bc = this.blockContent(templ)\n    return bc.run(context, bc.content, bc.partial, bc.slot, this.options)\n  }\n\n  public override runPartial<T extends Record<string, any>>({\n    context,\n    name,\n    slots,\n  }: {\n    context: HashType\n    name: string\n    absPath?: boolean\n    options?: T\n    slots?: SlotsHash\n  }): string {\n    const templ = this.ensure(name)\n    if (!templ.chunks) {\n      const bc = this.blockContent(templ, slots)\n      return bc.run(\n        context,\n        bc.content,\n        bc.partial,\n        bc.slot,\n        this.options,\n      ) as string\n    } else {\n      throw new Error(\"cant't use template with chunks as partial\")\n    }\n  }\n}\n", "import { TemplateBase } from './../common/template'\nimport { makeTemplate } from './helpers'\nimport { DefaultFactoryOption } from '../common/interfaces'\n\nexport class Template<T extends DefaultFactoryOption> extends TemplateBase<T> {\n  public override compile() {\n    if (this.srcCode) {\n      const result = makeTemplate(this.srcCode, false)\n      if (!result.error) {\n        this.script = result.script\n        this.blocks = result.blocks\n        this.slots = result.slots\n        this.compile = result.compile\n        this.dependency = result.dependency\n        if (result.alias) {\n          this.alias = result.alias\n        }\n        this.compile()\n      } else {\n        throw result.error\n      }\n    }\n    return this\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,IAAAA,MAAoB;AACpB,WAAsB;AACtB,WAAsB;;;ACAtB,IAAI,YAAY;AAAhB,IACE,eAAe;AADjB,IAEE,cAAc;AAFhB,IAGE,cAAc;AAHhB,IAIE,gBAAgB;AAEX,SAAS,SAAS,MAAc;AACrC,MAAI,QAAQ,MAAM;AAChB,WAAO;AAAA,EACT;AAEA,MAAI,SAAS,KAAK,SAAS;AAC3B,MAAI,CAAC,UAAU,KAAK,MAAM,GAAG;AAC3B,WAAO;AAAA,EACT;AAEA,SAAO,OACJ,QAAQ,cAAc,OAAO,EAC7B,QAAQ,aAAa,MAAM,EAC3B,QAAQ,aAAa,MAAM,EAC3B,QAAQ,eAAe,QAAQ;AACpC;AAEO,SAAS,cACd,KACA,UACA;AACA,MAAI,CAAC;AAAK,WAAO;AACjB,MAAI,QAAQ,MAAM,QAAQ,GAAG,IAAI,CAAC,GAAG,GAAG,IAAI,IAAI,MAAM,IAAI;AAE1D,MAAI,OAAO,YAAY,UAAU;AAC/B,eAAW,SAAS;AAAA,EACtB;AAEA,MAAI,YAAY,GAAG;AACjB,QAAI,IAAI;AACR,OAAG;AACD,UAAI,MAAM,CAAC,EAAE,KAAK,EAAE,WAAW;AAAG;AAClC,WAAK;AACL,UAAI,KAAK,MAAM,SAAS;AAAG;AAAA,IAC7B,SAAS;AACT,QAAI,IAAI,MAAM,QAAQ;AACpB,iBAAW,MAAM,CAAC,EAAE,SAAS,MAAM,CAAC,EAAE,UAAU,EAAE;AAAA,IACpD;AAAA,EACF;AACA,MAAI,WAAW,GAAG;AAChB,aAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACrC,UAAI,aAAa;AACjB,eAAS,IAAI,GAAG,IAAI,MAAM,CAAC,EAAE,QAAQ,KAAK;AACxC,YAAI,MAAM,CAAC,EAAE,CAAC,MAAM,KAAK;AACvB;AAAA,QACF,OAAO;AACL;AAAA,QACF;AAAA,MACF;AACA,UAAI,aAAa,GAAG;AAClB,YAAI,cAAc,UAAU;AAC1B,gBAAM,CAAC,IAAI,MAAM,CAAC,EAAE,UAAU;AAAA,QAChC,OAAO;AACL,gBAAM,CAAC,IAAI,MAAM,CAAC,EAAE,UAAU,QAAQ;AAAA,QACxC;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACA,SAAO,MAAM,QAAQ,GAAG,IAAI,QAAQ,MAAM,KAAK,IAAI;AACrD;AAEO,SAAS,YACd,KACA,SACA;AACA,MAAI,CAAC;AAAK,WAAO;AACjB,MAAI,SAAS;AACb,MAAI,OAAO,WAAW,YAAY,UAAU,GAAG;AAC7C,QAAI,MAAM;AACV,aAAS,IAAI,GAAG,IAAI,SAAS,KAAK;AAChC,aAAO;AAAA,IACT;AACA,aAAS;AAAA,EACX;AACA,MAAI,OAAO,WAAW,YAAY,QAAQ,SAAS,GAAG;AACpD,aAAS;AAAA,EACX;AACA,MAAI,QAAQ,MAAM,QAAQ,GAAG,IAAI,CAAC,GAAG,GAAG,IAAI,IAAI,MAAM,IAAI;AAC1D,MAAI,UAAU,OAAO;AACnB,QAAIC,OAAM,MAAM,IAAI,CAAC,MAAM,SAAS,CAAC;AACrC,WAAO,MAAM,QAAQ,GAAG,IAAIA,OAAMA,KAAI,KAAK,IAAI;AAAA,EACjD,OAAO;AACL,WAAO;AAAA,EACT;AACF;AA0CO,SAAS,MAAM,GAAa,GAAa,UAAkB;AAChE,MAAI;AACJ,QAAM,QAAQ,EAAE,QAAQ;AACxB,MAAI,UAAU,QAAW;AACvB,QAAI,QAAQ,EAAE,QAAQ;AACtB,QAAI,UAAU,QAAW;AACvB,cAAQ,EAAE,QAAQ,IAAI,CAAC;AAAA,IACzB;AACA,UAAM,WAAW,OAAO,KAAK,KAAK;AAClC,aAAS,IAAI,GAAG,OAAO,SAAS,QAAQ,IAAI,MAAM,KAAK;AACrD,aAAO,SAAS,CAAC;AACjB,UAAI,EAAE,QAAQ,QAAQ;AACpB,cAAM,IAAI,IAAI,MAAM,IAAI;AAAA,MAC1B;AAAA,IACF;AAAA,EACF;AACF;;;AC5IO,IAAM,eAAN,MAAmD;AAAA,EAcxD,YAAY,QAA2B;AACrC,QAAI,EAAE,gBAAgB,eAAe;AACnC,YAAM,IAAI,MAAM,+BAA+B;AAAA,IACjD;AACA,SAAK,UAAU,OAAO,SAAS,OAAO,OAAO,SAAS,IAAI;AAC1D,SAAK,OAAO,OAAO;AACnB,SAAK,UAAU,OAAO;AACtB,SAAK,SAAS,OAAO;AACrB,SAAK,SAAS,OAAO;AACrB,SAAK,QAAQ,OAAO;AACpB,SAAK,aAAa,OAAO;AACzB,SAAK,SAAS,OAAO,SAAS,OAAO,OAAO,KAAK,IAAI;AACrD,SAAK,UAAU,OAAO,WAAW,CAAC;AAClC,SAAK,QAAQ,OAAO,SAAS,CAAC,OAAO,IAAI;AACzC,SAAK,UAAU,OAAO;AACtB,QAAI,OAAO,SAAS;AAClB,WAAK,UAAU,OAAO;AAAA,IACxB;AAAA,EACF;AAAA,EAEO,YAAYC,MAAsB;AACvC,QAAIA,MAAK;AACP,YAAMA,MAAK,MAAM,QAAQ;AACzB,YAAMA,MAAK,MAAM,SAAS;AAC1B,YAAMA,MAAK,MAAM,OAAO;AAAA,IAC1B;AAAA,EACF;AAAA,EAEO,UAAU;AACf,UAAM,IAAI,MAAM,sBAAsB;AAAA,EACxC;AACF;;;ACvDA,SAAoB;;;ACApB,2BAAyB;AAmDzB,IAAM,eAAmD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASvD,MAAM;AAAA;AAAA,IAEJ,QAAQ;AAAA,MACN;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAAA,EACF;AAAA,EACA,SAAS;AAAA,IACP,OAAO,CAAC,MAAM,OAAO,OAAO,OAAO,KAAK;AAAA,IACxC,KAAK,CAAC,MAAM,OAAO,KAAK;AAAA,IACxB,MAAM;AAAA,MACJ,OAAO,CAAC,KAAK;AAAA,MACb,KAAK,CAAC,KAAK;AAAA,IACb;AAAA,IACA,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,OAAO;AAAA,MACP,OAAO;AAAA,MACP,OAAO;AAAA,MACP,OAAO;AAAA,IACT;AAAA,EACF;AAAA,EACA,YAAY;AAAA,IACV,OAAO,CAAC,IAAI;AAAA,IACZ,KAAK,CAAC,GAAG;AAAA,IACT,OAAO;AAAA,EACT;AAAA,EACA,aAAa;AAAA,IACX,OAAO,CAAC,IAAI;AAAA,IACZ,KAAK,CAAC,GAAG;AAAA,IACT,OAAO;AAAA,EACT;AAAA,EACA,MAAM;AAAA,IACJ,OAAO,CAAC,MAAM,KAAK;AAAA,IACnB,KAAK,CAAC,MAAM,KAAK;AAAA,IACjB,MAAM;AAAA,MACJ,OAAO,CAAC,OAAO,YAAY,WAAW,aAAa,KAAK;AAAA,IAC1D;AAAA,EACF;AAAA,EACA,WAAW;AAAA,IACT,OAAO,CAAC,KAAK;AAAA,IACb,KAAK,CAAC,MAAM,KAAK;AAAA,EACnB;AAAA,EACA,UAAU;AAAA,IACR,OAAO,CAAC,IAAI;AAAA,IACZ,KAAK,CAAC,IAAI;AAAA,EACZ;AAAA,EACA,YAAY;AAAA,IACV,OAAO,CAAC,YAAY,WAAW;AAAA,IAC/B,KAAK,CAAC,QAAQ,OAAO;AAAA,EACvB;AAAA,EACA,WAAW;AAAA,IACT,OAAO,CAAC,WAAW,UAAU;AAAA,IAC7B,KAAK,CAAC,QAAQ,OAAO;AAAA,EACvB;AAAA,EACA,UAAU;AAAA,IACR,OAAO,CAAC,aAAa,cAAc,cAAc,aAAa;AAAA,EAChE;AACF;AA+BA,IAAM,aAAa;AAAA,EACjB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF;AAEA,SAAS,gBAAgB,OAAe;AACtC,MAAI;AACJ,MAAI;AACJ,MAAI,OAAO;AACT,YAAQ,MAAM,KAAK;AACnB,aAAS,IAAI,GAAG,IAAI,WAAW,QAAQ,KAAK,GAAG;AAC7C,YAAM,YAAY,WAAW,CAAC;AAC9B,UAAI,IAAI,MAAM,KAAK,GAAG,SAAS,KAAK,WAAW;AAC7C,eAAO;AACP,iBAAS,QAAQ,MAAM,MAAM,UAAU,MAAM,CAAC;AAC9C;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACA,SAAO;AAAA,IACL,MAAM,OAAO,OAAO;AAAA,IACpB;AAAA,EACF;AACF;AAEO,IAAM,sBAAN,MAA0B;AAAA,EAA1B;AAGL,mBAAkB;AAKlB,mBAAmB;AACnB,iBAAiB;AACjB,kBAAkB;AAClB,mBAAmB;AACnB,mBAAmB;AAKnB,qBAAgC,CAAC;AAAA;AAAA,EACjC,KAAK,MAAoB;AACvB,UAAM,EAAE,MAAM,OAAO,IAAI,gBAAgB,KAAK,KAAK,KAAK,CAAC;AACzD,YAAQ,MAAM;AAAA,MACZ,KAAK;AACH,aAAK,WAAW,OAAO,SAAS,IAAI,SAAS,OAAO,CAAC,CAAC,IAAI;AAC1D;AAAA,MACF,KAAK;AACH,aAAK,SAAS,OAAO,CAAC;AACtB;AAAA,MACF,KAAK;AACH,aAAK,UAAU,OAAO,CAAC;AACvB;AAAA,MACF,KAAK;AACH,aAAK,QAAQ;AACb;AAAA,MACF,KAAK;AACH,aAAK,SAAS,OAAO,CAAC;AACtB;AAAA,MACF,KAAK;AACH,aAAK,mBAAmB;AACxB;AAAA,MACF,KAAK;AACH,aAAK,UAAU;AACf;AAAA,MACF,KAAK;AACH,aAAK,UAAU;AACf;AAAA,MACF,KAAK;AACH,aAAK,QAAQ;AACb;AAAA,MACF,KAAK;AACH,aAAK,SAAS;AACd;AAAA,MACF,KAAK;AACH,aAAK,UAAU;AACf;AAAA,MACF,KAAK;AACH,aAAK,UAAU;AACf;AAAA,MACF,KAAK;AACH,aAAK,UAAU;AACf;AAAA,MACF,KAAK;AACH,aAAK,WAAW;AAChB;AAAA,MACF,KAAK;AACH,aAAK,UAAU,KAAK,EAAE,MAAM,OAAO,CAAC,GAAG,OAAO,OAAO,CAAC,EAAE,CAAC;AACzD;AAAA,MACF;AAAA,IAEF;AAAA,EACF;AACF;AAEO,IAAM,YAAN,MAAgB;AAAA,EASrB,YAAY,MAAqB;AAPjC,gBAAqB,CAAC;AAGtB;AAAA;AAAA,sBAAkC,IAAI,oBAAoB;AAC1D,yBAA8B,CAAC;AAC/B,iBAAwC,CAAC;AACzC,kBAA0C,CAAC;AAEzC,QAAI,MAAM;AACR,WAAK,OAAO,QAAQ,KAAK,IAAI;AAAA,IAC/B;AAAA,EACF;AAAA,EACA,SAAS,OAAkB;AACzB,SAAK,WAAW,SAAS;AACzB,SAAK,OAAO,MAAM,IAAI,IAAI;AAAA,EAC5B;AAAA,EACA,QAAQ,MAAiB;AACvB,SAAK,WAAW,QAAQ;AACxB,SAAK,OAAO,KAAK,IAAI,IAAI;AAAA,EAC3B;AACF;AAEA,IAAM,UAAU,CAAC,QAAiB;AAChC,MAAI,KAAK;AACP,QAAI,MAAM,IAAI,KAAK;AACnB,UAAM,IAAI,MAAM,sBAAsB,IAAI,CAAC,KAAK;AAChD,WAAO;AAAA,EACT,OAAO;AACL,WAAO;AAAA,EACT;AACF;AAEA,IAAM,UAAU,CAAC,QAAiB;AAChC,MAAI,KAAK;AACP,QAAI,MAAM,KAAK,KAAK;AACpB,UAAM,IAAI,MAAM,gBAAgB,IAAI,CAAC,KAAK;AAC1C,WAAO,IAAI,MAAM,GAAG,EAAE,IAAI,OAAO;AAAA,EACnC,OAAO;AACL,WAAO,CAAC;AAAA,EACV;AACF;AAEO,IAAM,UAAN,MAAa;AAAA,EA0BV,YAAY,OAAe,SAAuC;AAjB1E,SAAQ,MAAc;AACtB,SAAQ,OAAe;AACvB,SAAQ,SAAiB;AACzB,SAAQ,aAAwB;AAChC,SAAQ,eAA8B,CAAC;AACvC,SAAQ,SAA8B,CAAC;AAarC,QAAI,QAAQ,QAAQ;AAClB,WAAK,SACH,OAAO,QAAQ,WAAW,WACtB,QAAQ,OAAO,SACf,QAAQ;AAAA,IAChB;AACA,SAAK,cAAc,QAAO;AAC1B,SAAK,SAAS,MAAM,SAAS;AAC7B,SAAK,OAAO,KAAK,OAAO;AAAA,EAC1B;AAAA,EArBA,OAAc,MACZ,MACA,UAAwC,CAAC,GACzC;AACA,UAAM,SAAS,IAAI;AAAA,MACjB,OAAO,QAAQ,WAAW,OAAO,KAAK,SAAS;AAAA,MAC/C;AAAA,IACF;AACA,WAAO,MAAM;AACb,WAAO,OAAO,QAAQ;AAAA,EACxB;AAAA,EAaA,UAAU;AACR,UAAM,EAAE,MAAM,IAAI,IAAI,KAAK,OAAO;AAClC,QAAI,KAAK;AACP,WAAK,YAAY,MAAM;AACvB,WAAK,KAAK;AAAA,IACZ,OAAO;AACL,WAAK,YAAY,QAAQ;AAAA,IAC3B;AAAA,EACF;AAAA,EAEQ,IAAI,cAA2B;AACrC,UAAM,WAAW,KAAK;AACtB,UAAM,QAAQ,aAAa,YAAY;AACvC,SAAK,aAAa,MAAM;AACxB,QAAI,MAAM,OAAO;AACf,UAAI,MAAM,MAAM,OAAO;AACrB,iBAAS,IAAI,GAAG,IAAI,MAAM,KAAK,MAAM,QAAQ,KAAK,GAAG;AACnD,cAAI,KAAK,IAAI,MAAM,KAAK,MAAM,CAAC,CAAC,KAAK,MAAM,KAAK,MAAM,CAAC,GAAG;AAExD,mBAAO;AAAA,UACT;AAAA,QACF;AAAA,MACF;AAEA,UAAI,aAAa;AACjB,UAAI,WAAW;AACf,eAAS,IAAI,MAAM,MAAM,SAAS,GAAG,KAAK,GAAG,KAAK,GAAG;AACnD,cAAM,IAAI,MAAM,MAAM,CAAC;AACvB,cAAM,OAAO,KAAK,IAAI,CAAC,EAAE,YAAY;AACrC,YAAI,QAAQ,GAAG;AACb,uBAAa;AACb,eAAK,cAAc;AACnB,eAAK,cAAc,MAAM,OAAO,CAAC,KAAK;AACtC,eAAK,KAAK,EAAE,OAAO,EAAE,CAAC;AACtB,eAAK,KAAK,CAAC;AACX;AAAA,QACF;AAAA,MACF;AACA,UAAI;AACF,WAAG;AACD,cAAI,MAAM,KAAK;AACb,gBAAI;AACJ,iBAAK,IAAI,MAAM,IAAI,SAAS,GAAG,KAAK,GAAG,KAAK,GAAG;AAC7C,oBAAM,IAAI,MAAM,IAAI,CAAC;AACrB,kBAAI,MAAM,SAAS,KAAK,EAAE,QAAQ,GAAG,IAAI,IAAI;AAC3C,oBAAI,KAAK,aAAa,SAAS,GAAG;AAChC;AAAA,gBACF;AAAA,cACF;AACA,kBAAI,MAAM,SAAS,KAAK,EAAE,QAAQ,IAAI,IAAI,IAAI;AAC5C,oBAAI,KAAK,aAAa,SAAS,GAAG;AAChC;AAAA,gBACF;AAAA,cACF;AACA,oBAAM,OAAO,KAAK,IAAI,CAAC,EAAE,YAAY;AACrC,kBAAI,QAAQ,GAAG;AACb,qBAAK,KAAK,CAAC;AACX,2BAAW;AACX;AAAA,cACF;AAAA,YACF;AACA,gBAAI,CAAC,UAAU;AACb,mBAAK,QAAQ;AAAA,YACf,OAAO;AACL,mBAAK,YAAY,MAAM,MAAM,IAAI,CAAC;AAClC,mBAAK,cAAc;AAAA,YACrB;AAAA,UACF,OAAO;AACL,uBAAW;AAAA,UACb;AAAA,QACF,SAAS,CAAC,YAAY,KAAK,MAAM,KAAK;AAAA,IAC1C,WAGS,MAAM,QAAQ;AACrB,UAAI,QAAQ;AACZ,eAAS,IAAI,MAAM,OAAO,SAAS,GAAG,KAAK,GAAG,KAAK,GAAG;AACpD,cAAM,OAAO,MAAM,OAAO,CAAC;AAC3B,gBAAQ,KAAK,IAAI,IAAI;AACrB,YAAI,OAAO;AACT,eAAK,cAAc;AACnB,eAAK,cAAc;AACnB,eAAK,KAAK;AACV;AAAA,QACF;AAAA,MACF;AACA,UAAI,CAAC,OAAO;AACV,aAAK,QAAQ;AAAA,MACf;AAAA,IACF;AACA,WAAO,YAAY,KAAK;AAAA,EAC1B;AAAA,EAEQ,QAAQ;AACd,QAAI,KAAK,OAAO,GAAG;AACjB,WAAK,KAAK;AACV,SAAG;AACD,aAAK,IAAI,KAAK,WAAW;AAAA,MAC3B,SAAS,KAAK,MAAM,KAAK;AACzB,WAAK,KAAK;AAAA,IACZ;AAAA,EACF;AAAA,EAEQ,UAAU;AAChB,UAAM,UAAU,IAAI,UAAU;AAE9B,UAAM,aAAa,KAAK,OAAO;AAC/B,QAAI,OAAO;AACX,QAAI,QAA0B;AAC9B,aAAS,IAAI,GAAG,IAAI,YAAY,KAAK,GAAG;AACtC,UAAI,IAAI,KAAK,OAAO,CAAC;AACrB,UAAI,EAAE,MAAM,KAAK,MAAM,QAAQ,OAAO,KAAK,MAAM,IAAI,IAAI;AAEzD,YAAM,iBAAiB,CAAC,UAAmB;AACzC,YAAI,UAAU;AACd,WAAG;AACD,cAAI,KAAK,KAAK,SAAS,GAAG;AACxB,gBAAI,OAAO,KAAK,KAAK,KAAK,KAAK,SAAS,CAAC;AACzC,gBACE,MAAM,QAAQ,UACb,MAAM,QAAQ,WAAW,SAAS,QACnC;AACA,mBAAK,UAAU,KAAK,QAAQ,QAAQ;AACpC,kBAAI,CAAC,KAAK,SAAS;AACjB,oBAAI,KAAK;AAAK,4BAAU;AACxB,qBAAK,KAAK,IAAI;AACd,oBAAI,OAAO;AACT,2BAAS;AACT,sBAAI,CAAC,OAAO;AACV;AAAA,kBACF;AAAA,gBACF;AAAA,cACF,OAAO;AACL,qBAAK,MAAM;AACX;AAAA,cACF;AAAA,YACF,OAAO;AACL,kBAAI,WAAW,KAAK,SAAS;AAAQ,qBAAK,MAAM;AAChD;AAAA,YACF;AAAA,UACF,OAAO;AACL;AAAA,UACF;AAAA,QACF,SAAS;AAAA,MACX;AACA,YAAM,eAAe,CAAC,UAAmB;AACvC,YAAI,WAAW;AACf,WAAG;AACD,sBAAY;AACZ,cAAI,IAAI,WAAW,YAAY;AAC7B,gBAAI,OAAO,KAAK,OAAO,IAAI,QAAQ;AACnC,gBAAI,KAAK,QAAQ,QAAQ;AACvB,mBAAK,OAAO,KAAK,KAAK,UAAU;AAChC,kBAAI,CAAC,KAAK,MAAM;AACd,qBAAK,OAAO;AACZ,oBAAI,OAAO;AACT,2BAAS;AACT,sBAAI,CAAC,OAAO;AACV;AAAA,kBACF;AAAA,gBACF;AAAA,cACF,OAAO;AACL,qBAAK,MAAM;AACX;AAAA,cACF;AAAA,YACF,OAAO;AACL;AAAA,YACF;AAAA,UACF,OAAO;AACL;AAAA,UACF;AAAA,QACF,SAAS;AAAA,MACX;AACA,YAAM,kBAAkB,MAAM;AAC5B,YAAI,KAAK,KAAK,SAAS,GAAG;AACxB,cAAI,OAAO,KAAK,KAAK,KAAK,KAAK,SAAS,CAAC;AACzC,cAAI,KAAK,QAAQ,QAAQ;AACvB,iBAAK,UAAU,KAAK,QAAQ,WAAW,KAAK,EAAE;AAC9C,gBAAI,CAAC,KAAK,SAAS;AACjB,mBAAK,KAAK,IAAI;AAAA,YAChB;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAEA,YAAM,gBAAgB,MAAM;AAC1B,YAAI,IAAI,IAAI,YAAY;AACtB,cAAI,OAAO,KAAK,OAAO,IAAI,CAAC;AAC5B,cAAI,KAAK,QAAQ,QAAQ;AACvB,iBAAK,OAAO,KAAK,KAAK,WAAW,KAAK,EAAE;AACxC,gBAAI,CAAC,KAAK,MAAM;AACd,mBAAK,OAAO;AAAA,YACd;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAEA,UAAI,KAAK,KAAK,SAAS,GAAG;AACxB,YAAI,OAAO,KAAK,KAAK,KAAK,KAAK,SAAS,CAAC;AACzC,YAAI,KAAK,QAAQ,MAAM;AACrB,eAAK,KAAK,KAAK,KAAK,SAAS,CAAC,EAAE,MAAM;AAAA,QACxC,OAAO;AACL,eAAK,KAAK,KAAK,KAAK,SAAS,CAAC,EAAE,MAAM;AAAA,QACxC;AAAA,MACF;AACA,cAAQ,MAAM;AAAA,QACZ,KAAK;AACH,kBAAQ;AACR,yBAAe;AACf,uBAAa;AACb,eAAK,WAAW,KAAK,CAAC;AACtB;AAAA,QACF,KAAK;AACH,kBAAQ;AACR,yBAAe;AACf,uBAAa;AACb,iBAAO,IAAI,UAAU,CAAC;AACtB,kBAAQ,SAAS,IAAI;AACrB;AAAA,QACF,KAAK;AACH,kBAAQ;AACR,yBAAe;AACf,uBAAa;AACb,iBAAO,IAAI,UAAU,CAAC;AACtB,kBAAQ,QAAQ,IAAI;AACpB;AAAA,QACF,KAAK;AACH,kBAAQ;AACR,yBAAe;AACf,iBAAO;AACP,uBAAa;AACb;AAAA,QACF,KAAK;AAOH,cAAI;AACJ,kBAAQ,EAAE,OAAO;AAAA,YACf,KAAK;AACH,4BAAc;AACd;AAAA,YACF,KAAK;AACH,4BAAc;AACd,8BAAgB;AAChB;AAAA,YACF,KAAK;AACH,4BAAc;AACd;AAAA,YACF,KAAK;AACH,4BAAc;AACd;AAAA,YACF,KAAK;AACH,4BAAc;AACd;AAAA,UACJ;AACA,kBAAQ,EAAE,KAAK;AAAA,YACb,KAAK;AACH,2BAAa,CAAC;AACd;AAAA,YACF,KAAK;AACH,4BAAc;AACd;AAAA,UACJ;AAEA,cAAI,gBAAgB,YAAY;AAC9B,iBAAK,KAAK,KAAK;AAAA,cACb,SAAS;AAAA,cACT;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA,MAAM;AAAA,cACN;AAAA,YACF,CAAC;AAAA,UACH,OAAO;AACL,iBAAK,cAAc,KAAK;AAAA,cACtB,SAAS;AAAA,cACT;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA,MAAM;AAAA,cACN;AAAA,YACF,CAAC;AAAA,UACH;AAEA;AAAA,QACF,KAAK;AACH,cAAI,SAAS,OAAO;AAClB,2BAAe;AAAA,UACjB;AACA,cAAI,OAAO,OAAO;AAChB,yBAAa;AAAA,UACf;AAEA,kBAAQ;AACR,eAAK,KAAK,KAAK;AAAA,YACb,SAAS;AAAA,YACT;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,UACF,CAAC;AAED;AAAA,QACF,KAAK;AAAA,QACL,KAAK;AAEH;AACE,kBAAMC,WAAiB;AAAA,cACrB,SAAS;AAAA,cACT;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA,MAAM;AAAA,cACN;AAAA,YACF;AAEA,kBAAMC,QAAO,KAAK,KAAK,IAAI;AAC3B,gBACEA,OAAM,SAAS,UACdA,OAAM,SAAS,UAAUA,OAAM,QAAQ,KAAK,EAAE,SAAS,KACvDA,OAAM,SAAS,UAAUA,OAAM,KAChC;AACA,mBAAK,KAAK,KAAKA,KAAI;AAAA,YACrB,OAAO;AACL,cAAAD,SAAQ,SAASC,MAAK;AAAA,YACxB;AAEA,iBAAK,KAAK,KAAKD,QAAO;AAAA,UACxB;AACA;AAAA,QACF,KAAK;AAAA,QACL,KAAK;AAEH,gBAAM,UAAiB;AAAA,YACrB,SAAS;AAAA,YACT;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,YACA,MAAM;AAAA,YACN;AAAA,UACF;AAEA,gBAAM,OAAO,KAAK,KAAK,IAAI;AAC3B,cAAI,MAAM,SAAS,UAAW,MAAM,SAAS,UAAU,MAAM,KAAM;AACjE,iBAAK,KAAK,KAAK,IAAI;AAAA,UACrB,OAAO;AACL,oBAAQ,SAAS,KAAK;AAAA,UACxB;AAEA,eAAK,KAAK,KAAK,OAAO;AAEtB;AAAA,QACF,KAAK,QAAQ;AACX,kBAAQ;AACR,cAAI,aAA0B,QAAQ,MAAM,OAAO;AACnD,eAAK,KAAK,KAAK;AAAA,YACb,SAAS;AAAA,YACT;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,YACA,MAAM;AAAA,YACN;AAAA,UACF,CAAC;AACD;AAAA,QACF;AAAA,QACA,KAAK;AACH,yBAAe;AACf,uBAAa;AAEb,eAAK,cAAc,KAAK;AAAA,YACtB,SAAS;AAAA,YACT;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,UACF,CAAC;AAED;AAAA,MACJ;AAAA,IACF;AACA,WAAO;AAAA,EACT;AAAA,EAEQ,SAAS;AACf,UAAM,MAAM,KAAK,OAAO,KAAK,GAAG;AAChC,QAAI,KAAK,cAAc,GAAG;AACxB,UAAI,CAAC,IAAI,QAAQ,GAAG,GAAG;AACrB,aAAK,aAAa,KAAK,KAAK,GAAG;AAAA,MACjC,WAAW,CAAC,IAAI,QAAQ,GAAG,GAAG;AAC5B,aAAK,aAAa,IAAI;AAAA,MACxB;AAAA,IACF;AACA,QAAI,KAAK,cAAc,GAAG;AACxB,UAAI,CAAC,IAAI,QAAQ,IAAI,GAAG;AACtB,aAAK,aAAa,KAAK,KAAK,GAAG;AAAA,MACjC,WAAW,CAAC,IAAI,QAAQ,IAAI,GAAG;AAC7B,aAAK,aAAa,IAAI;AAAA,MACxB;AAAA,IACF;AAEA,WAAO,KAAK,KAAK,GAAG;AAAA,EACtB;AAAA,EACQ,gBAAgB;AACtB,UAAM,EAAE,OAAO,IAAI;AACnB,UAAM,aAAS,qBAAAE,SAAa,MAAM,EAAE;AACpC,QAAI,CAAC,OAAO,QAAQ,GAAI,GAAG;AACzB,WAAK,SAAS,QAAO;AAAA,IACvB,OAAO;AACL,WAAK,SAAS,OAAO;AAAA,IACvB;AAAA,EACF;AAAA,EACQ,KAAK,MAAc;AACzB,UAAM,EAAE,OAAO,IAAI;AACnB,QAAI,MAAM;AACV,QAAI,KAAK,UAAU,GAAG;AACpB,UACE,QAAQ,QACR,QAAQ,QACR,QAAQ,YACR,QAAQ,UACR;AACA,YAAI,QAAQ,QAAQ,KAAK,IAAI,MAAM,KAAK,QAAQ;AAC9C,iBAAO;AAAA,QACT;AACA,aAAK,SAAS;AACd,aAAK,QAAQ;AACb,cAAM;AAAA,MACR,WAAW,QAAQ,KAAM;AACvB,YAAI,CAAC;AAAQ,eAAK,cAAc;AAChC,aAAK,UAAU,KAAK;AAAA,MACtB,OAAO;AACL,aAAK,UAAU;AAAA,MACjB;AACA,WAAK,OAAO,KAAK;AAAA,IACnB,OAAO;AAGL,YAAM,WAAW,KAAK;AACtB,UAAI,QAAQ;AACZ,SAAG;AAED,iBAAS,KAAK,KAAK,KAAK,OAAO,KAAK,GAAG,CAAC;AAAA,MAC1C,SAAS,KAAK,MAAM,WAAW,KAAK;AACpC,aAAO;AAAA,IACT;AAEA,WAAO,EAAE,MAAM,IAAI;AAAA,EACrB;AAAA,EACQ,MAAM,QAA+B,CAAC,GAAiB;AAC7D,UAAM,EAAE,KAAK,MAAM,QAAQ,aAAa,YAAY,IAAI;AACxD,WAAO;AAAA,MACL,MAAM;AAAA,MACN;AAAA,MACA;AAAA,MACA;AAAA,MACA,MAAM,eAAe;AAAA,MACrB,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACQ,IAAI,KAAK;AACf,UAAM,EAAE,KAAK,MAAM,OAAO,IAAI;AAC9B,WAAO,IAAI,QAAQ,KAAK,KAAK,IAAI;AAAA,EACnC;AAAA,EACQ,KAAK,QAAQ,CAAC,GAAG;AACvB,SAAK,cAAc,KAAK,MAAM,KAAK;AACnC,SAAK,OAAO,KAAK,KAAK,WAAW;AAAA,EACnC;AACF;AA5gBO,IAAM,SAAN;AAAM,OAII,gBAA6B;AAJjC,OAKI,mBAAmB;AAygBpC,SAAS,IAAI,QAAgB,KAAa,MAAc,GAAG,OAAe,GAAG;AAC3E,MAAI,CAAC,MAAM;AACT,WAAO,OAAO;AAAA,EAChB;AACA,QAAM,MAAM,IAAI;AAChB,QAAM,OAAO;AACb,QAAM,KAAK,MAAM;AACjB,MAAI,MAAM,MAAM;AACd,QAAI,MAAM;AACV,aAAS,IAAI,MAAM,IAAI,IAAI,KAAK,GAAG;AACjC,aAAO,OAAO,CAAC;AAAA,IACjB;AACA,WAAO;AAAA,EACT,OAAO;AACL,WAAO;AAAA,EACT;AACF;;;ACn1BA,cAAyB;;;ACDzB,IAAO,wBAAQ;AAAA,EACb,OAAO,CAAC,eAAe;AAAA,EACvB,QAAQ,SAAS,WAAW,UAAU,SAAS,MAAM,SAAS;AAC5D,QAAI,MAAM,CAAC;AACX,QAAI,YAAY;AAChB,OAAG;AACD,YAAM,MAAM,UAAU,MAAM;AAC5B,UAAI,IAAI,SAAS,WAAW,IAAI,SAAS,UAAU,IAAI,QAAQ,KAAK,GAAG;AACrE,kBAAU,QAAQ,GAAG;AACrB;AAAA,MACF;AACA,UAAI,UAAU,UAAU;AACtB;AAAA,IACJ,SAAS;AACT,OAAG;AACD,YAAM,MAAM,UAAU,IAAI;AAC1B,UAAI,IAAI,SAAS,WAAW,IAAI,SAAS,UAAU,IAAI,QAAQ,KAAK,GAAG;AACrE,kBAAU,KAAK,GAAG;AAClB;AAAA,MACF;AACA,UAAI,UAAU,UAAU;AACtB;AAAA,IACJ,SAAS;AACT,cAAU,UAAU,SAAS,CAAC,EAAE,MAAM;AACtC,aAAS,IAAI,GAAG,MAAM,UAAU,QAAQ,IAAI,KAAK,KAAK;AACpD,UAAI,OAAO,MAAM,UAAU,SAAS;AACpC,UAAI,QAAQ,UAAU,CAAC;AACvB,UAAI,OAAO,IAAI,IAAI,MAAM,UAAU,IAAI,CAAC,IAAI;AAC5C,UAAI,OAAO,OAAO;AAClB,cAAQ,MAAM,MAAM;AAAA,QAClB,KAAK;AACH;AACE,gBAAI,MAAM;AACV,gBAAI,CAAC,WAAW;AACd,0BAAY;AACZ,oBAAM;AAAA,YACR,OAAO;AACL,kBAAI,UAAU,IAAI,IAAI;AACtB,oBAAM,UAAU;AAAA,YAClB;AACA,gBAAI,CAAC,MAAM,KAAK;AACd,qBAAO,KAAK,UAAU,IAAI;AAAA,YAC5B,OAAO;AACL,qBAAO,KAAK,UAAU,OAAO,IAAI;AACjC,qBAAO,QAAQ,OAAO,KAAK;AAC3B,0BAAY;AAAA,YACd;AACA,gBAAI,KAAK,GAAG;AAAA,UACd;AACA;AAAA,QACF,KAAK;AACH;AACE,gBAAI,MAAM;AACV,gBAAI,CAAC,WAAW;AACd,0BAAY;AACZ,oBAAM;AAAA,YACR,OAAO;AACL,kBAAI,UAAU,IAAI,IAAI;AACtB,oBAAM,UAAU;AAAA,YAClB;AACA,gBAAI,QAAQ,sBAAsB,OAAO;AACzC,gBAAI,MAAM,QAAQ;AAChB,sBAAQ,yBAAyB,QAAQ,QAAQ,MAAM,SAAS;AAAA,YAClE;AACA,gBAAI,MAAM,SAAS,MAAM,KAAK;AAC5B,qBAAO,MAAM,QAAQ;AAAA,YACvB,WAAW,MAAM,OAAO;AACtB,qBAAO,MAAM;AAAA,YACf,WAAW,MAAM,KAAK;AACpB,qBAAO,QAAQ;AAAA,YACjB,OAAO;AACL,qBAAO;AAAA,YACT;AACA,gBAAI,CAAC,MAAM,KAAK;AACd,kBAAI,KAAK,GAAG;AAAA,YACd,OAAO;AACL,kBAAI,KAAK,MAAM,QAAQ,OAAO,KAAK,KAAK;AACxC,0BAAY;AAAA,YACd;AAAA,UACF;AACA;AAAA,QACF,KAAK;AACH;AACE,gBAAI,MAAM;AACV,gBAAI,CAAC,WAAW;AACd,0BAAY;AACZ,oBAAM;AAAA,YACR,OAAO;AACL,kBAAI,MAAM,OAAO;AACf,oBAAI,UAAU,IAAI,IAAI;AACtB,sBAAM,UAAU;AAAA,cAClB;AAAA,YACF;AACA,gBAAI,MAAM,QAAQ;AAChB,qBAAO,yBAAyB,OAAO,QAAQ,MAAM,SAAS;AAAA,YAChE;AACA,gBAAI,MAAM,SAAS,MAAM,KAAK;AAC5B,qBAAO,MAAM,OAAO;AAAA,YACtB,WAAW,MAAM,OAAO;AACtB,qBAAO,MAAM;AAAA,YACf,WAAW,MAAM,KAAK;AACpB,qBAAO,OAAO;AAAA,YAChB,OAAO;AACL,qBAAO;AAAA,YACT;AACA,gBAAI,CAAC,MAAM,KAAK;AACd,kBAAI,KAAK,GAAG;AAAA,YACd,OAAO;AACL,kBAAI,KAAK,MAAM,QAAQ,OAAO,KAAK,KAAK;AACxC,0BAAY;AAAA,YACd;AAAA,UACF;AACA;AAAA,QACF,KAAK;AACH,cAAI,WAAW;AACb,gBAAI,OAAO,IAAI,IAAI;AACnB,gBAAI,KAAK,OAAO,MAAM;AACtB,wBAAY;AAAA,UACd;AACA,cAAI,KAAK,QAAQ,MAAM,OAAO,MAAM,QAAQ,SAAS,OAAO,GAAG;AAC/D;AAAA,MACJ;AAAA,IACF;AACA,QAAI,WAAW;AACb,UAAI,UAAU,IAAI,IAAI;AACtB,UAAI,KAAK,UAAU,IAAI;AAAA,IACzB;AACA,WAAO,IAAI,KAAK,EAAE;AAAA,EACpB;AAAA,EACA,SAAS,WAAW;AAClB,SAAK,QAAQ,CAAC,eAAe;AAAA,EAC/B;AAAA,EACA,YAAY,CAAC;AACf;;;ACrIA,IAAO,+BAAQ;AAAA,EACb,OAAO,CAAC,sBAAsB;AAAA,EAC9B,QAAQ,SAAS,SAAS,UAAU,SAAS,MAAM,SAAS;AAC1D,QAAI,MAAM,CAAC;AACX,QAAI,KAAK,QAAQ,MAAM,UAAU,KAAK;AACtC,QAAI,KAAK,QAAQ,eAAe,GAAG;AACnC,WAAO,IAAI,KAAK,EAAE;AAAA,EACpB;AAAA,EACA,SAAS,WAAW;AAClB,SAAK,QAAQ,CAAC,sBAAsB;AAAA,EACtC;AAAA,EACA,YAAY,CAAC;AACf;;;ACZA,IAAO,uBAAQ;AAAA,EACb,OAAO,CAAC,cAAc;AAAA,EACtB,QAAQ,SAAS,SAAS,UAAU,SAAS,MAAM,SAAS;AAC1D,QAAI,MAAM,CAAC;AACX,QAAI,KAAK,sBAAsB,QAAQ,SAAS,MAAM,IAAI,GAAG;AAC7D,WAAO,IAAI,KAAK,EAAE;AAAA,EACpB;AAAA,EACA,SAAS,WAAW;AAClB,SAAK,QAAQ,CAAC,cAAc;AAC5B,SAAK,UAAU,CAAC;AAChB,SAAK,QAAQ,MAAM,IAAI;AACvB,SAAK,QAAQ,OAAO,kBAAkB;AAAA,EACxC;AAAA,EACA,YAAY;AAAA,IACV,oBAAoB;AAAA,IACpB,QAAQ;AAAA,EACV;AACF;;;ACjBA,IAAO,wBAAQ;AAAA,EACb,OAAO,CAAC,eAAe;AAAA,EACvB,QAAQ,SAAS,SAAS,UAAU,SAAS,MAAM,SAAS;AAC1D,QAAI,MAAM,CAAC;AACX,QAAI,KAAK,oBAAoB,QAAQ,SAAS,MAAM,IAAI,GAAG;AAC3D,WAAO,IAAI,KAAK,EAAE;AAAA,EACpB;AAAA,EACA,SAAS,WAAW;AAClB,SAAK,QAAQ,CAAC,eAAe;AAC7B,SAAK,UAAU,CAAC;AAChB,SAAK,QAAQ,MAAM,IAAI;AACvB,SAAK,QAAQ,OAAO,kBAAkB;AAAA,EACxC;AAAA,EACA,YAAY;AAAA,IACV,oBAAoB;AAAA,IACpB,QAAQ;AAAA,EACV;AACF;;;ACjBA,IAAO,2BAAQ;AAAA,EACb,OAAO,CAAC,kBAAkB;AAAA,EAC1B,QAAQ,SAAS,SAAS,UAAU,SAAS,MAAM,SAAS;AAC1D,aAAS,QAAQ,WAAW,KAAK;AAC/B,UAAI,QAAQ,UAAU,QAAQ;AAC5B,cAAM;AACR,aAAO,SAAS,WAAW,KAAK,SAAS,SAAS,IAAI;AAAA,IACxD;AACA,QAAI,MAAM,CAAC;AACX,UAAM,EAAE,YAAAC,YAAW,IAAI;AACvB,QAAI,KAAK,GAAG;AACZ,QAAIA,YAAW,QAAQ;AACrB,UAAI,KAAK,IAAI;AACb,UAAI,KAAK,aAAa,KAAK,UAAUA,YAAW,MAAM,IAAI,GAAG;AAAA,IAC/D;AACA,QAAIA,YAAW,OAAO;AACpB,UAAI,KAAK,IAAI;AACb,UAAI,KAAK,YAAY,KAAK,UAAUA,YAAW,KAAK,IAAI,GAAG;AAAA,IAC7D;AACA,QAAI,KAAK,IAAI;AACb,QAAI,KAAK,IAAI;AACb,QAAI,KAAK,uBAAuBA,YAAW,UAAU,wCAAwC;AAC7F,QAAI,KAAK,QAAQ,YAAY,QAAQ,eAAeA,WAAU,GAAG,MAAM,IAAI,IAAI;AAC/E,QAAI,KAAK,oBAAoB;AAC7B,QAAI,KAAK,QAAQ,YAAY,QAAQ,gBAAgBA,WAAU,GAAG,MAAM,IAAI,IAAI;AAChF,QAAI,KAAK,QAAQ,YAAY,QAAQ,QAAQ,MAAM,WAAW,GAAG,MAAM,IAAI,IAAI;AAC/E,QAAI,KAAK,QAAQ,YAAY,QAAQ,iBAAiBA,WAAU,GAAG,MAAM,CAAC;AAC1E,QAAIA,YAAW,QAAQ;AACrB,UAAI,KAAK,IAAI;AACb,UAAI,KAAK,8CAA8C;AACvD,UAAI,KAAK,iCAAiC;AAC1C,UAAI,KAAK,wBAAwB;AACjC,UAAI,KAAK,sBAAsB;AAC/B,UAAIA,YAAW,UAAU;AACvB,YAAI,KAAK,yBAAyB;AAAA,MACpC;AACA,UAAI,KAAK,IAAI;AACb,UAAI,KAAK,4CAA4C;AACrD,UAAI,KAAK,0CAA0C;AACnD,UAAI,KAAK,+BAA+B;AACxC,UAAIA,YAAW,UAAU;AACvB,YAAI,KAAK,GAAG;AAAA,MACd;AACA,UAAI,KAAK,IAAI;AACb,UAAI,KAAK,eAAe;AACxB,UAAI,KAAK,aAAa;AACtB,UAAI,KAAK,WAAW;AACpB,UAAI,KAAK,gBAAgB;AACzB,UAAI,KAAK,eAAe;AACxB,UAAIA,YAAW,UAAU;AACvB,YAAI,KAAK,yBAAyB;AAAA,MACpC;AACA,UAAI,KAAK,KAAK;AACd,UAAIA,YAAW,UAAU;AACvB,YAAI,KAAK,GAAG;AAAA,MACd;AACA,UAAI,KAAK,aAAa;AACtB,UAAI,KAAK,OAAO;AAAA,IAClB,OAAO;AACL,UAAI,KAAK,IAAI;AACb,UAAI,KAAK,eAAe;AACxB,UAAIA,YAAW,UAAU;AACvB,YAAI,KAAK,yBAAyB;AAAA,MACpC;AACA,UAAI,KAAK,KAAK;AACd,UAAIA,YAAW,UAAU;AACvB,YAAI,KAAK,GAAG;AAAA,MACd;AACA,UAAI,KAAK,WAAW;AAAA,IACtB;AACA,QAAI,KAAK,IAAI;AACb,QAAI,KAAK,MAAM;AACf,UAAM,aAAa,OAAO,KAAK,QAAQ,MAAM;AAC7C,QAAI,WAAW,SAAS,GAAG;AACzB,UAAI,KAAK,IAAI;AACb,UAAI,KAAK,cAAc;AACvB,eAAS,KAAK,GAAG,KAAK,WAAW,QAAQ,MAAM,GAAG;AAChD,cAAM,QAAQ,QAAQ,OAAO,WAAW,EAAE,CAAC;AAC3C,YAAI,KAAK,IAAI;AACb,YAAI,KAAK,UAAU,WAAW,EAAE,IAAI,iBAAiB,MAAM,WAAW,UAAU,0CAA0C;AAC1H,YAAI,KAAK,QAAQ,YAAY,QAAQ,eAAe,MAAM,UAAU,GAAG,QAAQ,IAAI,IAAI;AACvF,YAAI,KAAK,sBAAsB;AAC/B,YAAI,KAAK,QAAQ,YAAY,QAAQ,MAAM,MAAM,WAAW,GAAG,QAAQ,CAAC;AACxE,YAAIA,YAAW,QAAQ;AACrB,cAAI,KAAK,IAAI;AACb,cAAI,KAAK,gDAAgD;AACzD,cAAI,KAAK,mCAAmC;AAC5C,cAAI,KAAK,0BAA0B;AACnC,cAAI,KAAK,wBAAwB;AACjC,cAAIA,YAAW,UAAU;AACvB,gBAAI,KAAK,yBAAyB;AAAA,UACpC;AACA,cAAI,KAAK,IAAI;AACb,cAAI,KAAK,8CAA8C;AACvD,cAAI,KAAK,4CAA4C;AACrD,cAAI,KAAK,iCAAiC;AAC1C,cAAIA,YAAW,UAAU;AACvB,gBAAI,KAAK,GAAG;AAAA,UACd;AACA,cAAI,KAAK,IAAI;AACb,cAAI,KAAK,iBAAiB;AAC1B,cAAI,KAAK,eAAe;AACxB,cAAI,KAAK,aAAa;AACtB,cAAI,KAAK,kBAAkB;AAC3B,cAAI,KAAK,iBAAiB;AAC1B,cAAIA,YAAW,UAAU;AACvB,gBAAI,KAAK,yBAAyB;AAAA,UACpC;AACA,cAAI,KAAK,KAAK;AACd,cAAIA,YAAW,UAAU;AACvB,gBAAI,KAAK,GAAG;AAAA,UACd;AACA,cAAI,KAAK,aAAa;AACtB,cAAI,KAAK,SAAS;AAAA,QACpB,OAAO;AACL,cAAI,KAAK,IAAI;AACb,cAAI,KAAK,iBAAiB;AAC1B,cAAIA,YAAW,UAAU;AACvB,gBAAI,KAAK,yBAAyB;AAAA,UACpC;AACA,cAAI,KAAK,KAAK;AACd,cAAIA,YAAW,UAAU;AACvB,gBAAI,KAAK,GAAG;AAAA,UACd;AACA,cAAI,KAAK,WAAW;AAAA,QACtB;AACA,YAAI,KAAK,IAAI;AACb,YAAI,KAAK,QAAQ;AAAA,MACnB;AACA,UAAI,KAAK,IAAI;AACb,UAAI,KAAK,MAAM;AAAA,IACjB;AACA,UAAM,YAAY,OAAO,KAAK,QAAQ,KAAK;AAC3C,QAAI,UAAU,SAAS,GAAG;AACxB,UAAI,KAAK,IAAI;AACb,UAAI,KAAK,aAAa;AACtB,eAAS,KAAK,GAAG,KAAK,UAAU,QAAQ,MAAM,GAAG;AAC/C,cAAM,QAAQ,QAAQ,OAAO,UAAU,EAAE,CAAC;AAC1C,YAAI,KAAK,IAAI;AACb,YAAI,KAAK,UAAU,UAAU,EAAE,IAAI,iBAAiB,MAAM,WAAW,UAAU,yCAAyC;AACxH,YAAI,KAAK,QAAQ,YAAY,QAAQ,eAAe,MAAM,UAAU,GAAG,QAAQ,IAAI,IAAI;AACvF,YAAI,KAAK,sBAAsB;AAC/B,YAAI,KAAK,QAAQ,YAAY,QAAQ,MAAM,MAAM,WAAW,GAAG,QAAQ,CAAC;AACxE,YAAIA,YAAW,QAAQ;AACrB,cAAI,KAAK,IAAI;AACb,cAAI,KAAK,gDAAgD;AACzD,cAAI,KAAK,mCAAmC;AAC5C,cAAI,KAAK,0BAA0B;AACnC,cAAI,KAAK,wBAAwB;AACjC,cAAIA,YAAW,UAAU;AACvB,gBAAI,KAAK,yBAAyB;AAAA,UACpC;AACA,cAAI,KAAK,IAAI;AACb,cAAI,KAAK,8CAA8C;AACvD,cAAI,KAAK,4CAA4C;AACrD,cAAI,KAAK,iCAAiC;AAC1C,cAAIA,YAAW,UAAU;AACvB,gBAAI,KAAK,GAAG;AAAA,UACd;AACA,cAAI,KAAK,IAAI;AACb,cAAI,KAAK,iBAAiB;AAC1B,cAAI,KAAK,eAAe;AACxB,cAAI,KAAK,aAAa;AACtB,cAAI,KAAK,kBAAkB;AAC3B,cAAI,KAAK,iBAAiB;AAC1B,cAAIA,YAAW,UAAU;AACvB,gBAAI,KAAK,yBAAyB;AAAA,UACpC;AACA,cAAI,KAAK,KAAK;AACd,cAAIA,YAAW,UAAU;AACvB,gBAAI,KAAK,GAAG;AAAA,UACd;AACA,cAAI,KAAK,aAAa;AACtB,cAAI,KAAK,SAAS;AAAA,QACpB,OAAO;AACL,cAAI,KAAK,IAAI;AACb,cAAI,KAAK,iBAAiB;AAC1B,cAAIA,YAAW,UAAU;AACvB,gBAAI,KAAK,yBAAyB;AAAA,UACpC;AACA,cAAI,KAAK,KAAK;AACd,cAAIA,YAAW,UAAU;AACvB,gBAAI,KAAK,GAAG;AAAA,UACd;AACA,cAAI,KAAK,WAAW;AAAA,QACtB;AACA,YAAI,KAAK,IAAI;AACb,YAAI,KAAK,QAAQ;AAAA,MACnB;AACA,UAAI,KAAK,IAAI;AACb,UAAI,KAAK,MAAM;AAAA,IACjB;AACA,QAAI,KAAK,IAAI;AACb,QAAI,KAAK,yBAAyB;AAClC,QAAIA,YAAW,OAAO;AACpB,UAAI,KAAK,IAAI;AACb,UAAI,KAAK,sBAAsB,KAAK,UAAUA,YAAW,KAAK,CAAC;AAAA,IACjE;AACA,QAAIA,YAAW,UAAU,SAAS,GAAG;AACnC,UAAI,KAAK,IAAI;AACb,UAAI,KAAK,qBAAqB;AAC9B,UAAI;AACJ,eAAS,IAAI,GAAG,MAAMA,YAAW,UAAU,QAAQ,IAAI,KAAK,KAAK;AAC/D,aAAKA,YAAW,UAAU,CAAC;AAC3B,YAAI,KAAK,IAAI;AACb,YAAI,KAAK,uBAAuB,GAAG,QAAQ,WAAW,GAAG,OAAO,KAAK;AACrE,YAAI,KAAK,8BAA8B,GAAG,OAAO,IAAI;AAAA,MACvD;AAAA,IACF;AACA,QAAIA,YAAW,QAAQ;AACrB,UAAI,KAAK,IAAI;AACb,UAAI,KAAK,uBAAuB,KAAK,UAAUA,YAAW,MAAM,IAAI,IAAI;AACxE,UAAI,KAAK,wDAAwD;AAAA,IACnE;AACA,QAAI,KAAK,IAAI;AACb,QAAI,KAAK,QAAQ;AACjB,QAAI,KAAK,iBAAiB;AAC1B,QAAIA,YAAW,QAAQ;AACrB,UAAI,KAAK,IAAI;AACb,UAAI,KAAK,QAAQ,YAAY,KAAK,UAAUA,YAAW,MAAM,GAAG,MAAM,IAAI,SAAS;AAAA,IACrF;AACA,QAAIA,YAAW,UAAU,SAAS,GAAG;AACnC,eAAS,IAAI,GAAG,MAAMA,YAAW,UAAU,QAAQ,IAAI,KAAK,KAAK;AAC/D,aAAKA,YAAW,UAAU,CAAC;AAC3B,YAAI,KAAK,IAAI;AACb,YAAI,KAAK,UAAU,GAAG,OAAO,YAAY;AACzC,YAAI,KAAK,UAAU,GAAG,QAAQ,UAAU;AAAA,MAC1C;AAAA,IACF;AACA,QAAI,KAAK,IAAI;AACb,QAAI,KAAK,OAAO;AAChB,QAAI,KAAK,GAAG;AACZ,WAAO,IAAI,KAAK,EAAE;AAAA,EACpB;AAAA,EACA,QAAQ;AAAA,IACN,eAAe,SAASA,aAAY,UAAU,SAAS,MAAM,SAAS;AACpE,UAAI,MAAM,CAAC;AACX,UAAIA,aAAY,SAAS;AACvB,YAAI,KAAK,sCAAsC;AAC/C,YAAI,KAAK,mDAAmDA,YAAW,UAAU,IAAI;AACrF,YAAI,KAAK,6DAA6D;AACtE,YAAI,KAAK,GAAG;AAAA,MACd;AACA,UAAI,KAAK,EAAE;AACX,aAAO,IAAI,KAAK,EAAE;AAAA,IACpB;AAAA,IACA,gBAAgB,SAASA,aAAY,UAAU,SAAS,MAAM,SAAS;AACrE,UAAI,MAAM,CAAC;AACX,UAAIA,YAAW,QAAQ;AACrB,YAAI,KAAK,IAAI;AACb,YAAI,KAAK,4BAA4B;AACrC,YAAI,KAAK,uCAAuC;AAChD,YAAI,KAAK,4CAA4C;AACrD,YAAI,KAAK,gCAAgC;AACzC,YAAI,KAAK,6BAA6B;AACtC,YAAI,KAAK,wCAAwC;AACjD,YAAI,KAAK,UAAU;AACnB,YAAI,KAAK,iBAAiB;AAC1B,YAAI,KAAK,cAAc;AACvB,YAAI,KAAK,qBAAqB;AAC9B,YAAI,KAAK,OAAO;AAChB,YAAI,KAAK,KAAK;AACd,YAAI,KAAK,mBAAmBA,YAAW,SAAS,KAAK;AACrD,YAAI,KAAK,sBAAsB;AAC/B,YAAI,KAAK,4BAA4B;AACrC,YAAI,KAAK,cAAc;AACvB,YAAI,KAAK,IAAI;AACb,YAAI,KAAK,yCAAyC;AAClD,YAAI,KAAK,oBAAoB;AAC7B,YAAI,KAAK,mBAAmB;AAC5B,YAAI,KAAK,OAAO;AAChB,YAAI,KAAK,yCAAyC;AAClD,YAAI,KAAK,6CAA6C;AACtD,YAAI,KAAK,OAAO;AAChB,YAAI,KAAK,KAAK;AACd,YAAI,KAAK,+BAA+B;AACxC,YAAI,KAAK,uBAAuB;AAChC,YAAI,KAAK,gBAAgB;AACzB,YAAI,KAAK,oBAAoB;AAC7B,YAAI,KAAK,cAAc;AACvB,YAAI,KAAK,KAAK;AACd,YAAI,KAAK,yBAAyB;AAClC,YAAI,KAAK,kCAAkC;AAC3C,YAAI,KAAK,cAAc;AACvB,YAAI,KAAK,sCAAsC;AAC/C,YAAI,KAAK,KAAK;AACd,YAAI,KAAK,kBAAkB;AAAA,MAC7B;AACA,UAAI,KAAK,EAAE;AACX,aAAO,IAAI,KAAK,EAAE;AAAA,IACpB;AAAA,IACA,iBAAiB,SAASA,aAAY,UAAU,SAAS,MAAM,SAAS;AACtE,UAAI,MAAM,CAAC;AACX,UAAIA,YAAW,QAAQ;AACrB,YAAI,KAAK,IAAI;AACb,YAAI,KAAK,gBAAgB;AACzB,YAAI,CAACA,YAAW,SAAS;AACvB,cAAI,KAAK,IAAI;AACb,cAAI,KAAK,+BAA+B;AACxC,cAAI,CAACA,YAAW,kBAAkB;AAChC,gBAAI,KAAK,IAAI;AACb,gBAAI,KAAK,+BAA+BA,YAAW,SAAS,IAAI;AAAA,UAClE;AACA,cAAI,KAAK,IAAI;AACb,cAAI,KAAK,6DAA6D;AAAA,QACxE,OAAO;AACL,cAAI,KAAK,IAAI;AACb,cAAI,KAAK,kBAAkB;AAC3B,cAAI,CAACA,YAAW,kBAAkB;AAChC,gBAAI,KAAK,IAAI;AACb,gBAAI,KAAK,qBAAqBA,YAAW,SAAS,IAAI;AAAA,UACxD;AAAA,QACF;AAAA,MACF;AACA,UAAI,KAAK,EAAE;AACX,aAAO,IAAI,KAAK,EAAE;AAAA,IACpB;AAAA,EACF;AAAA,EACA,SAAS,WAAW;AAClB,SAAK,QAAQ,CAAC,kBAAkB;AAChC,SAAK,UAAU,CAAC;AAChB,SAAK,QAAQ,WAAW,IAAI;AAC5B,SAAK,QAAQ,OAAO,eAAe;AAAA,EACrC;AAAA,EACA,YAAY;AAAA,IACV,iBAAiB;AAAA,IACjB,aAAa;AAAA,EACf;AACF;;;ACxUA,IAAO,kBAAQ;AAAA,EACb,OAAO,CAAC,SAAS;AAAA,EACjB,QAAQ,SAAS,SAAS,UAAU,SAAS,MAAM,SAAS;AAC1D,QAAI,MAAM,CAAC;AACX,QAAI,KAAK,gBAAgB;AACzB,QAAI,KAAK,cAAc,QAAQ,SAAS,MAAM,IAAI,KAAK;AACvD,QAAI,KAAK,OAAO;AAChB,WAAO,IAAI,KAAK,EAAE;AAAA,EACpB;AAAA,EACA,SAAS,WAAW;AAClB,SAAK,QAAQ,CAAC,SAAS;AACvB,SAAK,UAAU,CAAC;AAChB,SAAK,QAAQ,MAAM,IAAI;AACvB,SAAK,QAAQ,OAAO,kBAAkB;AAAA,EACxC;AAAA,EACA,YAAY;AAAA,IACV,oBAAoB;AAAA,IACpB,QAAQ;AAAA,EACV;AACF;;;ACnBA,IAAO,6BAAQ;AAAA,EACb,OAAO,CAAC,oBAAoB;AAAA,EAC5B,QAAQ,SAAS,OAAO,UAAU,SAAS,MAAM,SAAS;AACxD,QAAI,MAAM,CAAC;AACX,QAAI,KAAK,0DAA0D;AACnE,QAAI,KAAK,IAAI;AACb,QAAI,KAAK,4BAA4B;AACrC,UAAM,QAAQ,CAAC,SAAS;AACtB,UAAI,KAAK,IAAI;AACb,UAAI,KAAK,UAAU,KAAK,SAAS,SAAS,KAAK,QAAQ,SAAS,QAAQ,KAAK,UAAU,MAAM,IAAI,GAAG;AAAA,IACtG,CAAC;AACD,QAAI,KAAK,IAAI;AACb,QAAI,KAAK,KAAK;AACd,QAAI,KAAK,IAAI;AACb,QAAI,KAAK,oCAAoC;AAC7C,QAAI,KAAK,IAAI;AACb,QAAI,KAAK,yCAAyC;AAClD,QAAI,KAAK,iCAAiC;AAC1C,QAAI,KAAK,KAAK;AACd,QAAI,KAAK,EAAE;AACX,WAAO,IAAI,KAAK,EAAE;AAAA,EACpB;AAAA,EACA,SAAS,WAAW;AAClB,SAAK,QAAQ,CAAC,oBAAoB;AAClC,SAAK,UAAU,CAAC;AAChB,SAAK,QAAQ,MAAM,IAAI;AACvB,SAAK,QAAQ,OAAO,kBAAkB;AAAA,EACxC;AAAA,EACA,YAAY;AAAA,IACV,oBAAoB;AAAA,IACpB,QAAQ;AAAA,EACV;AACF;;;AChCA,IAAO,yBAAQ;AAAA,EACb,OAAO,CAAC,gBAAgB;AAAA,EACxB,QAAQ,SAAS,OAAO,UAAU,SAAS,MAAM,SAAS;AACxD,QAAI,MAAM,CAAC;AACX,QAAI,KAAK,+DAA+D;AACxE,QAAI,KAAK,IAAI;AACb,QAAI,KAAK,qBAAqB;AAC9B,UAAM,QAAQ,CAAC,SAAS;AACtB,UAAI,KAAK,IAAI;AACb,UAAI,KAAK,UAAU,KAAK,SAAS,SAAS,KAAK,QAAQ,SAAS,QAAQ,KAAK,UAAU,MAAM,IAAI,GAAG;AAAA,IACtG,CAAC;AACD,QAAI,KAAK,IAAI;AACb,QAAI,KAAK,KAAK;AACd,QAAI,KAAK,IAAI;AACb,QAAI,KAAK,iCAAiC;AAC1C,QAAI,KAAK,oCAAoC;AAC7C,QAAI,KAAK,IAAI;AACb,QAAI,KAAK,gCAAgC;AACzC,QAAI,KAAK,mCAAmC;AAC5C,QAAI,KAAK,KAAK;AACd,QAAI,KAAK,IAAI;AACb,QAAI,KAAK,mBAAmB;AAC5B,WAAO,IAAI,KAAK,EAAE;AAAA,EACpB;AAAA,EACA,SAAS,WAAW;AAClB,SAAK,QAAQ,CAAC,gBAAgB;AAC9B,SAAK,UAAU,CAAC;AAChB,SAAK,QAAQ,MAAM,IAAI;AACvB,SAAK,QAAQ,OAAO,kBAAkB;AAAA,EACxC;AAAA,EACA,YAAY;AAAA,IACV,oBAAoB;AAAA,IACpB,QAAQ;AAAA,EACV;AACF;;;AClCA,IAAO,6BAAQ;AAAA,EACb,OAAO,CAAC,oBAAoB;AAAA,EAC5B,QAAQ,SAAS,OAAO,UAAU,SAAS,MAAM,SAAS;AACxD,QAAI,MAAM,CAAC;AACX,QAAI,KAAK,wDAAwD;AACjE,aAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK,GAAG;AACxC,UAAI,KAAK,IAAI;AACb,UAAI,KAAK,cAAc,MAAM,CAAC,EAAE,KAAK,WAAW,WAAW,GAAG,IAAI,YAAY,MAAM,CAAC,EAAE,OAAO,GAAG;AAAA,IACnG;AACA,QAAI,KAAK,IAAI;AACb,QAAI,KAAK,IAAI;AACb,QAAI,KAAK,qBAAqB;AAC9B,aAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK,GAAG;AACxC,UAAI,KAAK,IAAI;AACb,UAAI,KAAK,QAAQ,MAAM,CAAC,EAAE,OAAO,QAAQ,MAAM,CAAC,EAAE,KAAK,WAAW,WAAW,GAAG,IAAI,GAAG;AAAA,IACzF;AACA,QAAI,KAAK,IAAI;AACb,QAAI,KAAK,KAAK;AACd,QAAI,KAAK,IAAI;AACb,QAAI,KAAK,oCAAoC;AAC7C,QAAI,KAAK,IAAI;AACb,QAAI,KAAK,yCAAyC;AAClD,QAAI,KAAK,mCAAmC;AAC5C,QAAI,KAAK,GAAG;AACZ,WAAO,IAAI,KAAK,EAAE;AAAA,EACpB;AAAA,EACA,SAAS,WAAW;AAClB,SAAK,QAAQ,CAAC,oBAAoB;AAAA,EACpC;AAAA,EACA,YAAY,CAAC;AACf;;;AC9BA,IAAO,mCAAQ;AAAA,EACb,OAAO,CAAC,0BAA0B;AAAA,EAClC,QAAQ,SAAS,OAAO,UAAU,SAAS,MAAM,SAAS;AACxD,QAAI,MAAM,CAAC;AACX,aAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK,GAAG;AACxC,UAAI,KAAK,IAAI;AACb,UAAI,KAAK,cAAc,MAAM,CAAC,EAAE,KAAK,WAAW,WAAW,GAAG,IAAI,YAAY,MAAM,CAAC,EAAE,OAAO,GAAG;AAAA,IACnG;AACA,QAAI,KAAK,IAAI;AACb,QAAI,KAAK,IAAI;AACb,QAAI,KAAK,qBAAqB;AAC9B,aAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK,GAAG;AACxC,UAAI,KAAK,IAAI;AACb,UAAI,KAAK,QAAQ,MAAM,CAAC,EAAE,OAAO,QAAQ,MAAM,CAAC,EAAE,KAAK,WAAW,WAAW,GAAG,IAAI,GAAG;AAAA,IACzF;AACA,QAAI,KAAK,IAAI;AACb,QAAI,KAAK,KAAK;AACd,QAAI,KAAK,0BAA0B;AACnC,WAAO,IAAI,KAAK,EAAE;AAAA,EACpB;AAAA,EACA,SAAS,WAAW;AAClB,SAAK,QAAQ,CAAC,0BAA0B;AAAA,EAC1C;AAAA,EACA,YAAY,CAAC;AACf;;;ACxBA,IAAO,+BAAQ;AAAA,EACb,OAAO,CAAC,sBAAsB;AAAA,EAC9B,QAAQ,SAAS,OAAO,UAAU,SAAS,MAAM,SAAS;AACxD,QAAI,MAAM,CAAC;AACX,QAAI,KAAK,qBAAqB;AAC9B,aAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK,GAAG;AACxC,UAAI,KAAK,IAAI;AACb,UAAI,KAAK,QAAQ,MAAM,CAAC,EAAE,OAAO,iBAAiB,MAAM,CAAC,EAAE,OAAO,KAAK;AAAA,IACzE;AACA,QAAI,KAAK,IAAI;AACb,QAAI,KAAK,KAAK;AACd,QAAI,KAAK,4BAA4B;AACrC,WAAO,IAAI,KAAK,EAAE;AAAA,EACpB;AAAA,EACA,SAAS,WAAW;AAClB,SAAK,QAAQ,CAAC,sBAAsB;AAAA,EACtC;AAAA,EACA,YAAY,CAAC;AACf;;;AClBA,IAAO,yBAAQ;AAAA,EACb,OAAO,CAAC,gBAAgB;AAAA,EACxB,QAAQ,SAAS,OAAO,UAAU,SAAS,MAAM,SAAS;AACxD,QAAI,MAAM,CAAC;AACX,QAAI,KAAK,+DAA+D;AACxE,QAAI,KAAK,IAAI;AACb,QAAI,KAAK,qBAAqB;AAC9B,aAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK,GAAG;AACxC,UAAI,KAAK,IAAI;AACb,UAAI,KAAK,QAAQ,MAAM,CAAC,EAAE,OAAO,iBAAiB,MAAM,CAAC,EAAE,OAAO,KAAK;AAAA,IACzE;AACA,QAAI,KAAK,IAAI;AACb,QAAI,KAAK,KAAK;AACd,QAAI,KAAK,IAAI;AACb,QAAI,KAAK,oCAAoC;AAC7C,QAAI,KAAK,IAAI;AACb,QAAI,KAAK,yCAAyC;AAClD,QAAI,KAAK,mCAAmC;AAC5C,QAAI,KAAK,GAAG;AACZ,WAAO,IAAI,KAAK,EAAE;AAAA,EACpB;AAAA,EACA,SAAS,WAAW;AAClB,SAAK,QAAQ,CAAC,gBAAgB;AAAA,EAChC;AAAA,EACA,YAAY,CAAC;AACf;;;ACbA,IAAM,YAAY;AAAA,EAChB,iBAAiB;AAAA,EACjB,wBAAwB;AAAA,EACxB,gBAAgB;AAAA,EAChB,iBAAiB;AAAA,EACjB,oBAAoB;AAAA,EACpB,WAAW;AAAA,EACX,sBAAsB;AAAA,EACtB,kBAAkB;AAAA,EAClB,sBAAsB;AAAA,EACtB,4BAA4B;AAAA,EAC5B,wBAAwB;AAAA,EACxB,kBAAkB;AACpB;AACA,IAAO,oBAAQ;;;ACvBR,IAAM,kBAAN,cAEG,aAAgB;AAAA,EACR,UAAU;AACxB,QAAI,KAAK,QAAQ;AACf,WAAK,YAAY,KAAK,QAAQ,OAAO,KAAK,MAAM,CAAC;AAAA,IACnD;AAAA,EACF;AACF;;;ACIO,IAAM,wBAA8C;AAAA,EACzD;AAAA,EACA;AAAA,EACA;AACF;AAaO,IAAe,sBAAf,MAAmE;AAAA,EAOxE,YAAY,SAA2B,CAAC,GAAG;AAN3C,SAAO,MAAqB,CAAC;AAE7B,SAAO,OAAO;AAEd,SAAO,QAAQ;AAGb,WAAO,UAAU,EAAE,GAAG,OAAO,SAAS,GAAG,sBAAsB;AAC/D,SAAK,UAAU,OAAO;AACtB,SAAK,QAAQ,UAAU,OAAO;AAC9B,QAAI,CAAC,QAAQ,SAAS;AAEpB,WAAK,OAAO,SACR,OAAO,OACL,MAAM,QAAQ,OAAO,IAAI,IACvB,OAAO,OACP,CAAC,OAAO,IAAI,IACd,CAAC,QAAQ,IAAI,CAAC,IAChB,CAAC,QAAQ,IAAI,CAAC;AAElB,UAAI,UAAU,OAAO,KAAK;AACxB,YAAI,MAAM,QAAQ,OAAO,GAAG,GAAG;AAC7B,eAAK,MAAM,OAAO;AAAA,QACpB,OAAO;AACL,eAAK,MAAM,CAAC,OAAO,GAAG;AAAA,QACxB;AAAA,MACF;AAAA,IACF;AACA,SAAK,QAAQ,CAAC;AACd,QAAI,UAAU,OAAO,SAAS;AAC5B,WAAK,QAAQ;AAAA,IACf;AAAA,EACF;AAAA,EACO,SAAS,KAAsB,UAAmB;AACvD,QAAI,EAAE,IAAI,QAAQ,KAAK,QAAQ;AAC7B,WAAK,MAAM,IAAI,IAAI,IAAI;AACvB,UAAI,IAAI,SAAS,MAAM,QAAQ,IAAI,KAAK,GAAG;AACzC,YAAI,MACD,OAAO,CAAC,MAAM,MAAM,IAAI,IAAI,EAC5B,QAAQ,CAAC,MAAM;AACd,eAAK,MAAM,CAAC,IAAI;AAAA,QAClB,CAAC;AAAA,MACL;AACA,WAAK,MAAM,IAAI,OAAO,IAAI;AAAA,IAC5B;AACA,WAAO;AAAA,EACT;AAAA,EAEO,OAAO,UAAkB,SAAoC;AAClE,QAAI,EAAE,YAAY,KAAK,QAAQ;AAC7B,aAAO,KAAK,KAAK,UAAU,OAAO;AAAA,IACpC;AACA,WAAO,KAAK,MAAM,QAAQ;AAAA,EAC5B;AAAA,EACO,aACL,KACA,OACiB;AACjB,UAAM,UAAsC,CAAC;AAC7C,UAAM,OAAO;AACb,UAAM,KAAsB;AAAA,MAC1B,OAAO,QAAQ,QAAQ,CAAC;AAAA,MACxB,KAAK,MAAc,SAAgD;AACjE,YAAI,MAAM;AACR,cAAI,CAAC,KAAK,MAAM,eAAe,IAAI,GAAG;AACpC,iBAAK,MAAM,IAAI,IAAI,CAAC;AAAA,UACtB;AACA,cAAI,SAAS;AACX,gBAAI,MAAM,QAAQ,OAAO,GAAG;AAC1B,sBAAQ,QAAQ,CAAC,MAAM,KAAK,KAAK,MAAM,CAAC,CAAC;AAAA,YAC3C,OAAO;AACL,kBAAI,KAAK,MAAM,IAAI,EAAE,QAAQ,OAAO,MAAM,IAAI;AAC5C,qBAAK,MAAM,IAAI,EAAE,KAAK,OAAO;AAAA,cAC/B;AAAA,YACF;AAAA,UACF,OAAO;AACL,mBAAO,sBAAsB,kBAAkB;AAAA,UACjD;AAAA,QACF;AAAA,MACF;AAAA,MACA,QAAQ,KAAe,MAAsB;AAC3C,YAAI,IAAI,QAAQ,eAAe,IAAI,GAAG;AACpC,iBAAO,KAAK,WAAW;AAAA,YACrB,SAAS;AAAA,YACT,MAAM,IAAI,QAAQ,IAAI;AAAA,YACtB,SAAS;AAAA,YACT,OAAO,KAAK;AAAA,YACZ,SAAS,KAAK;AAAA,UAChB,CAAC;AAAA,QACH,OAAO;AACL,iBAAO,KAAK,WAAW;AAAA,YACrB,SAAS;AAAA,YACT;AAAA,YACA,SAAS;AAAA,YACT,OAAO,KAAK;AAAA,YACZ,SAAS,KAAK;AAAA,UAChB,CAAC;AAAA,QACH;AAAA,MACF;AAAA,MACA,QACE,MACA,SACA,SACA,SACA,MACA;AACA,YAAI,MAAM;AACR,iBAAO,IAAI,UAAU,IAAI,OAAO,eAAe,IAAI,IAC/C,IAAI,OAAO,IAAI,EAAE,SAAS,SAAS,SAAS,MAAM,KAAK,OAAO,IAC9D;AAAA,QACN,OAAO;AACL,gBAAM,KAAK,QAAQ,IAAI;AACvB,cAAI,OAAO,OAAO,YAAY;AAC5B,mBAAO,GAAG,SAAS,SAAS,SAAS,MAAM,KAAK,OAAO;AAAA,UACzD,OAAO;AACL,mBAAO;AAAA,UACT;AAAA,QACF;AAAA,MACF;AAAA,MACA,IACE,UACA,UACA,UACQ;AACR,iBAAS,GAEP,SACA,SACA,SACA,MACmD;AACnD,gBAAM,QAAQ;AACd,cAAI,MAAM,QAAQ;AAChB,kBAAM,SAAS,KAAK,OAAO,MAAM,MAAM;AAEvC,oBAAQ,KAAK,MAAM,MAAM;AACzB,mBAAO,GAAG,KAAK,QAAQ,SAAS,SAAS,SAAS,IAAI;AAAA,UACxD,OAAO;AACL,gBAAI;AACF,qBAAO,MAAM,OAAO,SAAS,SAAS,SAAS,MAAM,KAAK,OAAO;AAAA,YACnE,SAAS,GAAP;AACA,oBAAM,IAAI;AAAA,gBACR,YAAY,MAAM;AAAA,qBACb,EAAE;AAAA,oBACH,EAAE;AAAA,cACR;AAAA,YACF;AAAA,UACF;AAAA,QACF;AACA,eAAO,GAAG,KAAK,KAAK,UAAU,UAAU,UAAU,KAAK,IAAI;AAAA,MAC7D;AAAA,IACF;AACA,OAAG,UAAU,GAAG,QAAQ,KAAK,EAAE;AAC/B,OAAG,UAAU,GAAG,QAAQ,KAAK,EAAE;AAC/B,OAAG,MAAM,GAAG,IAAI,KAAK,EAAE;AACvB,OAAG,OAAO,GAAG,KAAK,KAAK,EAAE;AACzB,WAAO;AAAA,EACT;AAAA,EAEO,QAAQ,UAAmB;AAChC,UAAM,IAAI,MAAM,sBAAsB;AAAA,EACxC;AAAA,EAEO,KAAK,UAAkB,SAAmC;AAC/D,UAAM,IAAI,MAAM,sBAAsB;AAAA,EACxC;AAAA,EAEO,IACL,SACA,MACmD;AACnD,UAAM,IAAI,MAAM,sBAAsB;AAAA,EACxC;AAAA,EAEO,WAA0C;AAAA,IAC/C;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF,GAMW;AACT,UAAM,IAAI,MAAM,sBAAsB;AAAA,EACxC;AACF;;;ACpNO,IAAM,4BAAN,cAEG,oBAAuB;AAAA,EAG/B,YAAYC,YAA8C;AACxD,UAAM;AACN,SAAK,YAAYA;AACjB,SAAK,QAAQ;AAAA,EACf;AAAA,EACO,sBAAsB,UAAqC;AAChE,UAAM,SAAS,KAAK,UAAU,QAAQ;AACtC,QAAI,QAAQ;AACV,aAAO,UAAU;AACjB,aAAO,OAAO;AACd,aAAO;AAAA,IACT,OAAO;AACL,YAAM,IAAI,MAAM,YAAY,oBAAoB;AAAA,IAClD;AAAA,EACF;AAAA,EAEgB,KAAK,UAAkB;AACrC,UAAM,WAAW,KAAK,sBAAsB,QAAQ;AACpD,UAAM,QAAQ,IAAI,gBAAmB,QAAQ;AAC7C,SAAK,SAAS,OAAO,QAAQ;AAC7B,UAAM,QAAQ;AACd,WAAO;AAAA,EACT;AAAA,EACgB,UAAU;AACxB,WAAO,KAAK,KAAK,SAAS,EAAE,QAAQ,CAAC,MAAM,KAAK,KAAK,CAAC,CAAC;AAAA,EACzD;AAAA,EACgB,IACd,SACA,MACmD;AACnD,UAAM,QAAQ,KAAK,OAAO,IAAI;AAC9B,UAAM,KAAK,KAAK,aAAa,KAAK;AAClC,WAAO,GAAG,IAAI,SAAS,GAAG,SAAS,GAAG,SAAS,GAAG,MAAM,KAAK,OAAO;AAAA,EACtE;AAAA,EAEgB,WAA0C;AAAA,IACxD;AAAA,IACA;AAAA,IACA;AAAA,EACF,GAMW;AACT,UAAM,QAAQ,KAAK,OAAO,IAAI;AAC9B,QAAI,CAAC,MAAM,QAAQ;AACjB,YAAM,KAAK,KAAK,aAAa,OAAO,KAAK;AACzC,aAAO,GAAG;AAAA,QACR;AAAA,QACA,GAAG;AAAA,QACH,GAAG;AAAA,QACH,GAAG;AAAA,QACH,KAAK;AAAA,MACP;AAAA,IACF,OAAO;AACL,YAAM,IAAI,MAAM,4CAA4C;AAAA,IAC9D;AAAA,EACF;AACF;;;AhBxEA,SAAS,YAAY,MAAM;AAEzB,QAAM,SAAiB,sBAAc,MAAM;AAAA,IACzC,QAAQ;AAAA;AAAA;AAAA,EAGV,CAAC;AACD,SAAO,OAAO;AAChB;AAKO,IAAM,IAAI,IAAI,0BAA0B,iBAAS;AAEjD,SAAS,IAAI,SAAc,UAAkC;AAClE,SAAO,EAAE,IAAI,SAAS,QAAQ;AAChC;AAEO,SAAS,aAAa,SAA0B,UAAmB;AACxE,QAAM,WAAW,OAAO,MAAM,QAAQ,SAAS,CAAC;AAChD,QAAM,OAAO,IAAI,UAAU,SAAS;AACpC,SAAO,WAAW,YAAY,IAAI,IAAK;AACzC;AAEO,SAAS,YAAY,SAA0B,UAAmB;AACvE,QAAM,WAAW,OAAO,MAAM,QAAQ,SAAS,CAAC;AAChD,QAAM,OAAO,IAAI,UAAU,cAAc;AACzC,SAAO,WAAW,YAAY,IAAI,IAAK;AACzC;AAEO,SAAS,UAAU,SAA0B,UAAmB;AACrE,QAAM,WAAW,OAAO,MAAM,QAAQ,SAAS,CAAC;AAChD,QAAM,OAAO,IAAI,UAAU,eAAe;AAC1C,SAAO,WAAW,YAAY,IAAI,IAAK;AACzC;AAEO,SAAS,UAAU,SAA0B;AAClD,SAAO,OAAO,MAAM,QAAQ,SAAS,CAAC;AACxC;;;AFvCO,SAAS,SAAS,KAAa;AACpC,MAAI;AACJ,MAAI;AACF,aAAS,KAAK,GAAG;AAAA,EACnB,SAAS,KAAP;AACA,IAAG,iBAAc,aAAa,GAAG;AACjC,YAAQ,IAAI,eAAgB,IAAI,UAAU,SAAS;AACnD,YAAQ,IAAI,6CAA6C;AAAA,EAC3D;AACA,SAAO;AACT;AAEO,SAAS,aAAa,OAAO,MAAM;AACxC,MAAI;AACJ,MAAI;AACF,UAAM,QAAQ,KAAK,QAAQ,kBAAkB,GAAG;AAChD,aAAS;AAAA,MACP,cACE,QACA,OACA,MAAM,aACN,SACA,MAAM,OACN;AAAA,IACJ;AAAA,EACF,SAAS,OAAP;AACA,aAAS;AAAA,MACP,KAAK;AAAA,MACL,MAAM,MAAM;AAAA,IACd;AAAA,EACF,UAAE;AACA,WAAO;AAAA,EACT;AACF;AAEO,SAAS,aAAaC,MAAa,WAAoB,MAAM;AAClE,MAAI;AACJ,QAAM,WAAW,aAAgBA,MAAK,QAAQ;AAC9C,MAAI;AACF,aAAS,SAAS,QAAQ;AAAA,EAC5B,SAAS,OAAP;AACA,aAAS;AAAA,MACP;AAAA,MACA,MAAMA;AAAA,IACR;AAAA,EACF,UAAE;AACA,WAAO;AAAA,EACT;AACF;;;AmB/CO,IAAM,WAAN,cAAuD,aAAgB;AAAA,EAC5D,UAAU;AACxB,QAAI,KAAK,SAAS;AAChB,YAAM,SAAS,aAAa,KAAK,SAAS,KAAK;AAC/C,UAAI,CAAC,OAAO,OAAO;AACjB,aAAK,SAAS,OAAO;AACrB,aAAK,SAAS,OAAO;AACrB,aAAK,QAAQ,OAAO;AACpB,aAAK,UAAU,OAAO;AACtB,aAAK,aAAa,OAAO;AACzB,YAAI,OAAO,OAAO;AAChB,eAAK,QAAQ,OAAO;AAAA,QACtB;AACA,aAAK,QAAQ;AAAA,MACf,OAAO;AACL,cAAM,OAAO;AAAA,MACf;AAAA,IACF;AACA,WAAO;AAAA,EACT;AACF;;;AtBlBA,sBAAiC;AAS1B,IAAM,kBAAN,cAEG,oBAAuB;AAAA,EAF1B;AAAA;AAIL;AAAA,SAAO,YAA2B,CAAC;AACnC,SAAO,UAAqB;AAAA;AAAA,EACZ,KAAK,UAAkB,SAAmB;AACxD,QAAI;AACJ,aAAS,IAAI,GAAG,MAAM,KAAK,KAAK,QAAQ,IAAI,KAAK,KAAK;AACpD,aAAO,KAAK,KAAK,CAAC;AAClB,YAAM,KAAK,UACF,aAAQ,QAAQ,IAChB,aAAa,UAAK,MAAM,QAAQ,CAAC;AAC1C,YAAM,aAAa,KAAK;AACxB,UAAO,eAAW,UAAU,GAAG;AAC7B,YAAI;AAEJ,YAAI;AAEF,mBAAS,QAAQ,UAAU;AAAA,QAC7B,SAAS,OAAP;AAEA,gBAAM,eAAkB,iBAAa,UAAU;AAC/C,mBAAS,SAAS,aAAa,SAAS,CAAC;AAAA,QAC3C;AACA,YAAI,kBAAkB,UAAU;AAC9B,mBAAS;AAAA,YACP,QAAQ;AAAA,YACR,SAAS,IAAI,SAAS;AAAA,UACxB;AAAA,QACF;AACA,eAAO,UAAU;AACjB,eAAO,OAAO;AACd,eAAO,UAAU;AACjB,cAAM,QAAQ,IAAI,SAAY,MAAM;AACpC,aAAK,SAAS,OAAO,QAAQ;AAC7B,cAAM,QAAQ;AACd,eAAO;AAAA,MACT,WAAc,eAAW,EAAE,GAAG;AAC5B,cAAM,UAAa,iBAAa,EAAE;AAClC,cAAM,MAAM,IAAI,SAAS;AAAA,UACvB,QAAQ,QAAQ,SAAS;AAAA,UACzB,MAAM;AAAA,UACN,SAAS;AAAA,UACT,SAAS;AAAA,QACX,CAAC;AACD,YAAI,eAAe;AACnB,YAAI;AACF,cAAI,QAAQ;AACZ,yBAAe;AAAA,QACjB,UAAE;AACA,cAAI,CAAC,cAAc;AACjB,mBAAO,KAAK,SAAS,IAAI,SAAS,GAAG,GAAG,QAAQ;AAAA,UAClD;AAAA,QACF;AAAA,MACF;AAAA,IACF;AACA,UAAM,IAAI,MAAM,YAAY,gCAAgC,WAAW;AAAA,EACzE;AAAA,EAEgB,UAAU;AACxB,QAAI,QAAQ,CAAC;AACb,aAAS,IAAI,GAAG,OAAO,KAAK,KAAK,QAAQ,IAAI,MAAM,KAAK;AACtD,eAAS,IAAI,GAAG,OAAO,KAAK,IAAI,QAAQ,IAAI,MAAM,KAAK;AACrD,gBAAQ,MAAM;AAAA,UACP,UAAK,OAAO,KAAK,IAAI,CAAC,GAAG;AAAA,YAC5B,MAAM,KAAK,KAAK,CAAC;AAAA,YACjB,KAAK,KAAK,KAAK,CAAC;AAAA,YAChB,WAAW;AAAA,UACb,CAAC;AAAA,QACH;AAAA,MACF;AAAA,IACF;AACA,aAAS,IAAI,GAAG,MAAM,MAAM,QAAQ,IAAI,KAAK,KAAK;AAChD,WAAK,KAAK,MAAM,CAAC,CAAC;AAAA,IACpB;AAAA,EACF;AAAA,EAEO,WAAW,QAAgB;AAChC,UAAM,MAAM,IAAI,SAAS;AAAA,MACvB;AAAA,MACA,SAAS;AAAA,IACX,CAAC;AACD,WAAO,IAAI,QAAQ;AAAA,EACrB;AAAA;AAAA,EAGO,OAAO,QAAgB,MAAe;AAC3C,QAAI,CAAC,MAAM;AACT,aAAO,kBAAkB,KAAK,OAAO,EAAE,SAAS,IAAI;AAAA,IACtD;AACA,UAAM,MAAM,KAAK,WAAW,MAAM;AAClC,QAAI,OAAO;AACX,QAAI,UAAU;AACd,SAAK,SAAS,GAAG;AACjB,WAAO;AAAA,EACT;AAAA,EAEgB,IACd,SACA,MACA,SACA;AACA,UAAM,QAAQ,KAAK,OAAO,MAAM,OAAO;AAYvC,UAAM,KAAK,KAAK,aAAa,OAAO,CAAC,CAAC;AACtC,UAAM,SAAS,GAAG;AAAA,MAChB;AAAA,MACA,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,MACH,KAAK;AAAA,IACP;AACA,QAAI,OAAO,KAAK,GAAG,KAAK,EAAE,SAAS,GAAG;AACpC,UAAI,MAAM,QAAQ,MAAM,GAAG;AACzB,eAAO,OAAO,IAAI,CAAC,MAAM;AACvB,gBAAM,MAAM,KAAK,WAAW,EAAE,OAAO;AACrC,gBAAM,UAAU,IAAI;AAAA,YAClB,GAAG;AAAA,YACH,GAAG;AAAA,YACH,GAAG;AAAA,YACH,GAAG;AAAA,YACH,KAAK;AAAA,UACP;AACA,iBAAO;AAAA,YACL,MAAM,EAAE;AAAA,YACR;AAAA,UACF;AAAA,QACF,CAAC;AAAA,MACH,OAAO;AACL,cAAM,MAAM,KAAK,WAAW,MAAM;AAClC,eAAO,IAAI;AAAA,UACT,GAAG;AAAA,UACH,GAAG;AAAA,UACH,GAAG;AAAA,UACH,GAAG;AAAA,UACH,KAAK;AAAA,QACP;AAAA,MACF;AAAA,IACF,OAAO;AACL,aAAO;AAAA,IACT;AAAA,EACF;AAAA,EAEgB,WAA0C;AAAA,IACxD;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF,GAMW;AACT,UAAM,QAAQ,KAAK,OAAO,MAAM,OAAO;AACvC,QAAI,CAAC,MAAM,QAAQ;AACjB,YAAM,KAAK,KAAK,aAAa,OAAO,KAAK;AACzC,aAAO,GAAG;AAAA,QACR;AAAA,QACA,GAAG;AAAA,QACH,GAAG;AAAA,QACH,GAAG;AAAA,QACH,KAAK;AAAA,MACP;AAAA,IACF,OAAO;AACL,YAAM,IAAI,MAAM,4CAA4C;AAAA,IAC9D;AAAA,EACF;AAAA,EAEO,UAAU;AACf,UAAM,OAAO;AACb,WAAO,CAAC,UAAU,SAAS,aAAa;AACtC,YAAM,QAAQ,KAAK,OAAO,UAAU,IAAI;AACxC,YAAM,KAAK,KAAK,aAAa,KAAK;AAClC,UAAI,QAAQ;AACZ,UAAI;AACF,iBAAS,GAAG,IAAI,SAAS,GAAG,SAAS,GAAG,SAAS,GAAG,MAAM,KAAK,OAAO;AAAA,MACxE,SAAS,GAAP;AACA,cAAM;AAAA,MACR,UAAE;AACA,iBAAS,KAAK,MAAM;AAAA,MACtB;AAAA,IACF;AAAA,EACF;AAAA,EAEO,WAAW,UAA2B;AAC3C,WAAO,KAAK,MAAM,SAAS,IAAI;AAC/B,WAAO,KAAK,MAAM,SAAS,OAAO;AAClC,aAAS,MAAM,QAAQ,CAAC,UAAU;AAChC,aAAO,KAAK,MAAM,KAAK;AAAA,IACzB,CAAC;AAAA,EACH;AAAA,EAEgB,OAAO,UAAkB,SAAoC;AAC3E,UAAM,WAAW,MAAM,OAAO,UAAU,OAAO;AAC/C,QAAI,KAAK,OAAO;AACd,UAAI,CAAC,KAAK;AAAW,aAAK,YAAY,CAAC;AACvC,UAAI,CAAC,KAAK,SAAS;AACjB,aAAK,cAAU,uBAAM,KAAK,SAAS;AAEnC,aAAK,QAAQ,GAAG,UAAU,CAAC,OAAe;AACxC,gBAAMC,YAAW,KAAK,MAAM,EAAE;AAC9B,eAAK,WAAWA,SAAQ;AACxB,eAAK,OAAOA,UAAS,SAAS,IAAI;AAClC,iBAAO,QAAQ,MAAM,EAAE;AAAA,QACzB,CAAC;AAED,aAAK,QAAQ,GAAG,UAAU,CAAC,OAAe;AACxC,eAAK,WAAW,KAAK,MAAM,EAAE,CAAC;AAC9B,gBAAM,QAAQ,KAAK,UAAU,QAAQ,EAAE;AACvC,iBAAO,QAAQ,MAAM,EAAE;AACvB,gBAAM,OAAO,CAAC,GAAG,KAAK,SAAS;AAC/B,eAAK,QAAQ,QAAQ,IAAI;AACzB,eAAK,YAAY,KAAK,UAAU,OAAO,OAAO,CAAC;AAC/C,cAAI,KAAK,UAAU,SAAS,GAAG;AAC7B,iBAAK,QAAQ,IAAI,IAAI;AAAA,UACvB;AAAA,QACF,CAAC;AAAA,MACH;AACA,UAAI,KAAK,UAAU,QAAQ,SAAS,OAAO,KAAK,IAAI;AAClD,aAAK,UAAU,KAAK,SAAS,OAAO;AACpC,aAAK,QAAQ,IAAI,SAAS,OAAO;AAAA,MACnC;AAAA,IACF;AACA,WAAO;AAAA,EACT;AACF;;;ADvOO,SAAS,MAAM,QAAgB,SAAiC;AACrE,QAAM,WAAW;AACjB,QAAM,UAAU,IAAI,gBAAQ,CAAC,CAAC;AAC9B,QAAM,MAAM,IAAI,SAAS;AAAA,IACvB;AAAA,IACA,MAAM;AAAA,IACN;AAAA,EACF,CAAC;AACD,MAAI,QAAQ;AACZ,UAAQ,MAAM,QAAQ,IAAI;AAC1B,SAAO,IAAI,QAAQ,IAAI,SAAS,QAAQ;AAC1C;",
  "names": ["fs", "res", "src", "current", "prev", "detectIndent", "directives", "templates", "src", "template"]
}
