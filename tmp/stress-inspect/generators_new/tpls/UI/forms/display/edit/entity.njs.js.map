{"version":3,"sources":["generators_new/tpls/UI/forms/display/edit/entity.njs.js"],"names":["code","text","expression"],"mappings":"AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAECA;AAFD,IAECA,AAA4EC,IAC5ED;AAHD,IAGCA,AACAA;AAJD,IAICA,AACAA;AALD,IAKCA,AACAA;AAND,IAMCA,AACAA;AAPD,IAOCA,AACAA;AARD,IAQCA,AACAA;AATD,IASCA,AACAA;AAVD,IAUCA,AACAA;AAXD,IAWCA,AACAA;AAZD,IAYCA,AACAA;AAbD,IAaCA,AAAEC,IACFD;AAdD,IAcCA,AAAqBC,IACrBA,mCAAiCC,QAASA,QAASD,UACnDD;AAhBD,IAgBCA,AAAKC,IACLD;AAjBD,IAiBCA,AACAA;AAlBD,IAkBCA,AACAA;AAnBD,IAmBCA,AACAA;AApBD,IAoBCA,AACAA;AArBD,IAqBCA,AACAA;AAtBD,IAsBCA,AACAA;AAvBD,IAuBCA,AACAA;AAxBD,IAwBCA,AACAA;AAzBD,IAyBCA,AAAIC,IACJA,MAAIC,oCAAqCD,IACzCD;AA3BD,IA2BCA,AACAA;AA5BD,IA4BCA,AACAA;AA7BD,IA6BCA,AACAA;AA9BD,IA8BCA,AACAA;AA/BD,IA+BCA,AACAA;AAhCD,IAgCCA,AAAMC,IACNA,IAAED;AAjCH,IAiCGA,AAAqBC,IACvBA,MAAID;AAlCL,IAkCKA,AAAmBC,IACvBA,QAAMC,+CAAgDD,IACtDA,MAAID;AApCL,IAoCKA,AAAYC,IAChBA,QAAMD;AArCP,IAqCOA,AAAuBC,IAC7BA,UAAQC,6DAA8DD,IACtEA,QAAMD;AAvCP,IAuCOA,AAAYC,IAClBA,UAAQC,mDAAoDD,IAC5DA,QAAMD;AAzCP,IAyCOA,AAAKC,IACXA,MAAID;AA1CL,IA0CKA,AAAKC,IACTA,IAAED;AA3CH,IA2CGA,AAAYC,IACdA,MAAID;AA5CL,IA4CKA,AAAkBC,IACtBA,QAAMC,iDAAkDD,IACxDA,MAAID;AA9CL,IA8CKA,AAAYC,IAChBA,QAAMD;AA/CP,IA+COA,AAA8EC,IACpFA,UAAQC,0DAA2DD,IACnEA,UAAQD;AAjDT,IAiDSA,AAAYC,IACpBA,UAAQC,qDAAsDD,IAC9DA,QAAMD;AAnDP,IAmDOA,AAAKC,IACXA,MAAID;AApDL,IAoDKA,AAAKC,IACTA,IAAED;AArDH,IAqDGA,AAAKC,IACPD;AAtDD,IAsDCA,AAAKC,IACLD;AAvDD,IAuDCA,AAAsBC,IACtBA,KACAD;AAzDD,IAyDCA,AAAKC,IACLD;AA1DD,IA0DCA;AA1DD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","file":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","sourceRoot":"/Users/vedmalex/work/fte2/demo","sourcesContent":["<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"],"template":{"version":"1.0.0","segments":[{"generatedLine":1,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":2,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":3,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":4,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":5,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":6,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":7,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":8,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":9,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":10,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":11,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":12,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":13,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":14,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":15,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":16,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":17,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":18,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":19,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":20,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":21,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":22,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":23,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":24,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":25,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":26,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":27,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":28,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":29,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":30,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":31,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":32,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":33,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":34,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":35,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":36,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":37,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":38,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":39,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":40,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":41,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":42,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":43,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":44,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":45,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":46,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":47,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":48,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":49,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":50,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":51,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":52,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":53,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":54,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":55,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":56,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":57,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":58,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":59,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":60,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":61,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":62,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":63,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":64,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":65,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":66,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":67,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":68,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":69,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":70,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":71,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":72,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":73,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":74,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":75,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":76,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":77,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":78,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":79,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":80,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":81,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":82,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":83,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":84,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":85,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":86,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":87,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":88,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":89,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":90,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":91,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":92,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":93,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":94,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":95,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":96,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":97,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":98,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":99,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":100,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":101,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":102,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":103,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":104,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":105,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":106,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":107,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":108,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":109,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":110,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":111,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":112,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":113,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":114,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":115,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":116,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":117,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":118,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js"},{"generatedLine":12,"generatedColumn":4,"originalLine":3,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"code","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":13,"generatedColumn":4,"originalLine":3,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"code","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":13,"generatedColumn":4,"originalLine":3,"originalColumn":77,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"text","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":13,"generatedColumn":8,"originalLine":4,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"code","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":14,"generatedColumn":4,"originalLine":4,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"code","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":14,"generatedColumn":4,"originalLine":5,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"code","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":15,"generatedColumn":4,"originalLine":5,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"code","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":15,"generatedColumn":4,"originalLine":6,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"code","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":16,"generatedColumn":4,"originalLine":6,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"code","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":16,"generatedColumn":4,"originalLine":7,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"code","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":17,"generatedColumn":4,"originalLine":7,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"code","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":17,"generatedColumn":4,"originalLine":8,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"code","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":18,"generatedColumn":4,"originalLine":8,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"code","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":18,"generatedColumn":4,"originalLine":9,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"code","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":19,"generatedColumn":4,"originalLine":9,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"code","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":19,"generatedColumn":4,"originalLine":10,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"code","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":20,"generatedColumn":4,"originalLine":10,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"code","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":20,"generatedColumn":4,"originalLine":11,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"code","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":21,"generatedColumn":4,"originalLine":11,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"code","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":21,"generatedColumn":4,"originalLine":12,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"code","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":22,"generatedColumn":4,"originalLine":12,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"code","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":22,"generatedColumn":4,"originalLine":13,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"code","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":23,"generatedColumn":4,"originalLine":13,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"code","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":23,"generatedColumn":4,"originalLine":14,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"code","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":24,"generatedColumn":4,"originalLine":14,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"code","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":24,"generatedColumn":4,"originalLine":14,"originalColumn":3,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"text","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":24,"generatedColumn":8,"originalLine":15,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"code","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":25,"generatedColumn":4,"originalLine":15,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"code","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":25,"generatedColumn":4,"originalLine":15,"originalColumn":22,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"text","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":25,"generatedColumn":8,"originalLine":16,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"text","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":25,"generatedColumn":43,"originalLine":16,"originalColumn":34,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"expression","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":25,"generatedColumn":51,"originalLine":16,"originalColumn":43,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"expression","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":25,"generatedColumn":59,"originalLine":16,"originalColumn":52,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"text","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":25,"generatedColumn":69,"originalLine":17,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"code","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":26,"generatedColumn":4,"originalLine":17,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"code","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":26,"generatedColumn":4,"originalLine":17,"originalColumn":6,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"text","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":26,"generatedColumn":8,"originalLine":18,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"code","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":27,"generatedColumn":4,"originalLine":18,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"code","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":27,"generatedColumn":4,"originalLine":19,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"code","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":28,"generatedColumn":4,"originalLine":19,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"code","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":28,"generatedColumn":4,"originalLine":20,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"code","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":29,"generatedColumn":4,"originalLine":20,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"code","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":29,"generatedColumn":4,"originalLine":21,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"code","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":30,"generatedColumn":4,"originalLine":21,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"code","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":30,"generatedColumn":4,"originalLine":22,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"code","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":31,"generatedColumn":4,"originalLine":22,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"code","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":31,"generatedColumn":4,"originalLine":23,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"code","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":32,"generatedColumn":4,"originalLine":23,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"code","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":32,"generatedColumn":4,"originalLine":24,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"code","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":33,"generatedColumn":4,"originalLine":24,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"code","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":33,"generatedColumn":4,"originalLine":25,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"code","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":34,"generatedColumn":4,"originalLine":25,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"code","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":34,"generatedColumn":4,"originalLine":26,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"code","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":35,"generatedColumn":4,"originalLine":26,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"code","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":35,"generatedColumn":4,"originalLine":26,"originalColumn":5,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"text","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":35,"generatedColumn":8,"originalLine":27,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"text","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":35,"generatedColumn":14,"originalLine":27,"originalColumn":5,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"expression","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":35,"generatedColumn":50,"originalLine":27,"originalColumn":42,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"text","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":35,"generatedColumn":54,"originalLine":28,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"code","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":36,"generatedColumn":4,"originalLine":28,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"code","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":36,"generatedColumn":4,"originalLine":29,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"code","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":37,"generatedColumn":4,"originalLine":29,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"code","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":37,"generatedColumn":4,"originalLine":30,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"code","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":38,"generatedColumn":4,"originalLine":30,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"code","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":38,"generatedColumn":4,"originalLine":31,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"code","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":39,"generatedColumn":4,"originalLine":31,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"code","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":39,"generatedColumn":4,"originalLine":32,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"code","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":40,"generatedColumn":4,"originalLine":32,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"code","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":40,"generatedColumn":4,"originalLine":33,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"code","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":41,"generatedColumn":4,"originalLine":33,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"code","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":41,"generatedColumn":4,"originalLine":33,"originalColumn":7,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"text","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":41,"generatedColumn":8,"originalLine":34,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"text","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":41,"generatedColumn":12,"originalLine":34,"originalColumn":3,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"code","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":42,"generatedColumn":4,"originalLine":34,"originalColumn":3,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"code","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":42,"generatedColumn":4,"originalLine":34,"originalColumn":24,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"text","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":42,"generatedColumn":8,"originalLine":35,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"text","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":42,"generatedColumn":14,"originalLine":35,"originalColumn":5,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"code","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":43,"generatedColumn":4,"originalLine":35,"originalColumn":5,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"code","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":43,"generatedColumn":4,"originalLine":35,"originalColumn":24,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"text","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":43,"generatedColumn":8,"originalLine":36,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"text","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":43,"generatedColumn":16,"originalLine":36,"originalColumn":7,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"expression","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":43,"generatedColumn":63,"originalLine":36,"originalColumn":55,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"text","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":43,"generatedColumn":67,"originalLine":37,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"text","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":43,"generatedColumn":73,"originalLine":37,"originalColumn":5,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"code","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":44,"generatedColumn":4,"originalLine":37,"originalColumn":5,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"code","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":44,"generatedColumn":4,"originalLine":37,"originalColumn":17,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"text","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":44,"generatedColumn":8,"originalLine":38,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"text","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":44,"generatedColumn":16,"originalLine":38,"originalColumn":7,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"code","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":45,"generatedColumn":4,"originalLine":38,"originalColumn":7,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"code","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":45,"generatedColumn":4,"originalLine":38,"originalColumn":30,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"text","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":45,"generatedColumn":8,"originalLine":39,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"text","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":45,"generatedColumn":18,"originalLine":39,"originalColumn":9,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"expression","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":45,"generatedColumn":79,"originalLine":39,"originalColumn":71,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"text","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":45,"generatedColumn":83,"originalLine":40,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"text","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":45,"generatedColumn":91,"originalLine":40,"originalColumn":7,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"code","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":46,"generatedColumn":4,"originalLine":40,"originalColumn":7,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"code","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":46,"generatedColumn":4,"originalLine":40,"originalColumn":19,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"text","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":46,"generatedColumn":8,"originalLine":41,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"text","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":46,"generatedColumn":18,"originalLine":41,"originalColumn":9,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"expression","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":46,"generatedColumn":69,"originalLine":41,"originalColumn":61,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"text","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":46,"generatedColumn":73,"originalLine":42,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"text","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":46,"generatedColumn":81,"originalLine":42,"originalColumn":7,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"code","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":47,"generatedColumn":4,"originalLine":42,"originalColumn":7,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"code","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":47,"generatedColumn":4,"originalLine":42,"originalColumn":12,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"text","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":47,"generatedColumn":8,"originalLine":43,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"text","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":47,"generatedColumn":14,"originalLine":43,"originalColumn":5,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"code","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":48,"generatedColumn":4,"originalLine":43,"originalColumn":5,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"code","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":48,"generatedColumn":4,"originalLine":43,"originalColumn":10,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"text","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":48,"generatedColumn":8,"originalLine":44,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"text","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":48,"generatedColumn":12,"originalLine":44,"originalColumn":3,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"code","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":49,"generatedColumn":4,"originalLine":44,"originalColumn":3,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"code","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":49,"generatedColumn":4,"originalLine":44,"originalColumn":15,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"text","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":49,"generatedColumn":8,"originalLine":45,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"text","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":49,"generatedColumn":14,"originalLine":45,"originalColumn":5,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"code","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":50,"generatedColumn":4,"originalLine":45,"originalColumn":5,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"code","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":50,"generatedColumn":4,"originalLine":45,"originalColumn":23,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"text","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":50,"generatedColumn":8,"originalLine":46,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"text","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":50,"generatedColumn":16,"originalLine":46,"originalColumn":7,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"expression","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":50,"generatedColumn":65,"originalLine":46,"originalColumn":57,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"text","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":50,"generatedColumn":69,"originalLine":47,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"text","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":50,"generatedColumn":75,"originalLine":47,"originalColumn":5,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"code","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":51,"generatedColumn":4,"originalLine":47,"originalColumn":5,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"code","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":51,"generatedColumn":4,"originalLine":47,"originalColumn":17,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"text","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":51,"generatedColumn":8,"originalLine":48,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"text","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":51,"generatedColumn":16,"originalLine":48,"originalColumn":7,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"code","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":52,"generatedColumn":4,"originalLine":48,"originalColumn":7,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"code","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":52,"generatedColumn":4,"originalLine":48,"originalColumn":85,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"text","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":52,"generatedColumn":8,"originalLine":49,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"text","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":52,"generatedColumn":18,"originalLine":49,"originalColumn":9,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"expression","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":52,"generatedColumn":76,"originalLine":49,"originalColumn":68,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"text","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":52,"generatedColumn":80,"originalLine":50,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"text","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":52,"generatedColumn":90,"originalLine":50,"originalColumn":9,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"code","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":53,"generatedColumn":4,"originalLine":50,"originalColumn":9,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"code","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":53,"generatedColumn":4,"originalLine":50,"originalColumn":21,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"text","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":53,"generatedColumn":8,"originalLine":51,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"text","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":53,"generatedColumn":18,"originalLine":51,"originalColumn":9,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"expression","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":53,"generatedColumn":71,"originalLine":51,"originalColumn":63,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"text","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":53,"generatedColumn":75,"originalLine":52,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"text","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":53,"generatedColumn":83,"originalLine":52,"originalColumn":7,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"code","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":54,"generatedColumn":4,"originalLine":52,"originalColumn":7,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"code","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":54,"generatedColumn":4,"originalLine":52,"originalColumn":12,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"text","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":54,"generatedColumn":8,"originalLine":53,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"text","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":54,"generatedColumn":14,"originalLine":53,"originalColumn":5,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"code","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":55,"generatedColumn":4,"originalLine":53,"originalColumn":5,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"code","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":55,"generatedColumn":4,"originalLine":53,"originalColumn":10,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"text","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":55,"generatedColumn":8,"originalLine":54,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"text","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":55,"generatedColumn":12,"originalLine":54,"originalColumn":3,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"code","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":56,"generatedColumn":4,"originalLine":54,"originalColumn":3,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"code","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":56,"generatedColumn":4,"originalLine":54,"originalColumn":8,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"text","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":56,"generatedColumn":8,"originalLine":55,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"code","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":57,"generatedColumn":4,"originalLine":55,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"code","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":57,"generatedColumn":4,"originalLine":55,"originalColumn":6,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"text","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":57,"generatedColumn":8,"originalLine":56,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"code","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":58,"generatedColumn":4,"originalLine":56,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"code","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":58,"generatedColumn":4,"originalLine":56,"originalColumn":23,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"text","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":58,"generatedColumn":8,"originalLine":57,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"text","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":58,"generatedColumn":13,"originalLine":58,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"code","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":59,"generatedColumn":4,"originalLine":58,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"code","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":59,"generatedColumn":4,"originalLine":58,"originalColumn":6,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"text","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":59,"generatedColumn":8,"originalLine":59,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"code","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"},{"generatedLine":60,"generatedColumn":4,"originalLine":59,"originalColumn":1,"source":"generators_new/tpls/UI/forms/display/edit/entity.njs.js","name":"code","content":"<#@ context \"context\" #>\n<#@ alias 'display-edit-entity' #>\n<# const {source, entity, sectionLabel, readonly, customizable } = context#>\n<# \nentity.props.forEach((f, index) => {\n  const ctx = {\n    entity,\n    f,\n    source,\n    sectionLabel,\n    readonly,\n    customizable,\n  }\n#>\n<#if(customizable){#>\n{ !excludedField.hasOwnProperty('#{source}#{f.name}') && \n<#}#>\n<#if (!f.ref || f.isFile) {\n  if (f.isFile) {\n    if(f.isImage) {\n      ctx.f.type = 'Image';\n    } else {\n      ctx.f.type = 'File';\n    }\n  }\n  #>\n    #{partial(ctx, \"display-edit-field\")}\n<#} else { \n    const embedded = entity?.UI?.embedded?.hasOwnProperty(f.name);\n    if((f.calculated || f.readonly) && !readonly) {\n      ctx.readonly = true\n    }\n    #>\n  <#if ( f.single ) {#>\n    <#if (embedded) {#>\n      #{partial(ctx, \"display-edit-rel-single-embed\")}\n    <#} else {#>\n      <# if(f.ref.stored) {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed-w-preview\")}\n      <#} else {#>\n        #{partial(ctx, \"display-edit-rel-single-not-embed\")}\n      <#}#>\n    <#}#>\n  <#} else {#>\n    <#if(embedded){ #>\n      #{partial(ctx, \"display-edit-rel-multiple-embed\")}\n    <#} else {#>\n      <#if(f.verb!=='BelongsToMany' || (f.verb==='BelongsToMany' && f.ref.using)){#>\n        #{partial(ctx, \"display-edit-show-rel-multiple-not-embed\")}\n        <#} else {#>\n        #{partial(ctx, \"display-edit-rel-multiple-not-embed\")}\n      <#}#>\n    <#}#>\n  <#}#>\n<#}#>\n<#if(customizable) {#>\n}\n<#}#>\n<#});#>"}]}}