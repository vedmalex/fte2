{"version":3,"sources":["generators_new/tpls/UI/forms/form-fragment.njs.js"],"names":["code","text","expression"],"mappings":"AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAECA;AAFD,IAECA,AAAyFC,IACzFA,IACAA,8CACAA,uCACAA,+CACAA,4CACAA,iDACAA,6CACAA,qEACAA,IACAD;AAZD,IAYCA,AAAmCC,IACnCA,0CACAA,gEACAD;AAfD,IAeCA,AAAKC,IACLA,IACAA,yBACAC,oBAAqBD,IACrBA,IACAA,kBACAC;AArfile":"generators_new/tpls/UI/forms/form-fragment.njs.js","sourceRoot":"/Users/vedmalex/work/fte2/demo","sourcesContent":["<#@ context \"entity\" -#>\n<#@ alias 'forms-form-fragments' -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n\nimport React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { useLocation } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport AddIcon from '@material-ui/icons/Add';\nimport { UIXContext } from '../contexts';\nimport useListParams from 'ra-core/lib/controller/useListParams';\n\n<# if(entity.actions.length > 0){#>\nimport { connect } from 'react-redux';\nimport ExecuteActionIcon from '@material-ui/icons/Settings';\n<#}#>\n\n// action definitions\n#{content('actions')}\n\n// rel buttons\n#{content('add-buttons')}\n\n<# block 'actions' : -#>\n<# entity.actions.forEach(action=>{#>\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.model.entityPathMapper[entity.name]}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n  // define this method in dataProvider to use this\n  async function #{action.actionCreatorName}(data, resource){\n\n  }\n*/\n\nconst #{action.fullName}Action  = ({ #{action.actionCreatorName}, record, selectedIds, children }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Button onClick={() =>\n    #{action.actionCreatorName}({record, selectedIds})\n  }\n  label=\"resources.#{entity.name}.actions.#{action.name}\"\n  >\n    {children ? children : (<ExecuteActionIcon/>)}\n  </uix.Button>);}\n\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n<#})#>\n\nexport const actions = {\n<# entity.actions.forEach(action=>{#>\n  #{action.name}:{\n    type:'#{action.actionType}',\n    creator: #{action.actionCreatorName},\n    action: #{action.actionName},\n    button: #{action.fullName}Button,\n  },\n<#})#>\n}\n\n<# end #>\n\n<# block 'add-buttons' : #>\n<#@ context 'entity'#>\nconst Add#{entity.name} = ({ record, target, label, children }) => {\n  const location = useLocation()\n  const uix = useContext(UIXContext);\n  const to = {\n    pathname: `/#{entity.model.entityPathMapper[entity.name]}/create`,\n  };\n\n  to.state = { pathname: location.pathname };\n  const newRecord = target && record && record.id ? { [target]: record.id } : undefined;\n  if (newRecord) {\n    to.state.record = newRecord;\n  }\n  return (\n    <uix.Button\n      component={Link}\n      to={to}\n      label={label}>\n      {children || <AddIcon/>}\n    </uix.Button>\n  );\n};\n\nAdd#{entity.name}.propTypes = {\n  record: PropTypes.object,\n  target: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n}\n\nconst Create#{entity.name}Button = ({ resource, label, children }) => {\n  const location = useLocation()\n  const uix = useContext(UIXContext);\n  const [{ filterValues }] = useListParams({ resource, location });\n  const record = filterValues\n    ? Object.keys(filterValues).reduce((rec, fld) => {\n        if (fld.match(/-eq/)) {\n          rec[fld.split('-')[0]] = filterValues[fld];\n        }\n        return rec;\n      }, {})\n    : undefined;\n  const to = {\n    pathname: `/#{entity.model.entityPathMapper[entity.name]}/create`,\n  };\n  to.state = { pathname: location.pathname };\n  if (record) {\n    to.state.record = record;\n  }\n  return (\n    <uix.Button component={Link} to={to} label={label}>\n      {children || <AddIcon />}\n    </uix.Button>\n  );\n};\n\nCreate#{entity.name}Button.propTypes = {\n  label: PropTypes.string.isRequired,\n};\n\nexport const buttons = {\n  Add: Add#{entity.name},\n  CreateButton: Create#{entity.name}Button,\n  <# entity.actions.forEach(action=>{#>\n  #{action.fullName}: #{action.fullName}Button,\n  <#-})#>\n}\n<# end #>"],"template":{"version":"1.0.0","segments":[{"generatedLine":1,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":2,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":3,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":4,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":5,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":6,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":7,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":8,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":9,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":10,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":11,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":12,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":13,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":14,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":15,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":16,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":17,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":18,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":19,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":20,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":21,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":22,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":23,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":24,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":25,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":26,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":27,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":28,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":29,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":30,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":31,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":32,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":33,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":34,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":35,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":36,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":37,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":38,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":39,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":40,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":41,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":42,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":43,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":44,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":45,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":46,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":47,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":48,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":49,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":50,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":51,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":52,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":53,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":54,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":55,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":56,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":57,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":58,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":59,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":60,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":61,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":62,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":63,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":64,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":65,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":66,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":67,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":68,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":69,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":70,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":71,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":72,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":73,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":74,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":75,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":76,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":77,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":78,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":79,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":80,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":81,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":82,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":83,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":84,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":85,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":86,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":87,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":88,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":89,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":90,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":91,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":92,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":93,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":94,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":95,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":96,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":97,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":98,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":99,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":100,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":101,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":102,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":103,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":104,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":105,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":106,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":107,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":108,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":109,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":110,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":111,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":112,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":113,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":114,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":115,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":116,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":117,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":118,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":119,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":120,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":121,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":122,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":123,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":124,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":125,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":126,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":127,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":128,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":129,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":130,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":131,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":132,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":133,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":134,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":135,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":136,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":137,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":138,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":139,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":140,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":141,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":142,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":143,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":144,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":145,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":146,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":147,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":148,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":149,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":150,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":151,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":152,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":153,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":154,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":155,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":156,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":157,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":158,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":159,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":160,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":161,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":162,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":163,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":164,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":165,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":166,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":167,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":168,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":169,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":170,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":171,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":172,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":173,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":174,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":175,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":176,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":177,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":178,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":179,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":180,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":181,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":182,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":183,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":184,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":185,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":186,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js"},{"generatedLine":12,"generatedColumn":4,"originalLine":3,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias 'forms-form-fragments' -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n\nimport React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { useLocation } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport AddIcon from '@material-ui/icons/Add';\nimport { UIXContext } from '../contexts';\nimport useListParams from 'ra-core/lib/controller/useListParams';\n\n<# if(entity.actions.length > 0){#>\nimport { connect } from 'react-redux';\nimport ExecuteActionIcon from '@material-ui/icons/Settings';\n<#}#>\n\n// action definitions\n#{content('actions')}\n\n// rel buttons\n#{content('add-buttons')}\n\n<# block 'actions' : -#>\n<# entity.actions.forEach(action=>{#>\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.model.entityPathMapper[entity.name]}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n  // define this method in dataProvider to use this\n  async function #{action.actionCreatorName}(data, resource){\n\n  }\n*/\n\nconst #{action.fullName}Action  = ({ #{action.actionCreatorName}, record, selectedIds, children }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Button onClick={() =>\n    #{action.actionCreatorName}({record, selectedIds})\n  }\n  label=\"resources.#{entity.name}.actions.#{action.name}\"\n  >\n    {children ? children : (<ExecuteActionIcon/>)}\n  </uix.Button>);}\n\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n<#})#>\n\nexport const actions = {\n<# entity.actions.forEach(action=>{#>\n  #{action.name}:{\n    type:'#{action.actionType}',\n    creator: #{action.actionCreatorName},\n    action: #{action.actionName},\n    button: #{action.fullName}Button,\n  },\n<#})#>\n}\n\n<# end #>\n\n<# block 'add-buttons' : #>\n<#@ context 'entity'#>\nconst Add#{entity.name} = ({ record, target, label, children }) => {\n  const location = useLocation()\n  const uix = useContext(UIXContext);\n  const to = {\n    pathname: `/#{entity.model.entityPathMapper[entity.name]}/create`,\n  };\n\n  to.state = { pathname: location.pathname };\n  const newRecord = target && record && record.id ? { [target]: record.id } : undefined;\n  if (newRecord) {\n    to.state.record = newRecord;\n  }\n  return (\n    <uix.Button\n      component={Link}\n      to={to}\n      label={label}>\n      {children || <AddIcon/>}\n    </uix.Button>\n  );\n};\n\nAdd#{entity.name}.propTypes = {\n  record: PropTypes.object,\n  target: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n}\n\nconst Create#{entity.name}Button = ({ resource, label, children }) => {\n  const location = useLocation()\n  const uix = useContext(UIXContext);\n  const [{ filterValues }] = useListParams({ resource, location });\n  const record = filterValues\n    ? Object.keys(filterValues).reduce((rec, fld) => {\n        if (fld.match(/-eq/)) {\n          rec[fld.split('-')[0]] = filterValues[fld];\n        }\n        return rec;\n      }, {})\n    : undefined;\n  const to = {\n    pathname: `/#{entity.model.entityPathMapper[entity.name]}/create`,\n  };\n  to.state = { pathname: location.pathname };\n  if (record) {\n    to.state.record = record;\n  }\n  return (\n    <uix.Button component={Link} to={to} label={label}>\n      {children || <AddIcon />}\n    </uix.Button>\n  );\n};\n\nCreate#{entity.name}Button.propTypes = {\n  label: PropTypes.string.isRequired,\n};\n\nexport const buttons = {\n  Add: Add#{entity.name},\n  CreateButton: Create#{entity.name}Button,\n  <# entity.actions.forEach(action=>{#>\n  #{action.fullName}: #{action.fullName}Button,\n  <#-})#>\n}\n<# end #>"},{"generatedLine":13,"generatedColumn":4,"originalLine":3,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias 'forms-form-fragments' -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n\nimport React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { useLocation } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport AddIcon from '@material-ui/icons/Add';\nimport { UIXContext } from '../contexts';\nimport useListParams from 'ra-core/lib/controller/useListParams';\n\n<# if(entity.actions.length > 0){#>\nimport { connect } from 'react-redux';\nimport ExecuteActionIcon from '@material-ui/icons/Settings';\n<#}#>\n\n// action definitions\n#{content('actions')}\n\n// rel buttons\n#{content('add-buttons')}\n\n<# block 'actions' : -#>\n<# entity.actions.forEach(action=>{#>\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.model.entityPathMapper[entity.name]}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n  // define this method in dataProvider to use this\n  async function #{action.actionCreatorName}(data, resource){\n\n  }\n*/\n\nconst #{action.fullName}Action  = ({ #{action.actionCreatorName}, record, selectedIds, children }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Button onClick={() =>\n    #{action.actionCreatorName}({record, selectedIds})\n  }\n  label=\"resources.#{entity.name}.actions.#{action.name}\"\n  >\n    {children ? children : (<ExecuteActionIcon/>)}\n  </uix.Button>);}\n\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n<#})#>\n\nexport const actions = {\n<# entity.actions.forEach(action=>{#>\n  #{action.name}:{\n    type:'#{action.actionType}',\n    creator: #{action.actionCreatorName},\n    action: #{action.actionName},\n    button: #{action.fullName}Button,\n  },\n<#})#>\n}\n\n<# end #>\n\n<# block 'add-buttons' : #>\n<#@ context 'entity'#>\nconst Add#{entity.name} = ({ record, target, label, children }) => {\n  const location = useLocation()\n  const uix = useContext(UIXContext);\n  const to = {\n    pathname: `/#{entity.model.entityPathMapper[entity.name]}/create`,\n  };\n\n  to.state = { pathname: location.pathname };\n  const newRecord = target && record && record.id ? { [target]: record.id } : undefined;\n  if (newRecord) {\n    to.state.record = newRecord;\n  }\n  return (\n    <uix.Button\n      component={Link}\n      to={to}\n      label={label}>\n      {children || <AddIcon/>}\n    </uix.Button>\n  );\n};\n\nAdd#{entity.name}.propTypes = {\n  record: PropTypes.object,\n  target: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n}\n\nconst Create#{entity.name}Button = ({ resource, label, children }) => {\n  const location = useLocation()\n  const uix = useContext(UIXContext);\n  const [{ filterValues }] = useListParams({ resource, location });\n  const record = filterValues\n    ? Object.keys(filterValues).reduce((rec, fld) => {\n        if (fld.match(/-eq/)) {\n          rec[fld.split('-')[0]] = filterValues[fld];\n        }\n        return rec;\n      }, {})\n    : undefined;\n  const to = {\n    pathname: `/#{entity.model.entityPathMapper[entity.name]}/create`,\n  };\n  to.state = { pathname: location.pathname };\n  if (record) {\n    to.state.record = record;\n  }\n  return (\n    <uix.Button component={Link} to={to} label={label}>\n      {children || <AddIcon />}\n    </uix.Button>\n  );\n};\n\nCreate#{entity.name}Button.propTypes = {\n  label: PropTypes.string.isRequired,\n};\n\nexport const buttons = {\n  Add: Add#{entity.name},\n  CreateButton: Create#{entity.name}Button,\n  <# entity.actions.forEach(action=>{#>\n  #{action.fullName}: #{action.fullName}Button,\n  <#-})#>\n}\n<# end #>"},{"generatedLine":13,"generatedColumn":4,"originalLine":3,"originalColumn":90,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'forms-form-fragments' -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n\nimport React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { useLocation } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport AddIcon from '@material-ui/icons/Add';\nimport { UIXContext } from '../contexts';\nimport useListParams from 'ra-core/lib/controller/useListParams';\n\n<# if(entity.actions.length > 0){#>\nimport { connect } from 'react-redux';\nimport ExecuteActionIcon from '@material-ui/icons/Settings';\n<#}#>\n\n// action definitions\n#{content('actions')}\n\n// rel buttons\n#{content('add-buttons')}\n\n<# block 'actions' : -#>\n<# entity.actions.forEach(action=>{#>\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.model.entityPathMapper[entity.name]}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n  // define this method in dataProvider to use this\n  async function #{action.actionCreatorName}(data, resource){\n\n  }\n*/\n\nconst #{action.fullName}Action  = ({ #{action.actionCreatorName}, record, selectedIds, children }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Button onClick={() =>\n    #{action.actionCreatorName}({record, selectedIds})\n  }\n  label=\"resources.#{entity.name}.actions.#{action.name}\"\n  >\n    {children ? children : (<ExecuteActionIcon/>)}\n  </uix.Button>);}\n\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n<#})#>\n\nexport const actions = {\n<# entity.actions.forEach(action=>{#>\n  #{action.name}:{\n    type:'#{action.actionType}',\n    creator: #{action.actionCreatorName},\n    action: #{action.actionName},\n    button: #{action.fullName}Button,\n  },\n<#})#>\n}\n\n<# end #>\n\n<# block 'add-buttons' : #>\n<#@ context 'entity'#>\nconst Add#{entity.name} = ({ record, target, label, children }) => {\n  const location = useLocation()\n  const uix = useContext(UIXContext);\n  const to = {\n    pathname: `/#{entity.model.entityPathMapper[entity.name]}/create`,\n  };\n\n  to.state = { pathname: location.pathname };\n  const newRecord = target && record && record.id ? { [target]: record.id } : undefined;\n  if (newRecord) {\n    to.state.record = newRecord;\n  }\n  return (\n    <uix.Button\n      component={Link}\n      to={to}\n      label={label}>\n      {children || <AddIcon/>}\n    </uix.Button>\n  );\n};\n\nAdd#{entity.name}.propTypes = {\n  record: PropTypes.object,\n  target: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n}\n\nconst Create#{entity.name}Button = ({ resource, label, children }) => {\n  const location = useLocation()\n  const uix = useContext(UIXContext);\n  const [{ filterValues }] = useListParams({ resource, location });\n  const record = filterValues\n    ? Object.keys(filterValues).reduce((rec, fld) => {\n        if (fld.match(/-eq/)) {\n          rec[fld.split('-')[0]] = filterValues[fld];\n        }\n        return rec;\n      }, {})\n    : undefined;\n  const to = {\n    pathname: `/#{entity.model.entityPathMapper[entity.name]}/create`,\n  };\n  to.state = { pathname: location.pathname };\n  if (record) {\n    to.state.record = record;\n  }\n  return (\n    <uix.Button component={Link} to={to} label={label}>\n      {children || <AddIcon />}\n    </uix.Button>\n  );\n};\n\nCreate#{entity.name}Button.propTypes = {\n  label: PropTypes.string.isRequired,\n};\n\nexport const buttons = {\n  Add: Add#{entity.name},\n  CreateButton: Create#{entity.name}Button,\n  <# entity.actions.forEach(action=>{#>\n  #{action.fullName}: #{action.fullName}Button,\n  <#-})#>\n}\n<# end #>"},{"generatedLine":13,"generatedColumn":8,"originalLine":4,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'forms-form-fragments' -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n\nimport React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { useLocation } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport AddIcon from '@material-ui/icons/Add';\nimport { UIXContext } from '../contexts';\nimport useListParams from 'ra-core/lib/controller/useListParams';\n\n<# if(entity.actions.length > 0){#>\nimport { connect } from 'react-redux';\nimport ExecuteActionIcon from '@material-ui/icons/Settings';\n<#}#>\n\n// action definitions\n#{content('actions')}\n\n// rel buttons\n#{content('add-buttons')}\n\n<# block 'actions' : -#>\n<# entity.actions.forEach(action=>{#>\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.model.entityPathMapper[entity.name]}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n  // define this method in dataProvider to use this\n  async function #{action.actionCreatorName}(data, resource){\n\n  }\n*/\n\nconst #{action.fullName}Action  = ({ #{action.actionCreatorName}, record, selectedIds, children }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Button onClick={() =>\n    #{action.actionCreatorName}({record, selectedIds})\n  }\n  label=\"resources.#{entity.name}.actions.#{action.name}\"\n  >\n    {children ? children : (<ExecuteActionIcon/>)}\n  </uix.Button>);}\n\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n<#})#>\n\nexport const actions = {\n<# entity.actions.forEach(action=>{#>\n  #{action.name}:{\n    type:'#{action.actionType}',\n    creator: #{action.actionCreatorName},\n    action: #{action.actionName},\n    button: #{action.fullName}Button,\n  },\n<#})#>\n}\n\n<# end #>\n\n<# block 'add-buttons' : #>\n<#@ context 'entity'#>\nconst Add#{entity.name} = ({ record, target, label, children }) => {\n  const location = useLocation()\n  const uix = useContext(UIXContext);\n  const to = {\n    pathname: `/#{entity.model.entityPathMapper[entity.name]}/create`,\n  };\n\n  to.state = { pathname: location.pathname };\n  const newRecord = target && record && record.id ? { [target]: record.id } : undefined;\n  if (newRecord) {\n    to.state.record = newRecord;\n  }\n  return (\n    <uix.Button\n      component={Link}\n      to={to}\n      label={label}>\n      {children || <AddIcon/>}\n    </uix.Button>\n  );\n};\n\nAdd#{entity.name}.propTypes = {\n  record: PropTypes.object,\n  target: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n}\n\nconst Create#{entity.name}Button = ({ resource, label, children }) => {\n  const location = useLocation()\n  const uix = useContext(UIXContext);\n  const [{ filterValues }] = useListParams({ resource, location });\n  const record = filterValues\n    ? Object.keys(filterValues).reduce((rec, fld) => {\n        if (fld.match(/-eq/)) {\n          rec[fld.split('-')[0]] = filterValues[fld];\n        }\n        return rec;\n      }, {})\n    : undefined;\n  const to = {\n    pathname: `/#{entity.model.entityPathMapper[entity.name]}/create`,\n  };\n  to.state = { pathname: location.pathname };\n  if (record) {\n    to.state.record = record;\n  }\n  return (\n    <uix.Button component={Link} to={to} label={label}>\n      {children || <AddIcon />}\n    </uix.Button>\n  );\n};\n\nCreate#{entity.name}Button.propTypes = {\n  label: PropTypes.string.isRequired,\n};\n\nexport const buttons = {\n  Add: Add#{entity.name},\n  CreateButton: Create#{entity.name}Button,\n  <# entity.actions.forEach(action=>{#>\n  #{action.fullName}: #{action.fullName}Button,\n  <#-})#>\n}\n<# end #>"},{"generatedLine":13,"generatedColumn":12,"originalLine":5,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'forms-form-fragments' -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n\nimport React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { useLocation } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport AddIcon from '@material-ui/icons/Add';\nimport { UIXContext } from '../contexts';\nimport useListParams from 'ra-core/lib/controller/useListParams';\n\n<# if(entity.actions.length > 0){#>\nimport { connect } from 'react-redux';\nimport ExecuteActionIcon from '@material-ui/icons/Settings';\n<#}#>\n\n// action definitions\n#{content('actions')}\n\n// rel buttons\n#{content('add-buttons')}\n\n<# block 'actions' : -#>\n<# entity.actions.forEach(action=>{#>\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.model.entityPathMapper[entity.name]}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n  // define this method in dataProvider to use this\n  async function #{action.actionCreatorName}(data, resource){\n\n  }\n*/\n\nconst #{action.fullName}Action  = ({ #{action.actionCreatorName}, record, selectedIds, children }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Button onClick={() =>\n    #{action.actionCreatorName}({record, selectedIds})\n  }\n  label=\"resources.#{entity.name}.actions.#{action.name}\"\n  >\n    {children ? children : (<ExecuteActionIcon/>)}\n  </uix.Button>);}\n\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n<#})#>\n\nexport const actions = {\n<# entity.actions.forEach(action=>{#>\n  #{action.name}:{\n    type:'#{action.actionType}',\n    creator: #{action.actionCreatorName},\n    action: #{action.actionName},\n    button: #{action.fullName}Button,\n  },\n<#})#>\n}\n\n<# end #>\n\n<# block 'add-buttons' : #>\n<#@ context 'entity'#>\nconst Add#{entity.name} = ({ record, target, label, children }) => {\n  const location = useLocation()\n  const uix = useContext(UIXContext);\n  const to = {\n    pathname: `/#{entity.model.entityPathMapper[entity.name]}/create`,\n  };\n\n  to.state = { pathname: location.pathname };\n  const newRecord = target && record && record.id ? { [target]: record.id } : undefined;\n  if (newRecord) {\n    to.state.record = newRecord;\n  }\n  return (\n    <uix.Button\n      component={Link}\n      to={to}\n      label={label}>\n      {children || <AddIcon/>}\n    </uix.Button>\n  );\n};\n\nAdd#{entity.name}.propTypes = {\n  record: PropTypes.object,\n  target: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n}\n\nconst Create#{entity.name}Button = ({ resource, label, children }) => {\n  const location = useLocation()\n  const uix = useContext(UIXContext);\n  const [{ filterValues }] = useListParams({ resource, location });\n  const record = filterValues\n    ? Object.keys(filterValues).reduce((rec, fld) => {\n        if (fld.match(/-eq/)) {\n          rec[fld.split('-')[0]] = filterValues[fld];\n        }\n        return rec;\n      }, {})\n    : undefined;\n  const to = {\n    pathname: `/#{entity.model.entityPathMapper[entity.name]}/create`,\n  };\n  to.state = { pathname: location.pathname };\n  if (record) {\n    to.state.record = record;\n  }\n  return (\n    <uix.Button component={Link} to={to} label={label}>\n      {children || <AddIcon />}\n    </uix.Button>\n  );\n};\n\nCreate#{entity.name}Button.propTypes = {\n  label: PropTypes.string.isRequired,\n};\n\nexport const buttons = {\n  Add: Add#{entity.name},\n  CreateButton: Create#{entity.name}Button,\n  <# entity.actions.forEach(action=>{#>\n  #{action.fullName}: #{action.fullName}Button,\n  <#-})#>\n}\n<# end #>"},{"generatedLine":13,"generatedColumn":58,"originalLine":6,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'forms-form-fragments' -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n\nimport React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { useLocation } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport AddIcon from '@material-ui/icons/Add';\nimport { UIXContext } from '../contexts';\nimport useListParams from 'ra-core/lib/controller/useListParams';\n\n<# if(entity.actions.length > 0){#>\nimport { connect } from 'react-redux';\nimport ExecuteActionIcon from '@material-ui/icons/Settings';\n<#}#>\n\n// action definitions\n#{content('actions')}\n\n// rel buttons\n#{content('add-buttons')}\n\n<# block 'actions' : -#>\n<# entity.actions.forEach(action=>{#>\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.model.entityPathMapper[entity.name]}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n  // define this method in dataProvider to use this\n  async function #{action.actionCreatorName}(data, resource){\n\n  }\n*/\n\nconst #{action.fullName}Action  = ({ #{action.actionCreatorName}, record, selectedIds, children }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Button onClick={() =>\n    #{action.actionCreatorName}({record, selectedIds})\n  }\n  label=\"resources.#{entity.name}.actions.#{action.name}\"\n  >\n    {children ? children : (<ExecuteActionIcon/>)}\n  </uix.Button>);}\n\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n<#})#>\n\nexport const actions = {\n<# entity.actions.forEach(action=>{#>\n  #{action.name}:{\n    type:'#{action.actionType}',\n    creator: #{action.actionCreatorName},\n    action: #{action.actionName},\n    button: #{action.fullName}Button,\n  },\n<#})#>\n}\n\n<# end #>\n\n<# block 'add-buttons' : #>\n<#@ context 'entity'#>\nconst Add#{entity.name} = ({ record, target, label, children }) => {\n  const location = useLocation()\n  const uix = useContext(UIXContext);\n  const to = {\n    pathname: `/#{entity.model.entityPathMapper[entity.name]}/create`,\n  };\n\n  to.state = { pathname: location.pathname };\n  const newRecord = target && record && record.id ? { [target]: record.id } : undefined;\n  if (newRecord) {\n    to.state.record = newRecord;\n  }\n  return (\n    <uix.Button\n      component={Link}\n      to={to}\n      label={label}>\n      {children || <AddIcon/>}\n    </uix.Button>\n  );\n};\n\nAdd#{entity.name}.propTypes = {\n  record: PropTypes.object,\n  target: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n}\n\nconst Create#{entity.name}Button = ({ resource, label, children }) => {\n  const location = useLocation()\n  const uix = useContext(UIXContext);\n  const [{ filterValues }] = useListParams({ resource, location });\n  const record = filterValues\n    ? Object.keys(filterValues).reduce((rec, fld) => {\n        if (fld.match(/-eq/)) {\n          rec[fld.split('-')[0]] = filterValues[fld];\n        }\n        return rec;\n      }, {})\n    : undefined;\n  const to = {\n    pathname: `/#{entity.model.entityPathMapper[entity.name]}/create`,\n  };\n  to.state = { pathname: location.pathname };\n  if (record) {\n    to.state.record = record;\n  }\n  return (\n    <uix.Button component={Link} to={to} label={label}>\n      {children || <AddIcon />}\n    </uix.Button>\n  );\n};\n\nCreate#{entity.name}Button.propTypes = {\n  label: PropTypes.string.isRequired,\n};\n\nexport const buttons = {\n  Add: Add#{entity.name},\n  CreateButton: Create#{entity.name}Button,\n  <# entity.actions.forEach(action=>{#>\n  #{action.fullName}: #{action.fullName}Button,\n  <#-})#>\n}\n<# end #>"},{"generatedLine":13,"generatedColumn":97,"originalLine":7,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'forms-form-fragments' -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n\nimport React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { useLocation } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport AddIcon from '@material-ui/icons/Add';\nimport { UIXContext } from '../contexts';\nimport useListParams from 'ra-core/lib/controller/useListParams';\n\n<# if(entity.actions.length > 0){#>\nimport { connect } from 'react-redux';\nimport ExecuteActionIcon from '@material-ui/icons/Settings';\n<#}#>\n\n// action definitions\n#{content('actions')}\n\n// rel buttons\n#{content('add-buttons')}\n\n<# block 'actions' : -#>\n<# entity.actions.forEach(action=>{#>\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.model.entityPathMapper[entity.name]}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n  // define this method in dataProvider to use this\n  async function #{action.actionCreatorName}(data, resource){\n\n  }\n*/\n\nconst #{action.fullName}Action  = ({ #{action.actionCreatorName}, record, selectedIds, children }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Button onClick={() =>\n    #{action.actionCreatorName}({record, selectedIds})\n  }\n  label=\"resources.#{entity.name}.actions.#{action.name}\"\n  >\n    {children ? children : (<ExecuteActionIcon/>)}\n  </uix.Button>);}\n\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n<#})#>\n\nexport const actions = {\n<# entity.actions.forEach(action=>{#>\n  #{action.name}:{\n    type:'#{action.actionType}',\n    creator: #{action.actionCreatorName},\n    action: #{action.actionName},\n    button: #{action.fullName}Button,\n  },\n<#})#>\n}\n\n<# end #>\n\n<# block 'add-buttons' : #>\n<#@ context 'entity'#>\nconst Add#{entity.name} = ({ record, target, label, children }) => {\n  const location = useLocation()\n  const uix = useContext(UIXContext);\n  const to = {\n    pathname: `/#{entity.model.entityPathMapper[entity.name]}/create`,\n  };\n\n  to.state = { pathname: location.pathname };\n  const newRecord = target && record && record.id ? { [target]: record.id } : undefined;\n  if (newRecord) {\n    to.state.record = newRecord;\n  }\n  return (\n    <uix.Button\n      component={Link}\n      to={to}\n      label={label}>\n      {children || <AddIcon/>}\n    </uix.Button>\n  );\n};\n\nAdd#{entity.name}.propTypes = {\n  record: PropTypes.object,\n  target: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n}\n\nconst Create#{entity.name}Button = ({ resource, label, children }) => {\n  const location = useLocation()\n  const uix = useContext(UIXContext);\n  const [{ filterValues }] = useListParams({ resource, location });\n  const record = filterValues\n    ? Object.keys(filterValues).reduce((rec, fld) => {\n        if (fld.match(/-eq/)) {\n          rec[fld.split('-')[0]] = filterValues[fld];\n        }\n        return rec;\n      }, {})\n    : undefined;\n  const to = {\n    pathname: `/#{entity.model.entityPathMapper[entity.name]}/create`,\n  };\n  to.state = { pathname: location.pathname };\n  if (record) {\n    to.state.record = record;\n  }\n  return (\n    <uix.Button component={Link} to={to} label={label}>\n      {children || <AddIcon />}\n    </uix.Button>\n  );\n};\n\nCreate#{entity.name}Button.propTypes = {\n  label: PropTypes.string.isRequired,\n};\n\nexport const buttons = {\n  Add: Add#{entity.name},\n  CreateButton: Create#{entity.name}Button,\n  <# entity.actions.forEach(action=>{#>\n  #{action.fullName}: #{action.fullName}Button,\n  <#-})#>\n}\n<# end #>"},{"generatedLine":13,"generatedColumn":144,"originalLine":8,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'forms-form-fragments' -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n\nimport React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { useLocation } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport AddIcon from '@material-ui/icons/Add';\nimport { UIXContext } from '../contexts';\nimport useListParams from 'ra-core/lib/controller/useListParams';\n\n<# if(entity.actions.length > 0){#>\nimport { connect } from 'react-redux';\nimport ExecuteActionIcon from '@material-ui/icons/Settings';\n<#}#>\n\n// action definitions\n#{content('actions')}\n\n// rel buttons\n#{content('add-buttons')}\n\n<# block 'actions' : -#>\n<# entity.actions.forEach(action=>{#>\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.model.entityPathMapper[entity.name]}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n  // define this method in dataProvider to use this\n  async function #{action.actionCreatorName}(data, resource){\n\n  }\n*/\n\nconst #{action.fullName}Action  = ({ #{action.actionCreatorName}, record, selectedIds, children }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Button onClick={() =>\n    #{action.actionCreatorName}({record, selectedIds})\n  }\n  label=\"resources.#{entity.name}.actions.#{action.name}\"\n  >\n    {children ? children : (<ExecuteActionIcon/>)}\n  </uix.Button>);}\n\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n<#})#>\n\nexport const actions = {\n<# entity.actions.forEach(action=>{#>\n  #{action.name}:{\n    type:'#{action.actionType}',\n    creator: #{action.actionCreatorName},\n    action: #{action.actionName},\n    button: #{action.fullName}Button,\n  },\n<#})#>\n}\n\n<# end #>\n\n<# block 'add-buttons' : #>\n<#@ context 'entity'#>\nconst Add#{entity.name} = ({ record, target, label, children }) => {\n  const location = useLocation()\n  const uix = useContext(UIXContext);\n  const to = {\n    pathname: `/#{entity.model.entityPathMapper[entity.name]}/create`,\n  };\n\n  to.state = { pathname: location.pathname };\n  const newRecord = target && record && record.id ? { [target]: record.id } : undefined;\n  if (newRecord) {\n    to.state.record = newRecord;\n  }\n  return (\n    <uix.Button\n      component={Link}\n      to={to}\n      label={label}>\n      {children || <AddIcon/>}\n    </uix.Button>\n  );\n};\n\nAdd#{entity.name}.propTypes = {\n  record: PropTypes.object,\n  target: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n}\n\nconst Create#{entity.name}Button = ({ resource, label, children }) => {\n  const location = useLocation()\n  const uix = useContext(UIXContext);\n  const [{ filterValues }] = useListParams({ resource, location });\n  const record = filterValues\n    ? Object.keys(filterValues).reduce((rec, fld) => {\n        if (fld.match(/-eq/)) {\n          rec[fld.split('-')[0]] = filterValues[fld];\n        }\n        return rec;\n      }, {})\n    : undefined;\n  const to = {\n    pathname: `/#{entity.model.entityPathMapper[entity.name]}/create`,\n  };\n  to.state = { pathname: location.pathname };\n  if (record) {\n    to.state.record = record;\n  }\n  return (\n    <uix.Button component={Link} to={to} label={label}>\n      {children || <AddIcon />}\n    </uix.Button>\n  );\n};\n\nCreate#{entity.name}Button.propTypes = {\n  label: PropTypes.string.isRequired,\n};\n\nexport const buttons = {\n  Add: Add#{entity.name},\n  CreateButton: Create#{entity.name}Button,\n  <# entity.actions.forEach(action=>{#>\n  #{action.fullName}: #{action.fullName}Button,\n  <#-})#>\n}\n<# end #>"},{"generatedLine":13,"generatedColumn":188,"originalLine":9,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'forms-form-fragments' -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n\nimport React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { useLocation } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport AddIcon from '@material-ui/icons/Add';\nimport { UIXContext } from '../contexts';\nimport useListParams from 'ra-core/lib/controller/useListParams';\n\n<# if(entity.actions.length > 0){#>\nimport { connect } from 'react-redux';\nimport ExecuteActionIcon from '@material-ui/icons/Settings';\n<#}#>\n\n// action definitions\n#{content('actions')}\n\n// rel buttons\n#{content('add-buttons')}\n\n<# block 'actions' : -#>\n<# entity.actions.forEach(action=>{#>\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.model.entityPathMapper[entity.name]}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n  // define this method in dataProvider to use this\n  async function #{action.actionCreatorName}(data, resource){\n\n  }\n*/\n\nconst #{action.fullName}Action  = ({ #{action.actionCreatorName}, record, selectedIds, children }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Button onClick={() =>\n    #{action.actionCreatorName}({record, selectedIds})\n  }\n  label=\"resources.#{entity.name}.actions.#{action.name}\"\n  >\n    {children ? children : (<ExecuteActionIcon/>)}\n  </uix.Button>);}\n\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n<#})#>\n\nexport const actions = {\n<# entity.actions.forEach(action=>{#>\n  #{action.name}:{\n    type:'#{action.actionType}',\n    creator: #{action.actionCreatorName},\n    action: #{action.actionName},\n    button: #{action.fullName}Button,\n  },\n<#})#>\n}\n\n<# end #>\n\n<# block 'add-buttons' : #>\n<#@ context 'entity'#>\nconst Add#{entity.name} = ({ record, target, label, children }) => {\n  const location = useLocation()\n  const uix = useContext(UIXContext);\n  const to = {\n    pathname: `/#{entity.model.entityPathMapper[entity.name]}/create`,\n  };\n\n  to.state = { pathname: location.pathname };\n  const newRecord = target && record && record.id ? { [target]: record.id } : undefined;\n  if (newRecord) {\n    to.state.record = newRecord;\n  }\n  return (\n    <uix.Button\n      component={Link}\n      to={to}\n      label={label}>\n      {children || <AddIcon/>}\n    </uix.Button>\n  );\n};\n\nAdd#{entity.name}.propTypes = {\n  record: PropTypes.object,\n  target: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n}\n\nconst Create#{entity.name}Button = ({ resource, label, children }) => {\n  const location = useLocation()\n  const uix = useContext(UIXContext);\n  const [{ filterValues }] = useListParams({ resource, location });\n  const record = filterValues\n    ? Object.keys(filterValues).reduce((rec, fld) => {\n        if (fld.match(/-eq/)) {\n          rec[fld.split('-')[0]] = filterValues[fld];\n        }\n        return rec;\n      }, {})\n    : undefined;\n  const to = {\n    pathname: `/#{entity.model.entityPathMapper[entity.name]}/create`,\n  };\n  to.state = { pathname: location.pathname };\n  if (record) {\n    to.state.record = record;\n  }\n  return (\n    <uix.Button component={Link} to={to} label={label}>\n      {children || <AddIcon />}\n    </uix.Button>\n  );\n};\n\nCreate#{entity.name}Button.propTypes = {\n  label: PropTypes.string.isRequired,\n};\n\nexport const buttons = {\n  Add: Add#{entity.name},\n  CreateButton: Create#{entity.name}Button,\n  <# entity.actions.forEach(action=>{#>\n  #{action.fullName}: #{action.fullName}Button,\n  <#-})#>\n}\n<# end #>"},{"generatedLine":13,"generatedColumn":237,"originalLine":10,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'forms-form-fragments' -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n\nimport React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { useLocation } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport AddIcon from '@material-ui/icons/Add';\nimport { UIXContext } from '../contexts';\nimport useListParams from 'ra-core/lib/controller/useListParams';\n\n<# if(entity.actions.length > 0){#>\nimport { connect } from 'react-redux';\nimport ExecuteActionIcon from '@material-ui/icons/Settings';\n<#}#>\n\n// action definitions\n#{content('actions')}\n\n// rel buttons\n#{content('add-buttons')}\n\n<# block 'actions' : -#>\n<# entity.actions.forEach(action=>{#>\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.model.entityPathMapper[entity.name]}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n  // define this method in dataProvider to use this\n  async function #{action.actionCreatorName}(data, resource){\n\n  }\n*/\n\nconst #{action.fullName}Action  = ({ #{action.actionCreatorName}, record, selectedIds, children }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Button onClick={() =>\n    #{action.actionCreatorName}({record, selectedIds})\n  }\n  label=\"resources.#{entity.name}.actions.#{action.name}\"\n  >\n    {children ? children : (<ExecuteActionIcon/>)}\n  </uix.Button>);}\n\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n<#})#>\n\nexport const actions = {\n<# entity.actions.forEach(action=>{#>\n  #{action.name}:{\n    type:'#{action.actionType}',\n    creator: #{action.actionCreatorName},\n    action: #{action.actionName},\n    button: #{action.fullName}Button,\n  },\n<#})#>\n}\n\n<# end #>\n\n<# block 'add-buttons' : #>\n<#@ context 'entity'#>\nconst Add#{entity.name} = ({ record, target, label, children }) => {\n  const location = useLocation()\n  const uix = useContext(UIXContext);\n  const to = {\n    pathname: `/#{entity.model.entityPathMapper[entity.name]}/create`,\n  };\n\n  to.state = { pathname: location.pathname };\n  const newRecord = target && record && record.id ? { [target]: record.id } : undefined;\n  if (newRecord) {\n    to.state.record = newRecord;\n  }\n  return (\n    <uix.Button\n      component={Link}\n      to={to}\n      label={label}>\n      {children || <AddIcon/>}\n    </uix.Button>\n  );\n};\n\nAdd#{entity.name}.propTypes = {\n  record: PropTypes.object,\n  target: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n}\n\nconst Create#{entity.name}Button = ({ resource, label, children }) => {\n  const location = useLocation()\n  const uix = useContext(UIXContext);\n  const [{ filterValues }] = useListParams({ resource, location });\n  const record = filterValues\n    ? Object.keys(filterValues).reduce((rec, fld) => {\n        if (fld.match(/-eq/)) {\n          rec[fld.split('-')[0]] = filterValues[fld];\n        }\n        return rec;\n      }, {})\n    : undefined;\n  const to = {\n    pathname: `/#{entity.model.entityPathMapper[entity.name]}/create`,\n  };\n  to.state = { pathname: location.pathname };\n  if (record) {\n    to.state.record = record;\n  }\n  return (\n    <uix.Button component={Link} to={to} label={label}>\n      {children || <AddIcon />}\n    </uix.Button>\n  );\n};\n\nCreate#{entity.name}Button.propTypes = {\n  label: PropTypes.string.isRequired,\n};\n\nexport const buttons = {\n  Add: Add#{entity.name},\n  CreateButton: Create#{entity.name}Button,\n  <# entity.actions.forEach(action=>{#>\n  #{action.fullName}: #{action.fullName}Button,\n  <#-})#>\n}\n<# end #>"},{"generatedLine":13,"generatedColumn":282,"originalLine":11,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'forms-form-fragments' -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n\nimport React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { useLocation } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport AddIcon from '@material-ui/icons/Add';\nimport { UIXContext } from '../contexts';\nimport useListParams from 'ra-core/lib/controller/useListParams';\n\n<# if(entity.actions.length > 0){#>\nimport { connect } from 'react-redux';\nimport ExecuteActionIcon from '@material-ui/icons/Settings';\n<#}#>\n\n// action definitions\n#{content('actions')}\n\n// rel buttons\n#{content('add-buttons')}\n\n<# block 'actions' : -#>\n<# entity.actions.forEach(action=>{#>\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.model.entityPathMapper[entity.name]}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n  // define this method in dataProvider to use this\n  async function #{action.actionCreatorName}(data, resource){\n\n  }\n*/\n\nconst #{action.fullName}Action  = ({ #{action.actionCreatorName}, record, selectedIds, children }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Button onClick={() =>\n    #{action.actionCreatorName}({record, selectedIds})\n  }\n  label=\"resources.#{entity.name}.actions.#{action.name}\"\n  >\n    {children ? children : (<ExecuteActionIcon/>)}\n  </uix.Button>);}\n\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n<#})#>\n\nexport const actions = {\n<# entity.actions.forEach(action=>{#>\n  #{action.name}:{\n    type:'#{action.actionType}',\n    creator: #{action.actionCreatorName},\n    action: #{action.actionName},\n    button: #{action.fullName}Button,\n  },\n<#})#>\n}\n\n<# end #>\n\n<# block 'add-buttons' : #>\n<#@ context 'entity'#>\nconst Add#{entity.name} = ({ record, target, label, children }) => {\n  const location = useLocation()\n  const uix = useContext(UIXContext);\n  const to = {\n    pathname: `/#{entity.model.entityPathMapper[entity.name]}/create`,\n  };\n\n  to.state = { pathname: location.pathname };\n  const newRecord = target && record && record.id ? { [target]: record.id } : undefined;\n  if (newRecord) {\n    to.state.record = newRecord;\n  }\n  return (\n    <uix.Button\n      component={Link}\n      to={to}\n      label={label}>\n      {children || <AddIcon/>}\n    </uix.Button>\n  );\n};\n\nAdd#{entity.name}.propTypes = {\n  record: PropTypes.object,\n  target: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n}\n\nconst Create#{entity.name}Button = ({ resource, label, children }) => {\n  const location = useLocation()\n  const uix = useContext(UIXContext);\n  const [{ filterValues }] = useListParams({ resource, location });\n  const record = filterValues\n    ? Object.keys(filterValues).reduce((rec, fld) => {\n        if (fld.match(/-eq/)) {\n          rec[fld.split('-')[0]] = filterValues[fld];\n        }\n        return rec;\n      }, {})\n    : undefined;\n  const to = {\n    pathname: `/#{entity.model.entityPathMapper[entity.name]}/create`,\n  };\n  to.state = { pathname: location.pathname };\n  if (record) {\n    to.state.record = record;\n  }\n  return (\n    <uix.Button component={Link} to={to} label={label}>\n      {children || <AddIcon />}\n    </uix.Button>\n  );\n};\n\nCreate#{entity.name}Button.propTypes = {\n  label: PropTypes.string.isRequired,\n};\n\nexport const buttons = {\n  Add: Add#{entity.name},\n  CreateButton: Create#{entity.name}Button,\n  <# entity.actions.forEach(action=>{#>\n  #{action.fullName}: #{action.fullName}Button,\n  <#-})#>\n}\n<# end #>"},{"generatedLine":13,"generatedColumn":351,"originalLine":12,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'forms-form-fragments' -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n\nimport React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { useLocation } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport AddIcon from '@material-ui/icons/Add';\nimport { UIXContext } from '../contexts';\nimport useListParams from 'ra-core/lib/controller/useListParams';\n\n<# if(entity.actions.length > 0){#>\nimport { connect } from 'react-redux';\nimport ExecuteActionIcon from '@material-ui/icons/Settings';\n<#}#>\n\n// action definitions\n#{content('actions')}\n\n// rel buttons\n#{content('add-buttons')}\n\n<# block 'actions' : -#>\n<# entity.actions.forEach(action=>{#>\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.model.entityPathMapper[entity.name]}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n  // define this method in dataProvider to use this\n  async function #{action.actionCreatorName}(data, resource){\n\n  }\n*/\n\nconst #{action.fullName}Action  = ({ #{action.actionCreatorName}, record, selectedIds, children }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Button onClick={() =>\n    #{action.actionCreatorName}({record, selectedIds})\n  }\n  label=\"resources.#{entity.name}.actions.#{action.name}\"\n  >\n    {children ? children : (<ExecuteActionIcon/>)}\n  </uix.Button>);}\n\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n<#})#>\n\nexport const actions = {\n<# entity.actions.forEach(action=>{#>\n  #{action.name}:{\n    type:'#{action.actionType}',\n    creator: #{action.actionCreatorName},\n    action: #{action.actionName},\n    button: #{action.fullName}Button,\n  },\n<#})#>\n}\n\n<# end #>\n\n<# block 'add-buttons' : #>\n<#@ context 'entity'#>\nconst Add#{entity.name} = ({ record, target, label, children }) => {\n  const location = useLocation()\n  const uix = useContext(UIXContext);\n  const to = {\n    pathname: `/#{entity.model.entityPathMapper[entity.name]}/create`,\n  };\n\n  to.state = { pathname: location.pathname };\n  const newRecord = target && record && record.id ? { [target]: record.id } : undefined;\n  if (newRecord) {\n    to.state.record = newRecord;\n  }\n  return (\n    <uix.Button\n      component={Link}\n      to={to}\n      label={label}>\n      {children || <AddIcon/>}\n    </uix.Button>\n  );\n};\n\nAdd#{entity.name}.propTypes = {\n  record: PropTypes.object,\n  target: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n}\n\nconst Create#{entity.name}Button = ({ resource, label, children }) => {\n  const location = useLocation()\n  const uix = useContext(UIXContext);\n  const [{ filterValues }] = useListParams({ resource, location });\n  const record = filterValues\n    ? Object.keys(filterValues).reduce((rec, fld) => {\n        if (fld.match(/-eq/)) {\n          rec[fld.split('-')[0]] = filterValues[fld];\n        }\n        return rec;\n      }, {})\n    : undefined;\n  const to = {\n    pathname: `/#{entity.model.entityPathMapper[entity.name]}/create`,\n  };\n  to.state = { pathname: location.pathname };\n  if (record) {\n    to.state.record = record;\n  }\n  return (\n    <uix.Button component={Link} to={to} label={label}>\n      {children || <AddIcon />}\n    </uix.Button>\n  );\n};\n\nCreate#{entity.name}Button.propTypes = {\n  label: PropTypes.string.isRequired,\n};\n\nexport const buttons = {\n  Add: Add#{entity.name},\n  CreateButton: Create#{entity.name}Button,\n  <# entity.actions.forEach(action=>{#>\n  #{action.fullName}: #{action.fullName}Button,\n  <#-})#>\n}\n<# end #>"},{"generatedLine":13,"generatedColumn":355,"originalLine":13,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias 'forms-form-fragments' -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n\nimport React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { useLocation } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport AddIcon from '@material-ui/icons/Add';\nimport { UIXContext } from '../contexts';\nimport useListParams from 'ra-core/lib/controller/useListParams';\n\n<# if(entity.actions.length > 0){#>\nimport { connect } from 'react-redux';\nimport ExecuteActionIcon from '@material-ui/icons/Settings';\n<#}#>\n\n// action definitions\n#{content('actions')}\n\n// rel buttons\n#{content('add-buttons')}\n\n<# block 'actions' : -#>\n<# entity.actions.forEach(action=>{#>\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.model.entityPathMapper[entity.name]}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n  // define this method in dataProvider to use this\n  async function #{action.actionCreatorName}(data, resource){\n\n  }\n*/\n\nconst #{action.fullName}Action  = ({ #{action.actionCreatorName}, record, selectedIds, children }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Button onClick={() =>\n    #{action.actionCreatorName}({record, selectedIds})\n  }\n  label=\"resources.#{entity.name}.actions.#{action.name}\"\n  >\n    {children ? children : (<ExecuteActionIcon/>)}\n  </uix.Button>);}\n\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n<#})#>\n\nexport const actions = {\n<# entity.actions.forEach(action=>{#>\n  #{action.name}:{\n    type:'#{action.actionType}',\n    creator: #{action.actionCreatorName},\n    action: #{action.actionName},\n    button: #{action.fullName}Button,\n  },\n<#})#>\n}\n\n<# end #>\n\n<# block 'add-buttons' : #>\n<#@ context 'entity'#>\nconst Add#{entity.name} = ({ record, target, label, children }) => {\n  const location = useLocation()\n  const uix = useContext(UIXContext);\n  const to = {\n    pathname: `/#{entity.model.entityPathMapper[entity.name]}/create`,\n  };\n\n  to.state = { pathname: location.pathname };\n  const newRecord = target && record && record.id ? { [target]: record.id } : undefined;\n  if (newRecord) {\n    to.state.record = newRecord;\n  }\n  return (\n    <uix.Button\n      component={Link}\n      to={to}\n      label={label}>\n      {children || <AddIcon/>}\n    </uix.Button>\n  );\n};\n\nAdd#{entity.name}.propTypes = {\n  record: PropTypes.object,\n  target: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n}\n\nconst Create#{entity.name}Button = ({ resource, label, children }) => {\n  const location = useLocation()\n  const uix = useContext(UIXContext);\n  const [{ filterValues }] = useListParams({ resource, location });\n  const record = filterValues\n    ? Object.keys(filterValues).reduce((rec, fld) => {\n        if (fld.match(/-eq/)) {\n          rec[fld.split('-')[0]] = filterValues[fld];\n        }\n        return rec;\n      }, {})\n    : undefined;\n  const to = {\n    pathname: `/#{entity.model.entityPathMapper[entity.name]}/create`,\n  };\n  to.state = { pathname: location.pathname };\n  if (record) {\n    to.state.record = record;\n  }\n  return (\n    <uix.Button component={Link} to={to} label={label}>\n      {children || <AddIcon />}\n    </uix.Button>\n  );\n};\n\nCreate#{entity.name}Button.propTypes = {\n  label: PropTypes.string.isRequired,\n};\n\nexport const buttons = {\n  Add: Add#{entity.name},\n  CreateButton: Create#{entity.name}Button,\n  <# entity.actions.forEach(action=>{#>\n  #{action.fullName}: #{action.fullName}Button,\n  <#-})#>\n}\n<# end #>"},{"generatedLine":14,"generatedColumn":4,"originalLine":13,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias 'forms-form-fragments' -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n\nimport React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { useLocation } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport AddIcon from '@material-ui/icons/Add';\nimport { UIXContext } from '../contexts';\nimport useListParams from 'ra-core/lib/controller/useListParams';\n\n<# if(entity.actions.length > 0){#>\nimport { connect } from 'react-redux';\nimport ExecuteActionIcon from '@material-ui/icons/Settings';\n<#}#>\n\n// action definitions\n#{content('actions')}\n\n// rel buttons\n#{content('add-buttons')}\n\n<# block 'actions' : -#>\n<# entity.actions.forEach(action=>{#>\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.model.entityPathMapper[entity.name]}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n  // define this method in dataProvider to use this\n  async function #{action.actionCreatorName}(data, resource){\n\n  }\n*/\n\nconst #{action.fullName}Action  = ({ #{action.actionCreatorName}, record, selectedIds, children }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Button onClick={() =>\n    #{action.actionCreatorName}({record, selectedIds})\n  }\n  label=\"resources.#{entity.name}.actions.#{action.name}\"\n  >\n    {children ? children : (<ExecuteActionIcon/>)}\n  </uix.Button>);}\n\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n<#})#>\n\nexport const actions = {\n<# entity.actions.forEach(action=>{#>\n  #{action.name}:{\n    type:'#{action.actionType}',\n    creator: #{action.actionCreatorName},\n    action: #{action.actionName},\n    button: #{action.fullName}Button,\n  },\n<#})#>\n}\n\n<# end #>\n\n<# block 'add-buttons' : #>\n<#@ context 'entity'#>\nconst Add#{entity.name} = ({ record, target, label, children }) => {\n  const location = useLocation()\n  const uix = useContext(UIXContext);\n  const to = {\n    pathname: `/#{entity.model.entityPathMapper[entity.name]}/create`,\n  };\n\n  to.state = { pathname: location.pathname };\n  const newRecord = target && record && record.id ? { [target]: record.id } : undefined;\n  if (newRecord) {\n    to.state.record = newRecord;\n  }\n  return (\n    <uix.Button\n      component={Link}\n      to={to}\n      label={label}>\n      {children || <AddIcon/>}\n    </uix.Button>\n  );\n};\n\nAdd#{entity.name}.propTypes = {\n  record: PropTypes.object,\n  target: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n}\n\nconst Create#{entity.name}Button = ({ resource, label, children }) => {\n  const location = useLocation()\n  const uix = useContext(UIXContext);\n  const [{ filterValues }] = useListParams({ resource, location });\n  const record = filterValues\n    ? Object.keys(filterValues).reduce((rec, fld) => {\n        if (fld.match(/-eq/)) {\n          rec[fld.split('-')[0]] = filterValues[fld];\n        }\n        return rec;\n      }, {})\n    : undefined;\n  const to = {\n    pathname: `/#{entity.model.entityPathMapper[entity.name]}/create`,\n  };\n  to.state = { pathname: location.pathname };\n  if (record) {\n    to.state.record = record;\n  }\n  return (\n    <uix.Button component={Link} to={to} label={label}>\n      {children || <AddIcon />}\n    </uix.Button>\n  );\n};\n\nCreate#{entity.name}Button.propTypes = {\n  label: PropTypes.string.isRequired,\n};\n\nexport const buttons = {\n  Add: Add#{entity.name},\n  CreateButton: Create#{entity.name}Button,\n  <# entity.actions.forEach(action=>{#>\n  #{action.fullName}: #{action.fullName}Button,\n  <#-})#>\n}\n<# end #>"},{"generatedLine":14,"generatedColumn":4,"originalLine":13,"originalColumn":36,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'forms-form-fragments' -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n\nimport React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { useLocation } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport AddIcon from '@material-ui/icons/Add';\nimport { UIXContext } from '../contexts';\nimport useListParams from 'ra-core/lib/controller/useListParams';\n\n<# if(entity.actions.length > 0){#>\nimport { connect } from 'react-redux';\nimport ExecuteActionIcon from '@material-ui/icons/Settings';\n<#}#>\n\n// action definitions\n#{content('actions')}\n\n// rel buttons\n#{content('add-buttons')}\n\n<# block 'actions' : -#>\n<# entity.actions.forEach(action=>{#>\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.model.entityPathMapper[entity.name]}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n  // define this method in dataProvider to use this\n  async function #{action.actionCreatorName}(data, resource){\n\n  }\n*/\n\nconst #{action.fullName}Action  = ({ #{action.actionCreatorName}, record, selectedIds, children }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Button onClick={() =>\n    #{action.actionCreatorName}({record, selectedIds})\n  }\n  label=\"resources.#{entity.name}.actions.#{action.name}\"\n  >\n    {children ? children : (<ExecuteActionIcon/>)}\n  </uix.Button>);}\n\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n<#})#>\n\nexport const actions = {\n<# entity.actions.forEach(action=>{#>\n  #{action.name}:{\n    type:'#{action.actionType}',\n    creator: #{action.actionCreatorName},\n    action: #{action.actionName},\n    button: #{action.fullName}Button,\n  },\n<#})#>\n}\n\n<# end #>\n\n<# block 'add-buttons' : #>\n<#@ context 'entity'#>\nconst Add#{entity.name} = ({ record, target, label, children }) => {\n  const location = useLocation()\n  const uix = useContext(UIXContext);\n  const to = {\n    pathname: `/#{entity.model.entityPathMapper[entity.name]}/create`,\n  };\n\n  to.state = { pathname: location.pathname };\n  const newRecord = target && record && record.id ? { [target]: record.id } : undefined;\n  if (newRecord) {\n    to.state.record = newRecord;\n  }\n  return (\n    <uix.Button\n      component={Link}\n      to={to}\n      label={label}>\n      {children || <AddIcon/>}\n    </uix.Button>\n  );\n};\n\nAdd#{entity.name}.propTypes = {\n  record: PropTypes.object,\n  target: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n}\n\nconst Create#{entity.name}Button = ({ resource, label, children }) => {\n  const location = useLocation()\n  const uix = useContext(UIXContext);\n  const [{ filterValues }] = useListParams({ resource, location });\n  const record = filterValues\n    ? Object.keys(filterValues).reduce((rec, fld) => {\n        if (fld.match(/-eq/)) {\n          rec[fld.split('-')[0]] = filterValues[fld];\n        }\n        return rec;\n      }, {})\n    : undefined;\n  const to = {\n    pathname: `/#{entity.model.entityPathMapper[entity.name]}/create`,\n  };\n  to.state = { pathname: location.pathname };\n  if (record) {\n    to.state.record = record;\n  }\n  return (\n    <uix.Button component={Link} to={to} label={label}>\n      {children || <AddIcon />}\n    </uix.Button>\n  );\n};\n\nCreate#{entity.name}Button.propTypes = {\n  label: PropTypes.string.isRequired,\n};\n\nexport const buttons = {\n  Add: Add#{entity.name},\n  CreateButton: Create#{entity.name}Button,\n  <# entity.actions.forEach(action=>{#>\n  #{action.fullName}: #{action.fullName}Button,\n  <#-})#>\n}\n<# end #>"},{"generatedLine":14,"generatedColumn":8,"originalLine":14,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'forms-form-fragments' -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n\nimport React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { useLocation } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport AddIcon from '@material-ui/icons/Add';\nimport { UIXContext } from '../contexts';\nimport useListParams from 'ra-core/lib/controller/useListParams';\n\n<# if(entity.actions.length > 0){#>\nimport { connect } from 'react-redux';\nimport ExecuteActionIcon from '@material-ui/icons/Settings';\n<#}#>\n\n// action definitions\n#{content('actions')}\n\n// rel buttons\n#{content('add-buttons')}\n\n<# block 'actions' : -#>\n<# entity.actions.forEach(action=>{#>\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.model.entityPathMapper[entity.name]}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n  // define this method in dataProvider to use this\n  async function #{action.actionCreatorName}(data, resource){\n\n  }\n*/\n\nconst #{action.fullName}Action  = ({ #{action.actionCreatorName}, record, selectedIds, children }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Button onClick={() =>\n    #{action.actionCreatorName}({record, selectedIds})\n  }\n  label=\"resources.#{entity.name}.actions.#{action.name}\"\n  >\n    {children ? children : (<ExecuteActionIcon/>)}\n  </uix.Button>);}\n\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n<#})#>\n\nexport const actions = {\n<# entity.actions.forEach(action=>{#>\n  #{action.name}:{\n    type:'#{action.actionType}',\n    creator: #{action.actionCreatorName},\n    action: #{action.actionName},\n    button: #{action.fullName}Button,\n  },\n<#})#>\n}\n\n<# end #>\n\n<# block 'add-buttons' : #>\n<#@ context 'entity'#>\nconst Add#{entity.name} = ({ record, target, label, children }) => {\n  const location = useLocation()\n  const uix = useContext(UIXContext);\n  const to = {\n    pathname: `/#{entity.model.entityPathMapper[entity.name]}/create`,\n  };\n\n  to.state = { pathname: location.pathname };\n  const newRecord = target && record && record.id ? { [target]: record.id } : undefined;\n  if (newRecord) {\n    to.state.record = newRecord;\n  }\n  return (\n    <uix.Button\n      component={Link}\n      to={to}\n      label={label}>\n      {children || <AddIcon/>}\n    </uix.Button>\n  );\n};\n\nAdd#{entity.name}.propTypes = {\n  record: PropTypes.object,\n  target: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n}\n\nconst Create#{entity.name}Button = ({ resource, label, children }) => {\n  const location = useLocation()\n  const uix = useContext(UIXContext);\n  const [{ filterValues }] = useListParams({ resource, location });\n  const record = filterValues\n    ? Object.keys(filterValues).reduce((rec, fld) => {\n        if (fld.match(/-eq/)) {\n          rec[fld.split('-')[0]] = filterValues[fld];\n        }\n        return rec;\n      }, {})\n    : undefined;\n  const to = {\n    pathname: `/#{entity.model.entityPathMapper[entity.name]}/create`,\n  };\n  to.state = { pathname: location.pathname };\n  if (record) {\n    to.state.record = record;\n  }\n  return (\n    <uix.Button component={Link} to={to} label={label}>\n      {children || <AddIcon />}\n    </uix.Button>\n  );\n};\n\nCreate#{entity.name}Button.propTypes = {\n  label: PropTypes.string.isRequired,\n};\n\nexport const buttons = {\n  Add: Add#{entity.name},\n  CreateButton: Create#{entity.name}Button,\n  <# entity.actions.forEach(action=>{#>\n  #{action.fullName}: #{action.fullName}Button,\n  <#-})#>\n}\n<# end #>"},{"generatedLine":14,"generatedColumn":50,"originalLine":15,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'forms-form-fragments' -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n\nimport React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { useLocation } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport AddIcon from '@material-ui/icons/Add';\nimport { UIXContext } from '../contexts';\nimport useListParams from 'ra-core/lib/controller/useListParams';\n\n<# if(entity.actions.length > 0){#>\nimport { connect } from 'react-redux';\nimport ExecuteActionIcon from '@material-ui/icons/Settings';\n<#}#>\n\n// action definitions\n#{content('actions')}\n\n// rel buttons\n#{content('add-buttons')}\n\n<# block 'actions' : -#>\n<# entity.actions.forEach(action=>{#>\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.model.entityPathMapper[entity.name]}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n  // define this method in dataProvider to use this\n  async function #{action.actionCreatorName}(data, resource){\n\n  }\n*/\n\nconst #{action.fullName}Action  = ({ #{action.actionCreatorName}, record, selectedIds, children }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Button onClick={() =>\n    #{action.actionCreatorName}({record, selectedIds})\n  }\n  label=\"resources.#{entity.name}.actions.#{action.name}\"\n  >\n    {children ? children : (<ExecuteActionIcon/>)}\n  </uix.Button>);}\n\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n<#})#>\n\nexport const actions = {\n<# entity.actions.forEach(action=>{#>\n  #{action.name}:{\n    type:'#{action.actionType}',\n    creator: #{action.actionCreatorName},\n    action: #{action.actionName},\n    button: #{action.fullName}Button,\n  },\n<#})#>\n}\n\n<# end #>\n\n<# block 'add-buttons' : #>\n<#@ context 'entity'#>\nconst Add#{entity.name} = ({ record, target, label, children }) => {\n  const location = useLocation()\n  const uix = useContext(UIXContext);\n  const to = {\n    pathname: `/#{entity.model.entityPathMapper[entity.name]}/create`,\n  };\n\n  to.state = { pathname: location.pathname };\n  const newRecord = target && record && record.id ? { [target]: record.id } : undefined;\n  if (newRecord) {\n    to.state.record = newRecord;\n  }\n  return (\n    <uix.Button\n      component={Link}\n      to={to}\n      label={label}>\n      {children || <AddIcon/>}\n    </uix.Button>\n  );\n};\n\nAdd#{entity.name}.propTypes = {\n  record: PropTypes.object,\n  target: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n}\n\nconst Create#{entity.name}Button = ({ resource, label, children }) => {\n  const location = useLocation()\n  const uix = useContext(UIXContext);\n  const [{ filterValues }] = useListParams({ resource, location });\n  const record = filterValues\n    ? Object.keys(filterValues).reduce((rec, fld) => {\n        if (fld.match(/-eq/)) {\n          rec[fld.split('-')[0]] = filterValues[fld];\n        }\n        return rec;\n      }, {})\n    : undefined;\n  const to = {\n    pathname: `/#{entity.model.entityPathMapper[entity.name]}/create`,\n  };\n  to.state = { pathname: location.pathname };\n  if (record) {\n    to.state.record = record;\n  }\n  return (\n    <uix.Button component={Link} to={to} label={label}>\n      {children || <AddIcon />}\n    </uix.Button>\n  );\n};\n\nCreate#{entity.name}Button.propTypes = {\n  label: PropTypes.string.isRequired,\n};\n\nexport const buttons = {\n  Add: Add#{entity.name},\n  CreateButton: Create#{entity.name}Button,\n  <# entity.actions.forEach(action=>{#>\n  #{action.fullName}: #{action.fullName}Button,\n  <#-})#>\n}\n<# end #>"},{"generatedLine":14,"generatedColumn":114,"originalLine":16,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias 'forms-form-fragments' -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n\nimport React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { useLocation } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport AddIcon from '@material-ui/icons/Add';\nimport { UIXContext } from '../contexts';\nimport useListParams from 'ra-core/lib/controller/useListParams';\n\n<# if(entity.actions.length > 0){#>\nimport { connect } from 'react-redux';\nimport ExecuteActionIcon from '@material-ui/icons/Settings';\n<#}#>\n\n// action definitions\n#{content('actions')}\n\n// rel buttons\n#{content('add-buttons')}\n\n<# block 'actions' : -#>\n<# entity.actions.forEach(action=>{#>\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.model.entityPathMapper[entity.name]}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n  // define this method in dataProvider to use this\n  async function #{action.actionCreatorName}(data, resource){\n\n  }\n*/\n\nconst #{action.fullName}Action  = ({ #{action.actionCreatorName}, record, selectedIds, children }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Button onClick={() =>\n    #{action.actionCreatorName}({record, selectedIds})\n  }\n  label=\"resources.#{entity.name}.actions.#{action.name}\"\n  >\n    {children ? children : (<ExecuteActionIcon/>)}\n  </uix.Button>);}\n\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n<#})#>\n\nexport const actions = {\n<# entity.actions.forEach(action=>{#>\n  #{action.name}:{\n    type:'#{action.actionType}',\n    creator: #{action.actionCreatorName},\n    action: #{action.actionName},\n    button: #{action.fullName}Button,\n  },\n<#})#>\n}\n\n<# end #>\n\n<# block 'add-buttons' : #>\n<#@ context 'entity'#>\nconst Add#{entity.name} = ({ record, target, label, children }) => {\n  const location = useLocation()\n  const uix = useContext(UIXContext);\n  const to = {\n    pathname: `/#{entity.model.entityPathMapper[entity.name]}/create`,\n  };\n\n  to.state = { pathname: location.pathname };\n  const newRecord = target && record && record.id ? { [target]: record.id } : undefined;\n  if (newRecord) {\n    to.state.record = newRecord;\n  }\n  return (\n    <uix.Button\n      component={Link}\n      to={to}\n      label={label}>\n      {children || <AddIcon/>}\n    </uix.Button>\n  );\n};\n\nAdd#{entity.name}.propTypes = {\n  record: PropTypes.object,\n  target: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n}\n\nconst Create#{entity.name}Button = ({ resource, label, children }) => {\n  const location = useLocation()\n  const uix = useContext(UIXContext);\n  const [{ filterValues }] = useListParams({ resource, location });\n  const record = filterValues\n    ? Object.keys(filterValues).reduce((rec, fld) => {\n        if (fld.match(/-eq/)) {\n          rec[fld.split('-')[0]] = filterValues[fld];\n        }\n        return rec;\n      }, {})\n    : undefined;\n  const to = {\n    pathname: `/#{entity.model.entityPathMapper[entity.name]}/create`,\n  };\n  to.state = { pathname: location.pathname };\n  if (record) {\n    to.state.record = record;\n  }\n  return (\n    <uix.Button component={Link} to={to} label={label}>\n      {children || <AddIcon />}\n    </uix.Button>\n  );\n};\n\nCreate#{entity.name}Button.propTypes = {\n  label: PropTypes.string.isRequired,\n};\n\nexport const buttons = {\n  Add: Add#{entity.name},\n  CreateButton: Create#{entity.name}Button,\n  <# entity.actions.forEach(action=>{#>\n  #{action.fullName}: #{action.fullName}Button,\n  <#-})#>\n}\n<# end #>"},{"generatedLine":15,"generatedColumn":4,"originalLine":16,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js","name":"code","content":"<#@ context \"entity\" -#>\n<#@ alias 'forms-form-fragments' -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n\nimport React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { useLocation } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport AddIcon from '@material-ui/icons/Add';\nimport { UIXContext } from '../contexts';\nimport useListParams from 'ra-core/lib/controller/useListParams';\n\n<# if(entity.actions.length > 0){#>\nimport { connect } from 'react-redux';\nimport ExecuteActionIcon from '@material-ui/icons/Settings';\n<#}#>\n\n// action definitions\n#{content('actions')}\n\n// rel buttons\n#{content('add-buttons')}\n\n<# block 'actions' : -#>\n<# entity.actions.forEach(action=>{#>\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.model.entityPathMapper[entity.name]}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n  // define this method in dataProvider to use this\n  async function #{action.actionCreatorName}(data, resource){\n\n  }\n*/\n\nconst #{action.fullName}Action  = ({ #{action.actionCreatorName}, record, selectedIds, children }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Button onClick={() =>\n    #{action.actionCreatorName}({record, selectedIds})\n  }\n  label=\"resources.#{entity.name}.actions.#{action.name}\"\n  >\n    {children ? children : (<ExecuteActionIcon/>)}\n  </uix.Button>);}\n\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n<#})#>\n\nexport const actions = {\n<# entity.actions.forEach(action=>{#>\n  #{action.name}:{\n    type:'#{action.actionType}',\n    creator: #{action.actionCreatorName},\n    action: #{action.actionName},\n    button: #{action.fullName}Button,\n  },\n<#})#>\n}\n\n<# end #>\n\n<# block 'add-buttons' : #>\n<#@ context 'entity'#>\nconst Add#{entity.name} = ({ record, target, label, children }) => {\n  const location = useLocation()\n  const uix = useContext(UIXContext);\n  const to = {\n    pathname: `/#{entity.model.entityPathMapper[entity.name]}/create`,\n  };\n\n  to.state = { pathname: location.pathname };\n  const newRecord = target && record && record.id ? { [target]: record.id } : undefined;\n  if (newRecord) {\n    to.state.record = newRecord;\n  }\n  return (\n    <uix.Button\n      component={Link}\n      to={to}\n      label={label}>\n      {children || <AddIcon/>}\n    </uix.Button>\n  );\n};\n\nAdd#{entity.name}.propTypes = {\n  record: PropTypes.object,\n  target: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n}\n\nconst Create#{entity.name}Button = ({ resource, label, children }) => {\n  const location = useLocation()\n  const uix = useContext(UIXContext);\n  const [{ filterValues }] = useListParams({ resource, location });\n  const record = filterValues\n    ? Object.keys(filterValues).reduce((rec, fld) => {\n        if (fld.match(/-eq/)) {\n          rec[fld.split('-')[0]] = filterValues[fld];\n        }\n        return rec;\n      }, {})\n    : undefined;\n  const to = {\n    pathname: `/#{entity.model.entityPathMapper[entity.name]}/create`,\n  };\n  to.state = { pathname: location.pathname };\n  if (record) {\n    to.state.record = record;\n  }\n  return (\n    <uix.Button component={Link} to={to} label={label}>\n      {children || <AddIcon />}\n    </uix.Button>\n  );\n};\n\nCreate#{entity.name}Button.propTypes = {\n  label: PropTypes.string.isRequired,\n};\n\nexport const buttons = {\n  Add: Add#{entity.name},\n  CreateButton: Create#{entity.name}Button,\n  <# entity.actions.forEach(action=>{#>\n  #{action.fullName}: #{action.fullName}Button,\n  <#-})#>\n}\n<# end #>"},{"generatedLine":15,"generatedColumn":4,"originalLine":16,"originalColumn":6,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'forms-form-fragments' -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n\nimport React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { useLocation } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport AddIcon from '@material-ui/icons/Add';\nimport { UIXContext } from '../contexts';\nimport useListParams from 'ra-core/lib/controller/useListParams';\n\n<# if(entity.actions.length > 0){#>\nimport { connect } from 'react-redux';\nimport ExecuteActionIcon from '@material-ui/icons/Settings';\n<#}#>\n\n// action definitions\n#{content('actions')}\n\n// rel buttons\n#{content('add-buttons')}\n\n<# block 'actions' : -#>\n<# entity.actions.forEach(action=>{#>\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.model.entityPathMapper[entity.name]}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n  // define this method in dataProvider to use this\n  async function #{action.actionCreatorName}(data, resource){\n\n  }\n*/\n\nconst #{action.fullName}Action  = ({ #{action.actionCreatorName}, record, selectedIds, children }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Button onClick={() =>\n    #{action.actionCreatorName}({record, selectedIds})\n  }\n  label=\"resources.#{entity.name}.actions.#{action.name}\"\n  >\n    {children ? children : (<ExecuteActionIcon/>)}\n  </uix.Button>);}\n\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n<#})#>\n\nexport const actions = {\n<# entity.actions.forEach(action=>{#>\n  #{action.name}:{\n    type:'#{action.actionType}',\n    creator: #{action.actionCreatorName},\n    action: #{action.actionName},\n    button: #{action.fullName}Button,\n  },\n<#})#>\n}\n\n<# end #>\n\n<# block 'add-buttons' : #>\n<#@ context 'entity'#>\nconst Add#{entity.name} = ({ record, target, label, children }) => {\n  const location = useLocation()\n  const uix = useContext(UIXContext);\n  const to = {\n    pathname: `/#{entity.model.entityPathMapper[entity.name]}/create`,\n  };\n\n  to.state = { pathname: location.pathname };\n  const newRecord = target && record && record.id ? { [target]: record.id } : undefined;\n  if (newRecord) {\n    to.state.record = newRecord;\n  }\n  return (\n    <uix.Button\n      component={Link}\n      to={to}\n      label={label}>\n      {children || <AddIcon/>}\n    </uix.Button>\n  );\n};\n\nAdd#{entity.name}.propTypes = {\n  record: PropTypes.object,\n  target: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n}\n\nconst Create#{entity.name}Button = ({ resource, label, children }) => {\n  const location = useLocation()\n  const uix = useContext(UIXContext);\n  const [{ filterValues }] = useListParams({ resource, location });\n  const record = filterValues\n    ? Object.keys(filterValues).reduce((rec, fld) => {\n        if (fld.match(/-eq/)) {\n          rec[fld.split('-')[0]] = filterValues[fld];\n        }\n        return rec;\n      }, {})\n    : undefined;\n  const to = {\n    pathname: `/#{entity.model.entityPathMapper[entity.name]}/create`,\n  };\n  to.state = { pathname: location.pathname };\n  if (record) {\n    to.state.record = record;\n  }\n  return (\n    <uix.Button component={Link} to={to} label={label}>\n      {children || <AddIcon />}\n    </uix.Button>\n  );\n};\n\nCreate#{entity.name}Button.propTypes = {\n  label: PropTypes.string.isRequired,\n};\n\nexport const buttons = {\n  Add: Add#{entity.name},\n  CreateButton: Create#{entity.name}Button,\n  <# entity.actions.forEach(action=>{#>\n  #{action.fullName}: #{action.fullName}Button,\n  <#-})#>\n}\n<# end #>"},{"generatedLine":15,"generatedColumn":8,"originalLine":17,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'forms-form-fragments' -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n\nimport React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { useLocation } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport AddIcon from '@material-ui/icons/Add';\nimport { UIXContext } from '../contexts';\nimport useListParams from 'ra-core/lib/controller/useListParams';\n\n<# if(entity.actions.length > 0){#>\nimport { connect } from 'react-redux';\nimport ExecuteActionIcon from '@material-ui/icons/Settings';\n<#}#>\n\n// action definitions\n#{content('actions')}\n\n// rel buttons\n#{content('add-buttons')}\n\n<# block 'actions' : -#>\n<# entity.actions.forEach(action=>{#>\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.model.entityPathMapper[entity.name]}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n  // define this method in dataProvider to use this\n  async function #{action.actionCreatorName}(data, resource){\n\n  }\n*/\n\nconst #{action.fullName}Action  = ({ #{action.actionCreatorName}, record, selectedIds, children }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Button onClick={() =>\n    #{action.actionCreatorName}({record, selectedIds})\n  }\n  label=\"resources.#{entity.name}.actions.#{action.name}\"\n  >\n    {children ? children : (<ExecuteActionIcon/>)}\n  </uix.Button>);}\n\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n<#})#>\n\nexport const actions = {\n<# entity.actions.forEach(action=>{#>\n  #{action.name}:{\n    type:'#{action.actionType}',\n    creator: #{action.actionCreatorName},\n    action: #{action.actionName},\n    button: #{action.fullName}Button,\n  },\n<#})#>\n}\n\n<# end #>\n\n<# block 'add-buttons' : #>\n<#@ context 'entity'#>\nconst Add#{entity.name} = ({ record, target, label, children }) => {\n  const location = useLocation()\n  const uix = useContext(UIXContext);\n  const to = {\n    pathname: `/#{entity.model.entityPathMapper[entity.name]}/create`,\n  };\n\n  to.state = { pathname: location.pathname };\n  const newRecord = target && record && record.id ? { [target]: record.id } : undefined;\n  if (newRecord) {\n    to.state.record = newRecord;\n  }\n  return (\n    <uix.Button\n      component={Link}\n      to={to}\n      label={label}>\n      {children || <AddIcon/>}\n    </uix.Button>\n  );\n};\n\nAdd#{entity.name}.propTypes = {\n  record: PropTypes.object,\n  target: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n}\n\nconst Create#{entity.name}Button = ({ resource, label, children }) => {\n  const location = useLocation()\n  const uix = useContext(UIXContext);\n  const [{ filterValues }] = useListParams({ resource, location });\n  const record = filterValues\n    ? Object.keys(filterValues).reduce((rec, fld) => {\n        if (fld.match(/-eq/)) {\n          rec[fld.split('-')[0]] = filterValues[fld];\n        }\n        return rec;\n      }, {})\n    : undefined;\n  const to = {\n    pathname: `/#{entity.model.entityPathMapper[entity.name]}/create`,\n  };\n  to.state = { pathname: location.pathname };\n  if (record) {\n    to.state.record = record;\n  }\n  return (\n    <uix.Button component={Link} to={to} label={label}>\n      {children || <AddIcon />}\n    </uix.Button>\n  );\n};\n\nCreate#{entity.name}Button.propTypes = {\n  label: PropTypes.string.isRequired,\n};\n\nexport const buttons = {\n  Add: Add#{entity.name},\n  CreateButton: Create#{entity.name}Button,\n  <# entity.actions.forEach(action=>{#>\n  #{action.fullName}: #{action.fullName}Button,\n  <#-})#>\n}\n<# end #>"},{"generatedLine":15,"generatedColumn":12,"originalLine":18,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'forms-form-fragments' -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n\nimport React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { useLocation } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport AddIcon from '@material-ui/icons/Add';\nimport { UIXContext } from '../contexts';\nimport useListParams from 'ra-core/lib/controller/useListParams';\n\n<# if(entity.actions.length > 0){#>\nimport { connect } from 'react-redux';\nimport ExecuteActionIcon from '@material-ui/icons/Settings';\n<#}#>\n\n// action definitions\n#{content('actions')}\n\n// rel buttons\n#{content('add-buttons')}\n\n<# block 'actions' : -#>\n<# entity.actions.forEach(action=>{#>\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.model.entityPathMapper[entity.name]}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n  // define this method in dataProvider to use this\n  async function #{action.actionCreatorName}(data, resource){\n\n  }\n*/\n\nconst #{action.fullName}Action  = ({ #{action.actionCreatorName}, record, selectedIds, children }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Button onClick={() =>\n    #{action.actionCreatorName}({record, selectedIds})\n  }\n  label=\"resources.#{entity.name}.actions.#{action.name}\"\n  >\n    {children ? children : (<ExecuteActionIcon/>)}\n  </uix.Button>);}\n\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n<#})#>\n\nexport const actions = {\n<# entity.actions.forEach(action=>{#>\n  #{action.name}:{\n    type:'#{action.actionType}',\n    creator: #{action.actionCreatorName},\n    action: #{action.actionName},\n    button: #{action.fullName}Button,\n  },\n<#})#>\n}\n\n<# end #>\n\n<# block 'add-buttons' : #>\n<#@ context 'entity'#>\nconst Add#{entity.name} = ({ record, target, label, children }) => {\n  const location = useLocation()\n  const uix = useContext(UIXContext);\n  const to = {\n    pathname: `/#{entity.model.entityPathMapper[entity.name]}/create`,\n  };\n\n  to.state = { pathname: location.pathname };\n  const newRecord = target && record && record.id ? { [target]: record.id } : undefined;\n  if (newRecord) {\n    to.state.record = newRecord;\n  }\n  return (\n    <uix.Button\n      component={Link}\n      to={to}\n      label={label}>\n      {children || <AddIcon/>}\n    </uix.Button>\n  );\n};\n\nAdd#{entity.name}.propTypes = {\n  record: PropTypes.object,\n  target: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n}\n\nconst Create#{entity.name}Button = ({ resource, label, children }) => {\n  const location = useLocation()\n  const uix = useContext(UIXContext);\n  const [{ filterValues }] = useListParams({ resource, location });\n  const record = filterValues\n    ? Object.keys(filterValues).reduce((rec, fld) => {\n        if (fld.match(/-eq/)) {\n          rec[fld.split('-')[0]] = filterValues[fld];\n        }\n        return rec;\n      }, {})\n    : undefined;\n  const to = {\n    pathname: `/#{entity.model.entityPathMapper[entity.name]}/create`,\n  };\n  to.state = { pathname: location.pathname };\n  if (record) {\n    to.state.record = record;\n  }\n  return (\n    <uix.Button component={Link} to={to} label={label}>\n      {children || <AddIcon />}\n    </uix.Button>\n  );\n};\n\nCreate#{entity.name}Button.propTypes = {\n  label: PropTypes.string.isRequired,\n};\n\nexport const buttons = {\n  Add: Add#{entity.name},\n  CreateButton: Create#{entity.name}Button,\n  <# entity.actions.forEach(action=>{#>\n  #{action.fullName}: #{action.fullName}Button,\n  <#-})#>\n}\n<# end #>"},{"generatedLine":15,"generatedColumn":37,"originalLine":19,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias 'forms-form-fragments' -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n\nimport React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { useLocation } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport AddIcon from '@material-ui/icons/Add';\nimport { UIXContext } from '../contexts';\nimport useListParams from 'ra-core/lib/controller/useListParams';\n\n<# if(entity.actions.length > 0){#>\nimport { connect } from 'react-redux';\nimport ExecuteActionIcon from '@material-ui/icons/Settings';\n<#}#>\n\n// action definitions\n#{content('actions')}\n\n// rel buttons\n#{content('add-buttons')}\n\n<# block 'actions' : -#>\n<# entity.actions.forEach(action=>{#>\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.model.entityPathMapper[entity.name]}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n  // define this method in dataProvider to use this\n  async function #{action.actionCreatorName}(data, resource){\n\n  }\n*/\n\nconst #{action.fullName}Action  = ({ #{action.actionCreatorName}, record, selectedIds, children }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Button onClick={() =>\n    #{action.actionCreatorName}({record, selectedIds})\n  }\n  label=\"resources.#{entity.name}.actions.#{action.name}\"\n  >\n    {children ? children : (<ExecuteActionIcon/>)}\n  </uix.Button>);}\n\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n<#})#>\n\nexport const actions = {\n<# entity.actions.forEach(action=>{#>\n  #{action.name}:{\n    type:'#{action.actionType}',\n    creator: #{action.actionCreatorName},\n    action: #{action.actionName},\n    button: #{action.fullName}Button,\n  },\n<#})#>\n}\n\n<# end #>\n\n<# block 'add-buttons' : #>\n<#@ context 'entity'#>\nconst Add#{entity.name} = ({ record, target, label, children }) => {\n  const location = useLocation()\n  const uix = useContext(UIXContext);\n  const to = {\n    pathname: `/#{entity.model.entityPathMapper[entity.name]}/create`,\n  };\n\n  to.state = { pathname: location.pathname };\n  const newRecord = target && record && record.id ? { [target]: record.id } : undefined;\n  if (newRecord) {\n    to.state.record = newRecord;\n  }\n  return (\n    <uix.Button\n      component={Link}\n      to={to}\n      label={label}>\n      {children || <AddIcon/>}\n    </uix.Button>\n  );\n};\n\nAdd#{entity.name}.propTypes = {\n  record: PropTypes.object,\n  target: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n}\n\nconst Create#{entity.name}Button = ({ resource, label, children }) => {\n  const location = useLocation()\n  const uix = useContext(UIXContext);\n  const [{ filterValues }] = useListParams({ resource, location });\n  const record = filterValues\n    ? Object.keys(filterValues).reduce((rec, fld) => {\n        if (fld.match(/-eq/)) {\n          rec[fld.split('-')[0]] = filterValues[fld];\n        }\n        return rec;\n      }, {})\n    : undefined;\n  const to = {\n    pathname: `/#{entity.model.entityPathMapper[entity.name]}/create`,\n  };\n  to.state = { pathname: location.pathname };\n  if (record) {\n    to.state.record = record;\n  }\n  return (\n    <uix.Button component={Link} to={to} label={label}>\n      {children || <AddIcon />}\n    </uix.Button>\n  );\n};\n\nCreate#{entity.name}Button.propTypes = {\n  label: PropTypes.string.isRequired,\n};\n\nexport const buttons = {\n  Add: Add#{entity.name},\n  CreateButton: Create#{entity.name}Button,\n  <# entity.actions.forEach(action=>{#>\n  #{action.fullName}: #{action.fullName}Button,\n  <#-})#>\n}\n<# end #>"},{"generatedLine":15,"generatedColumn":57,"originalLine":19,"originalColumn":22,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'forms-form-fragments' -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n\nimport React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { useLocation } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport AddIcon from '@material-ui/icons/Add';\nimport { UIXContext } from '../contexts';\nimport useListParams from 'ra-core/lib/controller/useListParams';\n\n<# if(entity.actions.length > 0){#>\nimport { connect } from 'react-redux';\nimport ExecuteActionIcon from '@material-ui/icons/Settings';\n<#}#>\n\n// action definitions\n#{content('actions')}\n\n// rel buttons\n#{content('add-buttons')}\n\n<# block 'actions' : -#>\n<# entity.actions.forEach(action=>{#>\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.model.entityPathMapper[entity.name]}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n  // define this method in dataProvider to use this\n  async function #{action.actionCreatorName}(data, resource){\n\n  }\n*/\n\nconst #{action.fullName}Action  = ({ #{action.actionCreatorName}, record, selectedIds, children }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Button onClick={() =>\n    #{action.actionCreatorName}({record, selectedIds})\n  }\n  label=\"resources.#{entity.name}.actions.#{action.name}\"\n  >\n    {children ? children : (<ExecuteActionIcon/>)}\n  </uix.Button>);}\n\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n<#})#>\n\nexport const actions = {\n<# entity.actions.forEach(action=>{#>\n  #{action.name}:{\n    type:'#{action.actionType}',\n    creator: #{action.actionCreatorName},\n    action: #{action.actionName},\n    button: #{action.fullName}Button,\n  },\n<#})#>\n}\n\n<# end #>\n\n<# block 'add-buttons' : #>\n<#@ context 'entity'#>\nconst Add#{entity.name} = ({ record, target, label, children }) => {\n  const location = useLocation()\n  const uix = useContext(UIXContext);\n  const to = {\n    pathname: `/#{entity.model.entityPathMapper[entity.name]}/create`,\n  };\n\n  to.state = { pathname: location.pathname };\n  const newRecord = target && record && record.id ? { [target]: record.id } : undefined;\n  if (newRecord) {\n    to.state.record = newRecord;\n  }\n  return (\n    <uix.Button\n      component={Link}\n      to={to}\n      label={label}>\n      {children || <AddIcon/>}\n    </uix.Button>\n  );\n};\n\nAdd#{entity.name}.propTypes = {\n  record: PropTypes.object,\n  target: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n}\n\nconst Create#{entity.name}Button = ({ resource, label, children }) => {\n  const location = useLocation()\n  const uix = useContext(UIXContext);\n  const [{ filterValues }] = useListParams({ resource, location });\n  const record = filterValues\n    ? Object.keys(filterValues).reduce((rec, fld) => {\n        if (fld.match(/-eq/)) {\n          rec[fld.split('-')[0]] = filterValues[fld];\n        }\n        return rec;\n      }, {})\n    : undefined;\n  const to = {\n    pathname: `/#{entity.model.entityPathMapper[entity.name]}/create`,\n  };\n  to.state = { pathname: location.pathname };\n  if (record) {\n    to.state.record = record;\n  }\n  return (\n    <uix.Button component={Link} to={to} label={label}>\n      {children || <AddIcon />}\n    </uix.Button>\n  );\n};\n\nCreate#{entity.name}Button.propTypes = {\n  label: PropTypes.string.isRequired,\n};\n\nexport const buttons = {\n  Add: Add#{entity.name},\n  CreateButton: Create#{entity.name}Button,\n  <# entity.actions.forEach(action=>{#>\n  #{action.fullName}: #{action.fullName}Button,\n  <#-})#>\n}\n<# end #>"},{"generatedLine":15,"generatedColumn":61,"originalLine":20,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'forms-form-fragments' -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n\nimport React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { useLocation } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport AddIcon from '@material-ui/icons/Add';\nimport { UIXContext } from '../contexts';\nimport useListParams from 'ra-core/lib/controller/useListParams';\n\n<# if(entity.actions.length > 0){#>\nimport { connect } from 'react-redux';\nimport ExecuteActionIcon from '@material-ui/icons/Settings';\n<#}#>\n\n// action definitions\n#{content('actions')}\n\n// rel buttons\n#{content('add-buttons')}\n\n<# block 'actions' : -#>\n<# entity.actions.forEach(action=>{#>\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.model.entityPathMapper[entity.name]}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n  // define this method in dataProvider to use this\n  async function #{action.actionCreatorName}(data, resource){\n\n  }\n*/\n\nconst #{action.fullName}Action  = ({ #{action.actionCreatorName}, record, selectedIds, children }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Button onClick={() =>\n    #{action.actionCreatorName}({record, selectedIds})\n  }\n  label=\"resources.#{entity.name}.actions.#{action.name}\"\n  >\n    {children ? children : (<ExecuteActionIcon/>)}\n  </uix.Button>);}\n\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n<#})#>\n\nexport const actions = {\n<# entity.actions.forEach(action=>{#>\n  #{action.name}:{\n    type:'#{action.actionType}',\n    creator: #{action.actionCreatorName},\n    action: #{action.actionName},\n    button: #{action.fullName}Button,\n  },\n<#})#>\n}\n\n<# end #>\n\n<# block 'add-buttons' : #>\n<#@ context 'entity'#>\nconst Add#{entity.name} = ({ record, target, label, children }) => {\n  const location = useLocation()\n  const uix = useContext(UIXContext);\n  const to = {\n    pathname: `/#{entity.model.entityPathMapper[entity.name]}/create`,\n  };\n\n  to.state = { pathname: location.pathname };\n  const newRecord = target && record && record.id ? { [target]: record.id } : undefined;\n  if (newRecord) {\n    to.state.record = newRecord;\n  }\n  return (\n    <uix.Button\n      component={Link}\n      to={to}\n      label={label}>\n      {children || <AddIcon/>}\n    </uix.Button>\n  );\n};\n\nAdd#{entity.name}.propTypes = {\n  record: PropTypes.object,\n  target: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n}\n\nconst Create#{entity.name}Button = ({ resource, label, children }) => {\n  const location = useLocation()\n  const uix = useContext(UIXContext);\n  const [{ filterValues }] = useListParams({ resource, location });\n  const record = filterValues\n    ? Object.keys(filterValues).reduce((rec, fld) => {\n        if (fld.match(/-eq/)) {\n          rec[fld.split('-')[0]] = filterValues[fld];\n        }\n        return rec;\n      }, {})\n    : undefined;\n  const to = {\n    pathname: `/#{entity.model.entityPathMapper[entity.name]}/create`,\n  };\n  to.state = { pathname: location.pathname };\n  if (record) {\n    to.state.record = record;\n  }\n  return (\n    <uix.Button component={Link} to={to} label={label}>\n      {children || <AddIcon />}\n    </uix.Button>\n  );\n};\n\nCreate#{entity.name}Button.propTypes = {\n  label: PropTypes.string.isRequired,\n};\n\nexport const buttons = {\n  Add: Add#{entity.name},\n  CreateButton: Create#{entity.name}Button,\n  <# entity.actions.forEach(action=>{#>\n  #{action.fullName}: #{action.fullName}Button,\n  <#-})#>\n}\n<# end #>"},{"generatedLine":15,"generatedColumn":65,"originalLine":21,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js","name":"text","content":"<#@ context \"entity\" -#>\n<#@ alias 'forms-form-fragments' -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n\nimport React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { useLocation } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport AddIcon from '@material-ui/icons/Add';\nimport { UIXContext } from '../contexts';\nimport useListParams from 'ra-core/lib/controller/useListParams';\n\n<# if(entity.actions.length > 0){#>\nimport { connect } from 'react-redux';\nimport ExecuteActionIcon from '@material-ui/icons/Settings';\n<#}#>\n\n// action definitions\n#{content('actions')}\n\n// rel buttons\n#{content('add-buttons')}\n\n<# block 'actions' : -#>\n<# entity.actions.forEach(action=>{#>\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.model.entityPathMapper[entity.name]}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n  // define this method in dataProvider to use this\n  async function #{action.actionCreatorName}(data, resource){\n\n  }\n*/\n\nconst #{action.fullName}Action  = ({ #{action.actionCreatorName}, record, selectedIds, children }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Button onClick={() =>\n    #{action.actionCreatorName}({record, selectedIds})\n  }\n  label=\"resources.#{entity.name}.actions.#{action.name}\"\n  >\n    {children ? children : (<ExecuteActionIcon/>)}\n  </uix.Button>);}\n\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n<#})#>\n\nexport const actions = {\n<# entity.actions.forEach(action=>{#>\n  #{action.name}:{\n    type:'#{action.actionType}',\n    creator: #{action.actionCreatorName},\n    action: #{action.actionName},\n    button: #{action.fullName}Button,\n  },\n<#})#>\n}\n\n<# end #>\n\n<# block 'add-buttons' : #>\n<#@ context 'entity'#>\nconst Add#{entity.name} = ({ record, target, label, children }) => {\n  const location = useLocation()\n  const uix = useContext(UIXContext);\n  const to = {\n    pathname: `/#{entity.model.entityPathMapper[entity.name]}/create`,\n  };\n\n  to.state = { pathname: location.pathname };\n  const newRecord = target && record && record.id ? { [target]: record.id } : undefined;\n  if (newRecord) {\n    to.state.record = newRecord;\n  }\n  return (\n    <uix.Button\n      component={Link}\n      to={to}\n      label={label}>\n      {children || <AddIcon/>}\n    </uix.Button>\n  );\n};\n\nAdd#{entity.name}.propTypes = {\n  record: PropTypes.object,\n  target: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n}\n\nconst Create#{entity.name}Button = ({ resource, label, children }) => {\n  const location = useLocation()\n  const uix = useContext(UIXContext);\n  const [{ filterValues }] = useListParams({ resource, location });\n  const record = filterValues\n    ? Object.keys(filterValues).reduce((rec, fld) => {\n        if (fld.match(/-eq/)) {\n          rec[fld.split('-')[0]] = filterValues[fld];\n        }\n        return rec;\n      }, {})\n    : undefined;\n  const to = {\n    pathname: `/#{entity.model.entityPathMapper[entity.name]}/create`,\n  };\n  to.state = { pathname: location.pathname };\n  if (record) {\n    to.state.record = record;\n  }\n  return (\n    <uix.Button component={Link} to={to} label={label}>\n      {children || <AddIcon />}\n    </uix.Button>\n  );\n};\n\nCreate#{entity.name}Button.propTypes = {\n  label: PropTypes.string.isRequired,\n};\n\nexport const buttons = {\n  Add: Add#{entity.name},\n  CreateButton: Create#{entity.name}Button,\n  <# entity.actions.forEach(action=>{#>\n  #{action.fullName}: #{action.fullName}Button,\n  <#-})#>\n}\n<# end #>"},{"generatedLine":15,"generatedColumn":83,"originalLine":22,"originalColumn":1,"source":"generators_new/tpls/UI/forms/form-fragment.njs.js","name":"expression","content":"<#@ context \"entity\" -#>\n<#@ alias 'forms-form-fragments' -#>\n<# const rels = entity.props.filter(f=>f.ref).filter(r=>!r.single && !r.ref.embedded); #>\n\nimport React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { useLocation } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport AddIcon from '@material-ui/icons/Add';\nimport { UIXContext } from '../contexts';\nimport useListParams from 'ra-core/lib/controller/useListParams';\n\n<# if(entity.actions.length > 0){#>\nimport { connect } from 'react-redux';\nimport ExecuteActionIcon from '@material-ui/icons/Settings';\n<#}#>\n\n// action definitions\n#{content('actions')}\n\n// rel buttons\n#{content('add-buttons')}\n\n<# block 'actions' : -#>\n<# entity.actions.forEach(action=>{#>\nexport const #{action.actionName} = '#{action.actionName}';\nexport const #{action.actionCreatorName} = (data) => ({\n  type: #{action.actionName},\n  payload: { data, resource: '#{entity.model.entityPathMapper[entity.name]}' },\n  // dataProvider hack\n  meta: { fetch: 'EXECUTE', resource: '#{action.actionCreatorName}' },\n});\n\n/**\n  // define this method in dataProvider to use this\n  async function #{action.actionCreatorName}(data, resource){\n\n  }\n*/\n\nconst #{action.fullName}Action  = ({ #{action.actionCreatorName}, record, selectedIds, children }) => {\n  const uix = useContext(UIXContext);\n  return (\n  <uix.Button onClick={() =>\n    #{action.actionCreatorName}({record, selectedIds})\n  }\n  label=\"resources.#{entity.name}.actions.#{action.name}\"\n  >\n    {children ? children : (<ExecuteActionIcon/>)}\n  </uix.Button>);}\n\n\n#{action.fullName}Action.propTypes = {\n  #{action.actionCreatorName}: PropTypes.func.isRequired,\n  record: PropTypes.object,\n};\n\n\nexport const #{action.fullName}Button = connect(null, {\n  #{action.actionCreatorName},\n})(#{action.fullName}Action);\n<#})#>\n\nexport const actions = {\n<# entity.actions.forEach(action=>{#>\n  #{action.name}:{\n    type:'#{action.actionType}',\n    creator: #{action.actionCreatorName},\n    action: #{action.actionName},\n    button: #{action.fullName}Button,\n  },\n<#})#>\n}\n\n<# end #>\n\n<# block 'add-buttons' : #>\n<#@ context 'entity'#>\nconst Add#{entity.name} = ({ record, target, label, children }) => {\n  const location = useLocation()\n  const uix = useContext(UIXContext);\n  const to = {\n    pathname: `/#{entity.model.entityPathMapper[entity.name]}/create`,\n  };\n\n  to.state = { pathname: location.pathname };\n  const newRecord = target && record && record.id ? { [target]: record.id } : undefined;\n  if (newRecord) {\n    to.state.record = newRecord;\n  }\n  return (\n    <uix.Button\n      component={Link}\n      to={to}\n      label={label}>\n      {children || <AddIcon/>}\n    </uix.Button>\n  );\n};\n\nAdd#{entity.name}.propTypes = {\n  record: PropTypes.object,\n  target: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n}\n\nconst Create#{entity.name}Button = ({ resource, label, children }) => {\n  const location = useLocation()\n  const uix = useContext(UIXContext);\n  const [{ filterValues }] = useListParams({ resource, location });\n  const record = filterValues\n    ? Object.keys(filterValues).reduce((rec, fld) => {\n        if (fld.match(/-eq/)) {\n          rec[fld.split('-')[0]] = filterValues[fld];\n        }\n        return rec;\n      }, {})\n    : undefined;\n  const to = {\n    pathname: `/#{entity.model.entityPathMapper[entity.name]}/create`,\n  };\n  to.state = { pathname: location.pathname };\n  if (record) {\n    to.state.record = record;\n  }\n  return (\n    <uix.Button component={Link} to={to} label={label}>\n      {children || <AddIcon />}\n    </uix.Button>\n  );\n};\n\nCreate#{entity.name}Button.propTypes = {\n  label: PropTypes.string.isRequired,\n};\n\nexport const buttons = {\n  Add: Add#{entity.name},\n  CreateButton: Create#{entity.name}Button,\n  <# entity.actions.forEach(action=>{#>\n  #{action.fullName}: #{action.fullName}Button,\n  <#-})#>\n}\n<# end #>"}]}}