{"version":3,"sources":["generators/server/Application.Config/application.profiler.njs.js"],"names":["text","code","expression"],"mappings":"AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAMCA,kDACAA,qCACAA,gBACAC;AATD,IASCA,AAAmCD,IACnCA,qCACAC;AAXD,IAWCA,AAAMD,IACNA,SAAOE,cAAeA,6BAA8BF,eACpDA,SAAOE,cAAeA,6BAA8BF,iBACpDA,SAAOE,cAAeA,6BAA8BF,cACpDA,SAAOE,cAAeA,6BAA8BF,qBACpDA,UACAA,oBACAA,oBACAA,IACAA,yBACAA,cAAYE,yBAA0BF,KACtCA,IACAA,mFACAA,sBACAA,oBACAA,wBACAA,+BACAA,YACAA,uBACAA,yBACAA,yBACAA,WACAA,UACAA,IACAA,qCACAA,gCACAA,mBACAA,gCACAA,oBACAA,mBACAA,UACAA,IACAA,qCACAA,gCACAA,mBACAA,gCACAA,oBACAA,mBACAA,UACAA,IACAA,sCACAA,6BACAA,yBACAA,oCACAA,oBACAA,wCACAA,kFACAA,WACAA,UACAA,QACAA,IACAA,wBACAA,sBACAA,iGACAE,mCAAoCF,IACpCE,6BAA8BF,IAC9BA,QACAA,IACAA,+BACAA,wBACAA,IACAA,yBACAA,4DAA0DE,wEAAyEF,gBACnIA,wBACAC;AA3ED,IA2ECA,AAAgCD,IAChCA,6BACAA,yDACAA,6DACAA,sEACAA,uBACAA,2BACAA,2BACAA,aACAA,yDACAC;AArFD,IAqFCA,AAAOD,IACPA,6BACAA,gDACAA,WACAE,4BAA6BF,IAC7BA,UACAA,IACAA,MAAIE,iCAAkCF,IACtCA,IACAA,2DACAA,2BACAA,2BACAA,sDACAA,8DACAA,8DACAA,aACAA,uEACAA,yEACAA,yBACAA,yDACAA,2BACAA,IACAA,oCACAA,4CACAA,2CACAA,iBACAA,+CACAA,oDACAA,qCACAA,oDACAA,iBACAA,iBACAA,oBACAA,qCACAA,WACAA,UACAA,IACAA,wEACAA,2BACAA,0BACAA,kDACAA,oDACAA,sDACAA,0CAAwCE,cAAeA,6BAA8BF,gBACrFA,iBACAA,sCACAA,mEACAA,2CACAA,cACAA,IACAA,kEACAA,yDACAA,iBACAA,cACAA,IACAA,+DACAA,4BACAA,mDACAA,2CACAA,yCACAA,gCACAA,6BACAA,0BACAA,gCACAA,oBACAA,4BACAA,kCACAA,kBACAA,WACAA,iDACAA,+CACAA,2BACAA,4BACAA,yBACAA,4BACAA,iEACAA,0CACAA,8CACAA,iCACAA,qCACAA,4BACAA,gCACAA,6BAA2BE,cAAeA,6BAA8BF,gBACxEA,2CACAA,cACAA,gEACAA,yCACAA,iBACAA,aACAA,YACAA,IACAA,4CACAA,4BACAA,yBACAA,0BACAA,6BACAA,yDACAA,eACAA,WACAA;AAxfile":"generators/server/Application.Config/application.profiler.njs.js","sourceRoot":"/Users/vedmalex/work/fte2/demo","sourcesContent":["<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"],"template":{"version":"1.0.0","segments":[{"generatedLine":1,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":2,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":3,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":4,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":5,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":6,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":7,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":8,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":9,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":10,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":11,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":12,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":13,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":14,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":15,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":16,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":17,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":18,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":19,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":20,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":21,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":22,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":23,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":24,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":25,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":26,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":27,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":28,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":29,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":30,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":31,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":32,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":33,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":34,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":35,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":36,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":37,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":38,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":39,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":40,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":41,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":42,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":43,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":44,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":45,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":46,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":47,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":48,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":49,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":50,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":51,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":52,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":53,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":54,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":55,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":56,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":57,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":58,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":59,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":60,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":61,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":62,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":63,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":64,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":65,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":66,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":67,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":68,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":69,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":70,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":71,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":72,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":73,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":74,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":75,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":76,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":77,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":78,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":79,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":80,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":81,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":82,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":83,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":84,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":85,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":86,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":87,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":88,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":89,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":90,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":91,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":92,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":93,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":94,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":95,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":96,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":97,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":98,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":99,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":100,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":101,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":102,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":103,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":104,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":105,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":106,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":107,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":108,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":109,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":110,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":111,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":112,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":113,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":114,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":115,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":116,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":117,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":118,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":119,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":120,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":121,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":122,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":123,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":124,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":125,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":126,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":127,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":128,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":129,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":130,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":131,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":132,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":133,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":134,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":135,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":136,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":137,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":138,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":139,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":140,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":141,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":142,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":143,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":144,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":145,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":146,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":147,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":148,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":149,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":150,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":151,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":152,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":153,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":154,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":155,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":156,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":157,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":158,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":159,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":160,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":161,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":162,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":163,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":164,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":165,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":166,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":167,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":168,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":169,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":170,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":171,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":172,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":173,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":174,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":175,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":176,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":177,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":178,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":179,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":180,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":181,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":182,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":183,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":184,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":185,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":186,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":187,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":188,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":189,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":190,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":191,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":192,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":193,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":194,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":195,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":196,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":197,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":198,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":199,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":200,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":201,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":202,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":203,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":204,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":205,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":206,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":207,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":208,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":209,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":210,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":211,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":212,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":213,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":214,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":215,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":216,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Application.Config/application.profiler.njs.js"},{"generatedLine":8,"generatedColumn":4,"originalLine":7,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":8,"generatedColumn":54,"originalLine":8,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":8,"generatedColumn":91,"originalLine":9,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":8,"generatedColumn":107,"originalLine":10,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"code","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":9,"generatedColumn":4,"originalLine":10,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"code","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":9,"generatedColumn":4,"originalLine":10,"originalColumn":36,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":9,"generatedColumn":8,"originalLine":11,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":9,"generatedColumn":45,"originalLine":12,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"code","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":10,"generatedColumn":4,"originalLine":12,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"code","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":10,"generatedColumn":4,"originalLine":12,"originalColumn":7,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":10,"generatedColumn":8,"originalLine":13,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":10,"generatedColumn":17,"originalLine":13,"originalColumn":8,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"expression","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":10,"generatedColumn":31,"originalLine":13,"originalColumn":23,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"expression","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":10,"generatedColumn":60,"originalLine":13,"originalColumn":53,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":10,"generatedColumn":75,"originalLine":14,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":10,"generatedColumn":84,"originalLine":14,"originalColumn":8,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"expression","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":10,"generatedColumn":98,"originalLine":14,"originalColumn":23,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"expression","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":10,"generatedColumn":127,"originalLine":14,"originalColumn":53,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":10,"generatedColumn":144,"originalLine":15,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":10,"generatedColumn":153,"originalLine":15,"originalColumn":8,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"expression","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":10,"generatedColumn":167,"originalLine":15,"originalColumn":23,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"expression","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":10,"generatedColumn":196,"originalLine":15,"originalColumn":53,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":10,"generatedColumn":210,"originalLine":16,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":10,"generatedColumn":219,"originalLine":16,"originalColumn":8,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"expression","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":10,"generatedColumn":233,"originalLine":16,"originalColumn":23,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"expression","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":10,"generatedColumn":262,"originalLine":16,"originalColumn":53,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":10,"generatedColumn":283,"originalLine":17,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":10,"generatedColumn":293,"originalLine":18,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":10,"generatedColumn":313,"originalLine":19,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":10,"generatedColumn":333,"originalLine":20,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":10,"generatedColumn":337,"originalLine":21,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":10,"generatedColumn":362,"originalLine":22,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":10,"generatedColumn":376,"originalLine":22,"originalColumn":13,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"expression","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":10,"generatedColumn":401,"originalLine":22,"originalColumn":39,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":10,"generatedColumn":406,"originalLine":23,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":10,"generatedColumn":410,"originalLine":24,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":10,"generatedColumn":493,"originalLine":25,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":10,"generatedColumn":515,"originalLine":26,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":10,"generatedColumn":535,"originalLine":27,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":10,"generatedColumn":559,"originalLine":28,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":10,"generatedColumn":590,"originalLine":29,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":10,"generatedColumn":602,"originalLine":30,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":10,"generatedColumn":625,"originalLine":31,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":10,"generatedColumn":650,"originalLine":32,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":10,"generatedColumn":675,"originalLine":33,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":10,"generatedColumn":686,"originalLine":34,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":10,"generatedColumn":696,"originalLine":35,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":10,"generatedColumn":700,"originalLine":36,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":10,"generatedColumn":737,"originalLine":37,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":10,"generatedColumn":769,"originalLine":38,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":10,"generatedColumn":788,"originalLine":39,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":10,"generatedColumn":820,"originalLine":40,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":10,"generatedColumn":840,"originalLine":41,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":10,"generatedColumn":859,"originalLine":42,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":10,"generatedColumn":869,"originalLine":43,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":10,"generatedColumn":873,"originalLine":44,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":10,"generatedColumn":910,"originalLine":45,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":10,"generatedColumn":942,"originalLine":46,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":10,"generatedColumn":961,"originalLine":47,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":10,"generatedColumn":993,"originalLine":48,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":10,"generatedColumn":1013,"originalLine":49,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":10,"generatedColumn":1032,"originalLine":50,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":10,"generatedColumn":1042,"originalLine":51,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":10,"generatedColumn":1046,"originalLine":52,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":10,"generatedColumn":1084,"originalLine":53,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":10,"generatedColumn":1113,"originalLine":54,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":10,"generatedColumn":1138,"originalLine":55,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":10,"generatedColumn":1174,"originalLine":56,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":10,"generatedColumn":1194,"originalLine":57,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":10,"generatedColumn":1234,"originalLine":58,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":10,"generatedColumn":1316,"originalLine":59,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":10,"generatedColumn":1327,"originalLine":60,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":10,"generatedColumn":1337,"originalLine":61,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":10,"generatedColumn":1345,"originalLine":62,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":10,"generatedColumn":1349,"originalLine":63,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":10,"generatedColumn":1373,"originalLine":64,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":10,"generatedColumn":1395,"originalLine":65,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":10,"generatedColumn":1492,"originalLine":66,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"expression","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":10,"generatedColumn":1527,"originalLine":66,"originalColumn":37,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":10,"generatedColumn":1531,"originalLine":67,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"expression","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":10,"generatedColumn":1560,"originalLine":67,"originalColumn":31,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":10,"generatedColumn":1564,"originalLine":68,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":10,"generatedColumn":1572,"originalLine":69,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":10,"generatedColumn":1576,"originalLine":70,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":10,"generatedColumn":1607,"originalLine":71,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":10,"generatedColumn":1631,"originalLine":72,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":10,"generatedColumn":1635,"originalLine":73,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":10,"generatedColumn":1660,"originalLine":74,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":10,"generatedColumn":1720,"originalLine":74,"originalColumn":59,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"expression","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":10,"generatedColumn":1792,"originalLine":74,"originalColumn":132,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":10,"generatedColumn":1808,"originalLine":75,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":10,"generatedColumn":1832,"originalLine":76,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"code","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":11,"generatedColumn":4,"originalLine":76,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"code","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":11,"generatedColumn":4,"originalLine":76,"originalColumn":33,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":11,"generatedColumn":8,"originalLine":77,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":11,"generatedColumn":37,"originalLine":78,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":11,"generatedColumn":94,"originalLine":79,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":11,"generatedColumn":155,"originalLine":80,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":11,"generatedColumn":225,"originalLine":81,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":11,"generatedColumn":248,"originalLine":82,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":11,"generatedColumn":275,"originalLine":83,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":11,"generatedColumn":302,"originalLine":84,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":11,"generatedColumn":315,"originalLine":85,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":11,"generatedColumn":372,"originalLine":86,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"code","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":4,"originalLine":86,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"code","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":4,"originalLine":86,"originalColumn":8,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":8,"originalLine":87,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":37,"originalLine":88,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":85,"originalLine":89,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":96,"originalLine":90,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"expression","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":124,"originalLine":90,"originalColumn":30,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":128,"originalLine":91,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":138,"originalLine":92,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":142,"originalLine":93,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":148,"originalLine":93,"originalColumn":5,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"expression","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":181,"originalLine":93,"originalColumn":39,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":185,"originalLine":94,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":189,"originalLine":95,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":248,"originalLine":96,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":275,"originalLine":97,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":302,"originalLine":98,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":356,"originalLine":99,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":418,"originalLine":100,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":480,"originalLine":101,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":493,"originalLine":102,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":564,"originalLine":103,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":637,"originalLine":104,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":662,"originalLine":105,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":719,"originalLine":106,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":746,"originalLine":107,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":750,"originalLine":108,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":786,"originalLine":109,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":830,"originalLine":110,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":873,"originalLine":111,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":890,"originalLine":112,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":937,"originalLine":113,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":989,"originalLine":114,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":1026,"originalLine":115,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":1078,"originalLine":116,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":1095,"originalLine":117,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":1112,"originalLine":118,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":1132,"originalLine":119,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":1169,"originalLine":120,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":1180,"originalLine":121,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":1190,"originalLine":122,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":1194,"originalLine":123,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":1266,"originalLine":124,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":1293,"originalLine":125,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":1319,"originalLine":126,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":1369,"originalLine":127,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":1421,"originalLine":128,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":1475,"originalLine":129,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":1517,"originalLine":129,"originalColumn":41,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"expression","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":1531,"originalLine":129,"originalColumn":56,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"expression","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":1560,"originalLine":129,"originalColumn":86,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":1576,"originalLine":130,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":1593,"originalLine":131,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":1631,"originalLine":132,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":1698,"originalLine":133,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":1741,"originalLine":134,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":1755,"originalLine":135,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":1759,"originalLine":136,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":1825,"originalLine":137,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":1882,"originalLine":138,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":1899,"originalLine":139,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":1913,"originalLine":140,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":1917,"originalLine":141,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":1980,"originalLine":142,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":2008,"originalLine":143,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":2059,"originalLine":144,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":2102,"originalLine":145,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":2143,"originalLine":146,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":2175,"originalLine":147,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":2204,"originalLine":148,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":2230,"originalLine":149,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":2262,"originalLine":150,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":2282,"originalLine":151,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":2310,"originalLine":152,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":2344,"originalLine":153,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":2362,"originalLine":154,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":2373,"originalLine":155,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":2422,"originalLine":156,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":2469,"originalLine":157,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":2496,"originalLine":158,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":2524,"originalLine":159,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":2549,"originalLine":160,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":2577,"originalLine":161,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":2642,"originalLine":162,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":2684,"originalLine":163,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":2730,"originalLine":164,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":2763,"originalLine":165,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":2800,"originalLine":166,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":2828,"originalLine":167,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":2860,"originalLine":168,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":2889,"originalLine":168,"originalColumn":28,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"expression","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":2903,"originalLine":168,"originalColumn":43,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"expression","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":2932,"originalLine":168,"originalColumn":73,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":2948,"originalLine":169,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":2991,"originalLine":170,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":3005,"originalLine":171,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":3069,"originalLine":172,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":3110,"originalLine":173,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":3127,"originalLine":174,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":3140,"originalLine":175,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":3152,"originalLine":176,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":3156,"originalLine":177,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":3200,"originalLine":178,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":3228,"originalLine":179,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":3253,"originalLine":180,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":3279,"originalLine":181,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":3308,"originalLine":182,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":3365,"originalLine":183,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":3380,"originalLine":184,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"},{"generatedLine":12,"generatedColumn":3391,"originalLine":185,"originalColumn":1,"source":"generators/server/Application.Config/application.profiler.njs.js","name":"text","content":"<#@ noContent #>\n<#@ requireAs('server/Application.Config/requireThings.njs','requireThings') #>\n<#@ requireAs('server/Application.Config/profileControl.njs','control') #>\n<#@ requireAs('server/Application.Config/registerModules.njs','modules') #>\n<#@ requireAs('server/Application.Config/toolbarFuncs.njs','toolbarFuncs') #>\n\nExt.define('Modeleditor.controller.Profile', {\n    extend: 'Ext.app.Controller',\n    views: [\n<#- if(!context.noHealthCheck) {-#>\n      //'Admin.SpeedTestToolbar',\n<#-}#>\n      '#{context.name}#{context.currentProfile.name}.Viewport',\n      '#{context.name}#{context.currentProfile.name}.Navigation',\n      '#{context.name}#{context.currentProfile.name}.ToolBar',\n      '#{context.name}#{context.currentProfile.name}.ScreenContainer'\n    ],\n    models: [ ],\n    stores: [ ],\n\n    /*SCREEN CONFIG*/\n    screens:#{context.renderedScreens},\n\n    /*SCREEN CONTAINER DISPLAY CONFIG FOR: TABPANEL, PORTALPANEL, SINGLEPANEL*/\n    SCREENCONFIG:{\n      tabpanel:{\n        plain: true,\n        margin: \"2 0 0 0\"\n      },\n      singlepanel:{\n        plain: false,\n        margin: \"0\"\n      }\n    },\n\n    compareIndex: function(a,b) {\n      if (a.index < b.index)\n      return 1;\n      if (a.index > b.index)\n      return -1;\n      return 0;\n    },\n\n    compareOrder: function(a,b) {\n      if (a.order < b.order)\n      return 1;\n      if (a.order > b.order)\n      return -1;\n      return 0;\n    },\n\n    actionLoad: function(v, max) {\n      return function() {\n        if (v == 0) {\n          Ext.MessageBox.hide();\n        } else {\n        let i = (max - v + 1) / max;\n        Ext.MessageBox.updateProgress(i, Math.round(100 * i) + '% completed');\n      }\n    };\n  },\n\n  init: function() {\n    let me = this;\n    me.mainController = me.application.getController(\"Modeleditor.controller.Modeleditor\");\n#{partial(context, 'requireThings')}\n#{partial(context, 'control')}\n  },\n\n  loadProfile: function() {\n    let self = this;\n\n    /*LOAD VIEWPORT*/\n    this.mainController.getMainViewport().add(Ext.widget('#{context.name.toLowerCase() + context.currentProfile.name.toLowerCase()}viewport'));\n    /*LOAD SCREENS*/\n<#- if (context.SCREENS > 2) {#>\n    Ext.MessageBox.show({\n        title: _t('Please wait', 'SYSTEM', 'titles'),\n        msg: _t('Loading views...', 'SYSTEM','messages'),\n        progressText: _t('Initializing...', 'SYSTEM', 'messages'),\n        width: 300,\n        progress: true,\n        closable: false\n      });\n      self.SCREEN_LENGTH = self.screens?.length ?? 0;\n<#- }#>\n      if (self.screens) {\n        self.initScreen(self.screens, self);\n      }\n#{partial(context,'modules')}\n    },\n\n    #{partial(context,'toolbarFuncs')}\n\n    initScreen: function(screenItem, scope, callback) {\n      let self = scope;\n      if (screenItem) {\n        if (screenItem.defaultViews?.length > 0) {\n          screenItem.defaultViews.sort(self.compareOrder);\n          screenItem.defaultViews.sort(self.compareIndex);\n        }\n        let key = screenItem.type.split(\".\").pop().toLowerCase();\n        self.addScreenContainer(screenItem, key, self, function(el) {\n            let item;\n            let cnt = screenItem.defaultViews.length;\n            length = 0;\n\n            function done(err) {\n              if (err || ++length > cnt)\n              if (callback) callback();\n            }\n            for (let i = 0; i < cnt; i++) {\n              item = screenItem.defaultViews[i];\n              item.parentEl = el;\n              self.addContent(item, self, done);\n            }\n          });\n        } else {\n        if (callback) callback();\n      }\n    },\n\n    addScreenContainer: function(screenItem, key, scope, callback) {\n      let self = scope;\n      let itemData = {\n        element: Ext.create(screenItem.type, {\n            plain: self.SCREENCONFIG[key].plain,\n            margin: self.SCREENCONFIG[key].margin,\n            title: _t(screenItem.title,'#{context.name}#{context.currentProfile.name}', 'titles')\n          }),\n          index: screenItem.index,\n          contentPanel: self.mainController.getMainContainer(),\n          closable: screenItem.closable\n        };\n\n        self.mainController.preLoadItem(itemData, function() {\n            if (callback) callback(itemData.element);\n          });\n        },\n\n        addContent: function(screenItem, scope, callback) {\n          let me = this;\n          let reference = screenItem.reference;\n          let title = screenItem.title;\n          let type = screenItem.type;\n          let suffix = \"\";\n          switch (type) {\n          case 'list':\n          suffix = \"list\";\n          break;\n        case 'calendar':\n        suffix = \"calendar\";\n        break;\n      }\n      let widgetName = screenItem.widgetName;\n      let loadWidget = widgetName + suffix;\n      if (widgetName) {\n        let itemData = {\n          type: type,\n          element: null,\n          contentPanel: me.mainController.getMainContainer(),\n          require: screenItem.require,\n          reference: screenItem.reference,\n          widget: widgetName,\n          widgetName: loadWidget,\n          thingId: null,\n          queryResult: null,\n          title: _t(title,'#{context.name}#{context.currentProfile.name}','titles'),\n          closable: screenItem.closable\n        };\n        me.mainController.preLoadItem(itemData, function() {\n            if (callback) callback();\n          });\n        }\n      },\n\n      loadModule: function(moduleName) {\n        let self = this;\n        Ext.require([\n            moduleName\n          ], function() {\n          self.application.getController(moduleName);\n        });\n      }\n    });\n\n"}]}}