{"version":3,"sources":["generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"],"names":["code","text","expression"],"mappings":"AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IACCA;AADD,IACCA,AACAA;AAFD,IAECA,AACAA;AAHD,IAGCA,AACAA;AAJD,IAICA,AACAA;AALD,IAKCA,AACAA;AAND,IAMCA,AACAA;AAPD,IAOCA,AACAA;AARD,IAQCA,AAAEC,IACFA,IACAA,+BAA6BC,oBAAqBD,gBAAcC,eAAgBD,QAChFA,kBAAgBC,yBAA0BD,MAC1CA,+CACAA,mBAAiBC,qBAAsBD,kBACvCA,4CAA0CC,mBAAoBD,GAACC,eAAgBD,OAC/EA,aAAWC,qBAAsBD,MACjCA,iCAA+BC,oBAAqBD,GAACC,eAAgBD,KAAGD;AAhBzE,IAgByEA,AAAwBC,OAAIC,iBAAkBD,IAACD;AAhBxH,IAgBwHA,AAAKC,MAC5HA,IAAED;AAjBH,IAiBGA,AAA+BC,IACjCA,qBACAA,YAAUC,4BAA6BD,MACvCA,UAAQC,0BAA2BD,MACnCA,oBAAkBC,oCAAqCD,MACvDA,kBAAgBC,kCAAmCD,MACnDA,QACAA,IAAED;AAxBH,IAwBGA,AAAMC,IACRA,mBACAA,gBACAA,IAAED;AA3BH,IA2BGA,AAAkCC,IACpCA,SACAA,+BACAA,kCACAA,8BACAA,mCACAA,kCACAA,SACAA,IAAED;AAnCH,IAmCGA,AAAMC,IACRA,QACAA,IACAA,qBAAmBC,wBAAyBD,KAC5CA,iBAAeC,4EAA6ED,KAC5FA,UAAQC,kDAAmDD,KAC3DA,gCACAA,sBACAA,wBACAA,MAAID;AA5CL,IA4CKA,AAA0FC,IAC9FA,iBACAA,qCACAA,8BACAA,8BACAA,6DACAA,4CACAA,YACAA,MAAID;AApDL,IAoDKA,AAAOC,IACXA,oDAAiDC,eAAgBD,MAAGC,oBAAqBD,GAACC,eAAgBD,wBAC1GA,qFACAA,2BACAA,4BACAA,mDAAiDD;AAzDlD,IAyDkDA,AACjDA;AA1DD,IA0DCA,AACAA;AA3DD,IA2DCA,AACAA;AA5DD,IA4DCA,AACAA;AA7DD,IA6DCA,AAA4BC,IAC5BA,yCAAuCC,oBAAqBD,GAACC,eAAgBD,aAAWC,uBAAwBD,IAAEC,cAAeD,SACjIA,YAAUD;AA/DX,IA+DWA,AACVA;AAhED,IAgECA,AACAA;AAjED,IAiECA,AACAA;AAlED,IAkECA,AAAUC,IACVA,YACAA,IACAA,sBACAA,wDACAA,4FAA0FC,oBAAqBD,GAACC,eAAgBD,yDAChIA,uDACAA,uDACAA,wDACAA,+DACAA,+DACAA,gEACAA,cACAA,2EACAA,6FAA2FC,oBAAqBD,GAACC,eAAgBD,kEACjIA,cACAA,wEACAA,sFAAoFC,oBAAqBD,GAACC,eAAgBD,kEAC1HA,aACAA,YACAA,WACAA,mCACAA,OACAA;AAzFD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","file":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","sourceRoot":"/Users/vedmalex/work/fte2/demo","sourcesContent":["<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"],"template":{"version":"1.0.0","segments":[{"generatedLine":1,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":2,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":3,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":4,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":5,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":6,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":7,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":8,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":9,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":10,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":11,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":12,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":13,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":14,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":15,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":16,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":17,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":18,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":19,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":20,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":21,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":22,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":23,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":24,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":25,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":26,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":27,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":28,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":29,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":30,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":31,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":32,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":33,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":34,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":35,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":36,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":37,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":38,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":39,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":40,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":41,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":42,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":43,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":44,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":45,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":46,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":47,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":48,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":49,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":50,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":51,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":52,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":53,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":54,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":55,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":56,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":57,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":58,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":59,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":60,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":61,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":62,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":63,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":64,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":65,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":66,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":67,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":68,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":69,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":70,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":71,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":72,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":73,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":74,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":75,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":76,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":77,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":78,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":79,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":80,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":81,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":82,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":83,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":84,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":85,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":86,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":87,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":88,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":89,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":90,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":91,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":92,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":93,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":94,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":95,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":96,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":97,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":98,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":99,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":100,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":101,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":102,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":103,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":104,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":105,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":106,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":107,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":108,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":109,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":110,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":111,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":112,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":113,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":114,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":115,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":116,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":117,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":118,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":119,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":120,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":121,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":122,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":123,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":124,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":125,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":126,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js"},{"generatedLine":8,"generatedColumn":4,"originalLine":2,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":9,"generatedColumn":4,"originalLine":2,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":9,"generatedColumn":4,"originalLine":3,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":10,"generatedColumn":4,"originalLine":3,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":10,"generatedColumn":4,"originalLine":4,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":11,"generatedColumn":4,"originalLine":4,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":11,"generatedColumn":4,"originalLine":5,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":12,"generatedColumn":4,"originalLine":5,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":12,"generatedColumn":4,"originalLine":6,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":4,"originalLine":6,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":4,"originalLine":7,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":14,"generatedColumn":4,"originalLine":7,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":14,"generatedColumn":4,"originalLine":8,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":15,"generatedColumn":4,"originalLine":8,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":15,"generatedColumn":4,"originalLine":9,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":4,"originalLine":9,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":4,"originalLine":9,"originalColumn":3,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":8,"originalLine":10,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":12,"originalLine":11,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":43,"originalLine":11,"originalColumn":30,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":63,"originalLine":11,"originalColumn":51,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":79,"originalLine":11,"originalColumn":65,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":94,"originalLine":11,"originalColumn":81,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":102,"originalLine":12,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":120,"originalLine":12,"originalColumn":17,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":145,"originalLine":12,"originalColumn":43,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":151,"originalLine":13,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":198,"originalLine":14,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":217,"originalLine":14,"originalColumn":18,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":238,"originalLine":14,"originalColumn":40,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":256,"originalLine":15,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":300,"originalLine":15,"originalColumn":43,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":319,"originalLine":15,"originalColumn":63,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":322,"originalLine":15,"originalColumn":64,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":337,"originalLine":15,"originalColumn":80,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":344,"originalLine":16,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":357,"originalLine":16,"originalColumn":12,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":378,"originalLine":16,"originalColumn":34,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":384,"originalLine":17,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":417,"originalLine":17,"originalColumn":32,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":437,"originalLine":17,"originalColumn":53,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":440,"originalLine":17,"originalColumn":54,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":455,"originalLine":17,"originalColumn":70,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":460,"originalLine":17,"originalColumn":73,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":17,"generatedColumn":4,"originalLine":17,"originalColumn":73,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":17,"generatedColumn":4,"originalLine":17,"originalColumn":97,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":17,"generatedColumn":11,"originalLine":17,"originalColumn":101,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":17,"generatedColumn":28,"originalLine":17,"originalColumn":119,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":17,"generatedColumn":32,"originalLine":17,"originalColumn":120,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":18,"generatedColumn":4,"originalLine":17,"originalColumn":120,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":18,"generatedColumn":4,"originalLine":17,"originalColumn":125,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":18,"generatedColumn":10,"originalLine":18,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":18,"generatedColumn":14,"originalLine":18,"originalColumn":3,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":19,"generatedColumn":4,"originalLine":18,"originalColumn":3,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":19,"generatedColumn":4,"originalLine":18,"originalColumn":34,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":19,"generatedColumn":8,"originalLine":19,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":19,"generatedColumn":29,"originalLine":20,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":19,"generatedColumn":41,"originalLine":20,"originalColumn":11,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":19,"generatedColumn":69,"originalLine":20,"originalColumn":40,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":19,"generatedColumn":75,"originalLine":21,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":19,"generatedColumn":85,"originalLine":21,"originalColumn":9,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":19,"generatedColumn":111,"originalLine":21,"originalColumn":36,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":19,"generatedColumn":117,"originalLine":22,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":19,"generatedColumn":137,"originalLine":22,"originalColumn":19,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":19,"generatedColumn":173,"originalLine":22,"originalColumn":56,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":19,"generatedColumn":179,"originalLine":23,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":19,"generatedColumn":197,"originalLine":23,"originalColumn":17,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":19,"generatedColumn":231,"originalLine":23,"originalColumn":52,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":19,"generatedColumn":237,"originalLine":24,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":19,"generatedColumn":245,"originalLine":25,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":19,"generatedColumn":249,"originalLine":25,"originalColumn":3,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":20,"generatedColumn":4,"originalLine":25,"originalColumn":3,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":20,"generatedColumn":4,"originalLine":25,"originalColumn":9,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":20,"generatedColumn":8,"originalLine":26,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":20,"generatedColumn":27,"originalLine":27,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":20,"generatedColumn":43,"originalLine":28,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":20,"generatedColumn":47,"originalLine":28,"originalColumn":3,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":21,"generatedColumn":4,"originalLine":28,"originalColumn":3,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":21,"generatedColumn":4,"originalLine":28,"originalColumn":37,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":21,"generatedColumn":8,"originalLine":29,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":21,"generatedColumn":17,"originalLine":30,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":21,"generatedColumn":48,"originalLine":31,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":21,"generatedColumn":82,"originalLine":32,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":21,"generatedColumn":112,"originalLine":33,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":21,"generatedColumn":147,"originalLine":34,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":21,"generatedColumn":181,"originalLine":35,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":21,"generatedColumn":190,"originalLine":36,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":21,"generatedColumn":194,"originalLine":36,"originalColumn":3,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":22,"generatedColumn":4,"originalLine":36,"originalColumn":3,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":22,"generatedColumn":4,"originalLine":36,"originalColumn":9,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":22,"generatedColumn":8,"originalLine":37,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":22,"generatedColumn":16,"originalLine":38,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":22,"generatedColumn":20,"originalLine":39,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":22,"generatedColumn":41,"originalLine":39,"originalColumn":20,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":22,"generatedColumn":65,"originalLine":39,"originalColumn":45,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":22,"generatedColumn":70,"originalLine":40,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":22,"generatedColumn":87,"originalLine":40,"originalColumn":16,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":22,"generatedColumn":163,"originalLine":40,"originalColumn":93,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":22,"generatedColumn":168,"originalLine":41,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":22,"generatedColumn":178,"originalLine":41,"originalColumn":9,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":22,"generatedColumn":228,"originalLine":41,"originalColumn":60,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":22,"generatedColumn":233,"originalLine":42,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":22,"generatedColumn":265,"originalLine":43,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":22,"generatedColumn":287,"originalLine":44,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":22,"generatedColumn":311,"originalLine":45,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":22,"generatedColumn":317,"originalLine":45,"originalColumn":5,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":23,"generatedColumn":4,"originalLine":45,"originalColumn":5,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":23,"generatedColumn":4,"originalLine":45,"originalColumn":95,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":23,"generatedColumn":8,"originalLine":46,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":23,"generatedColumn":25,"originalLine":47,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":23,"generatedColumn":62,"originalLine":48,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":23,"generatedColumn":92,"originalLine":49,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":23,"generatedColumn":122,"originalLine":50,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":23,"generatedColumn":183,"originalLine":51,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":23,"generatedColumn":227,"originalLine":52,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":23,"generatedColumn":239,"originalLine":53,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":23,"generatedColumn":245,"originalLine":53,"originalColumn":5,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":24,"generatedColumn":4,"originalLine":53,"originalColumn":5,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":24,"generatedColumn":4,"originalLine":53,"originalColumn":12,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":24,"generatedColumn":8,"originalLine":54,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":24,"generatedColumn":60,"originalLine":54,"originalColumn":50,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":24,"generatedColumn":75,"originalLine":54,"originalColumn":66,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":24,"generatedColumn":81,"originalLine":54,"originalColumn":69,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":24,"generatedColumn":101,"originalLine":54,"originalColumn":90,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":24,"generatedColumn":104,"originalLine":54,"originalColumn":91,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":24,"generatedColumn":119,"originalLine":54,"originalColumn":107,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":24,"generatedColumn":143,"originalLine":55,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":24,"generatedColumn":228,"originalLine":56,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":24,"generatedColumn":255,"originalLine":57,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":24,"generatedColumn":283,"originalLine":58,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":24,"generatedColumn":334,"originalLine":58,"originalColumn":50,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":25,"generatedColumn":4,"originalLine":58,"originalColumn":50,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":25,"generatedColumn":4,"originalLine":59,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":26,"generatedColumn":4,"originalLine":59,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":26,"generatedColumn":4,"originalLine":60,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":27,"generatedColumn":4,"originalLine":60,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":27,"generatedColumn":4,"originalLine":61,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":28,"generatedColumn":4,"originalLine":61,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":28,"generatedColumn":4,"originalLine":62,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":29,"generatedColumn":4,"originalLine":62,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":29,"generatedColumn":4,"originalLine":62,"originalColumn":29,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":29,"generatedColumn":8,"originalLine":63,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":29,"generatedColumn":49,"originalLine":63,"originalColumn":40,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":29,"generatedColumn":69,"originalLine":63,"originalColumn":61,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":29,"generatedColumn":72,"originalLine":63,"originalColumn":62,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":29,"generatedColumn":87,"originalLine":63,"originalColumn":78,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":29,"generatedColumn":100,"originalLine":63,"originalColumn":89,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":29,"generatedColumn":123,"originalLine":63,"originalColumn":113,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":29,"generatedColumn":127,"originalLine":63,"originalColumn":115,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":29,"generatedColumn":141,"originalLine":63,"originalColumn":130,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":29,"generatedColumn":150,"originalLine":64,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":29,"generatedColumn":162,"originalLine":64,"originalColumn":11,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":30,"generatedColumn":4,"originalLine":64,"originalColumn":11,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":30,"generatedColumn":4,"originalLine":65,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":31,"generatedColumn":4,"originalLine":65,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":31,"generatedColumn":4,"originalLine":66,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":32,"generatedColumn":4,"originalLine":66,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":32,"generatedColumn":4,"originalLine":67,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":33,"generatedColumn":4,"originalLine":67,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":33,"generatedColumn":4,"originalLine":67,"originalColumn":11,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":33,"generatedColumn":8,"originalLine":68,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":33,"generatedColumn":20,"originalLine":69,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":33,"generatedColumn":24,"originalLine":70,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":33,"generatedColumn":46,"originalLine":71,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":33,"generatedColumn":102,"originalLine":72,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":33,"generatedColumn":194,"originalLine":72,"originalColumn":91,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":33,"generatedColumn":214,"originalLine":72,"originalColumn":112,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":33,"generatedColumn":217,"originalLine":72,"originalColumn":113,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":33,"generatedColumn":232,"originalLine":72,"originalColumn":129,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":33,"generatedColumn":289,"originalLine":73,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":33,"generatedColumn":344,"originalLine":74,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":33,"generatedColumn":399,"originalLine":75,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":33,"generatedColumn":455,"originalLine":76,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":33,"generatedColumn":518,"originalLine":77,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":33,"generatedColumn":581,"originalLine":78,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":33,"generatedColumn":645,"originalLine":79,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":33,"generatedColumn":659,"originalLine":80,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":33,"generatedColumn":734,"originalLine":81,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":33,"generatedColumn":827,"originalLine":81,"originalColumn":92,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":33,"generatedColumn":847,"originalLine":81,"originalColumn":113,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":33,"generatedColumn":850,"originalLine":81,"originalColumn":114,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":33,"generatedColumn":865,"originalLine":81,"originalColumn":130,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":33,"generatedColumn":931,"originalLine":82,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":33,"generatedColumn":945,"originalLine":83,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":33,"generatedColumn":1017,"originalLine":84,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":33,"generatedColumn":1103,"originalLine":84,"originalColumn":85,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":33,"generatedColumn":1123,"originalLine":84,"originalColumn":106,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":33,"generatedColumn":1126,"originalLine":84,"originalColumn":107,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":33,"generatedColumn":1141,"originalLine":84,"originalColumn":123,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":33,"generatedColumn":1207,"originalLine":85,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":33,"generatedColumn":1220,"originalLine":86,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":33,"generatedColumn":1232,"originalLine":87,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":33,"generatedColumn":1243,"originalLine":88,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":33,"generatedColumn":1278,"originalLine":89,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":33,"generatedColumn":1285,"originalLine":90,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.ListEmbedded.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  const getToolbar = context.getToolbar\n\n  let properties = context.gridviewProps\n  const config = context.getThingConfig(context)\n\n#>\n\nExt.define('Modeleditor.view.#{context.$namespace}.ListEmbedded.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  extend: 'Modeleditor.view.base.baseGrid',\n  alias: 'widget.#{context.$widgetName}listembedded',\n  // store: Ext.create('Modeleditor.store.#{context.namespace}.#{context.$name}'),\n  widget: '#{context.$widgetName}',\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  <#-if(context.periodicalRel){#>\n  periodicalRel:{\n    from:'#{context.periodicalRel.from}',\n    to:'#{context.periodicalRel.to}',\n    fromKeyField:'#{context.periodicalRel.fromKeyField}',\n    toKeyField:'#{context.periodicalRel.toKeyField}',\n  },\n  <#-}#>\n  border: true,\n  plugins: [\n  <#-if(config.filterForEmbedded){#>\n    {\n      ptype: \"filterbar\",\n      pluginId: \"filterbar\",\n      renderHidden: false,\n      showShowHideButton: true,\n      showClearAllButton: true\n    }\n  <#-}#>\n  ],\n\n  calendarMapping: #{!!context.cal_mapping },\n  searchQuery: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined},\n  tbar: #{JSON.stringify(getToolbar(context.gridsettings))},\n  initComponent: function(){\n    let me = this;\n    Ext.apply(this,{\n    <#- if(!context.queryResult && config.pageSizeEmbedded !== -1 && !context.staticStore) {#>\n      bbar: {\n        xtype: \"pagingtoolbar\",\n        store: this.store,\n        displayInfo: true,\n        displayMsg: 'Displaying topics {0} - {1} of {2}',\n        emptyMsg: \"No data to display\"\n      },\n    <#- }#>\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      selModel: Ext.create('Ext.selection.CheckboxModel', {pruneRemoved: false}),\n      autoRender: true,\n      overflowY: 'auto',\n      columns: [{xtype: 'rownumberer', width:40},<#\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          let g = properties[i]\n          if(g.generated){#>\n          Grainjs.metadata['gridfields.#{context.$namespace}.#{context.$name}'].fields[`#{property.propertyName}::#{g.columnText}`](),\n          <#\n          }\n        }\n        #>\n      ],\n\n      listeners: {\n        'selectionchange': function(view, records) {\n          DirectCacheLogger.userStories('Embedded Grid Selection Change', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, selectedCount: records.length });\n          let rbutton = this.down('#removeButton');\n          let ubutton = this.down('#unlinkButton');\n          let dbutton = this.down('#detailsButton');\n          if(rbutton) rbutton.setDisabled(!records.length);\n          if(ubutton) ubutton.setDisabled(!records.length);\n          if(dbutton) dbutton.setDisabled(records.length-1);\n        },\n        'itemdblclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Double Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        },\n        'itemclick': function(view, record, item, index, e, eOpts) {\n          DirectCacheLogger.userStories('Embedded Grid Item Click', { serverModel: '#{context.$namespace}.#{context.$name}', gridId: this.id, recordId: record.getId(), index: index });\n        }\n      },\n    });\n    this.callParent(arguments);\n  }\n});\n"}]}}