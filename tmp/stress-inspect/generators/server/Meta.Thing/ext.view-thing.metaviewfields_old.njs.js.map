{"version":3,"sources":["generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"],"names":["code","text","expression"],"mappings":"AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IACCA;AADD,IACCA,AACAA;AAFD,IAECA,AACAA;AAHD,IAGCA,AACAA;AAJD,IAICA,AACAA;AALD,IAKCA,AACAA;AAND,IAMCA,AAAEC,IACFA,IACAA,qCAAmCC,oBAAqBD,GAACC,eAAgBD,QACzEA,mCACAA,eACAA,kBAAgBC,oBAAqBD,GAACC,eAAgBD,QACtDA,MAAID;AAZL,IAYKA,AACJA;AAbD,IAaCA,AACAA;AAdD,IAcCA,AACAA;AAfD,IAeCA,AACAA;AAhBD,IAgBCA,AACAA;AAjBD,IAiBCA,AACAA;AAlBD,IAkBCA,AACAA;AAnBD,IAmBCA,AACAA;AApBD,IAoBCA,AAAcC,IACdA,kBAAgBC,uBAAwBD,IAAEC,eAAgBD,QAC1DA,mCAAiCC,uBAAwBD,MACzDA,kBAAgBD;AAvBjB,IAuBiBA,AAA8BC,IAC9CA,qCAAmCC,+BAAgCD,IAAEC,oBAAqBD,GAACC,eAAgBD,eAAaC,uBAAwBD,OAChJA,yDACAA,kBAAgBD;AA1BjB,IA0BiBA,AAAYC,IAC5BA,yDACAA,kBAAgBD;AA5BjB,IA4BiBA,AAAKC,IACrBA,kCAAgCC,UAAWD,KAC3CA,kBAAgBD;AA9BjB,IA8BiBA,AAAqBC,IACrCA,6CAA2CC,cAAeD,SAC1DA,kBAAgBD;AAhCjB,IAgCiBA,AAAKC,IACrBA,kCAAgCC,8BAA+BD,KAC/DA,kCAAgCC,cAAeD,KAC/CA,kCAAgCC,eAAgBD,KAChDA,kCAAgCC,oCAAqCD,KACrEA,mCAAiCC,6BAA8BD,MAC/DA,kCAAgCC,QAASD,KACzCA,kCAAgCC,cAAeD,KAC/CA,oCACAA,IACAA,kBAAgBD;AA1CjB,IA0CiBA,AAAkCC,IAClDA,8CACAA,yCACAA,0CACAA,0CACAA,kBAAgBD;AA/CjB,IA+CiBA,AAAYC,IAC5BA,kDACAA,kBAAgBD;AAjDjB,IAiDiBA,AAAKC,IACrBA,kBAAgBD;AAlDjB,IAkDiBA,AAAqCC,IACrDA,8DAA4DC,oBAAqBD,GAACC,eAAgBD,mBAAiBC,uBAAwBD,OAC3IA,kBAAgBD;AApDjB,IAoDiBA,AAA4BC,IAC5CA,6DAA2DC,oBAAqBD,GAACC,eAAgBD,KAAGC,uCAAwCD,MAC5IA,kBAAgBD;AAtDjB,IAsDiBA,AAAaC,IAC7BA,8DAA4DC,oBAAqBD,GAACC,eAAgBD,kBAAgBC,uCAAwCD,eAC1JA,kBAAgBD;AAxDjB,IAwDiBA,AAAMC,IACtBA,kBAAgBD;AAzDjB,IAyDiBA,AAAOC,IACvBA,oBACAA,cAAYD;AA3Db,IA2DaA,AACZA;AA5DD,IA4DCA,AACAA;AA7DD,IA6DCA,AACAA;AA9DD,IA8DCA,AAAOC,IACPA,SACAA,OACAA;AAjED;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","file":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","sourceRoot":"/Users/vedmalex/work/fte2/demo","sourcesContent":["<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"],"template":{"version":"1.0.0","segments":[{"generatedLine":1,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":2,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":3,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":4,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":5,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":6,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":7,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":8,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":9,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":10,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":11,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":12,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":13,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":14,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":15,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":16,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":17,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":18,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":19,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":20,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":21,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":22,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":23,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":24,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":25,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":26,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":27,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":28,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":29,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":30,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":31,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":32,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":33,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":34,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":35,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":36,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":37,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":38,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":39,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":40,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":41,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":42,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":43,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":44,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":45,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":46,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":47,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":48,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":49,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":50,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":51,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":52,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":53,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":54,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":55,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":56,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":57,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":58,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":59,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":60,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":61,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":62,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":63,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":64,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":65,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":66,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":67,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":68,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":69,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":70,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":71,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":72,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":73,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":74,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":75,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":76,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":77,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":78,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":79,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":80,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":81,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":82,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":83,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":84,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":85,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":86,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":87,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":88,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":89,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":90,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":91,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":92,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":93,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":94,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":95,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":96,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":97,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":98,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":99,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":100,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":101,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":102,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":103,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":104,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":105,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":106,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":107,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":108,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":109,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":110,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":111,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":112,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js"},{"generatedLine":8,"generatedColumn":4,"originalLine":2,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":9,"generatedColumn":4,"originalLine":2,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":9,"generatedColumn":4,"originalLine":3,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":10,"generatedColumn":4,"originalLine":3,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":10,"generatedColumn":4,"originalLine":4,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":11,"generatedColumn":4,"originalLine":4,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":11,"generatedColumn":4,"originalLine":5,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":12,"generatedColumn":4,"originalLine":5,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":12,"generatedColumn":4,"originalLine":6,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":13,"generatedColumn":4,"originalLine":6,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":13,"generatedColumn":4,"originalLine":7,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":14,"generatedColumn":4,"originalLine":7,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":14,"generatedColumn":4,"originalLine":7,"originalColumn":3,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":14,"generatedColumn":8,"originalLine":8,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":14,"generatedColumn":12,"originalLine":9,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":14,"generatedColumn":49,"originalLine":9,"originalColumn":36,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":14,"generatedColumn":69,"originalLine":9,"originalColumn":57,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":14,"generatedColumn":72,"originalLine":9,"originalColumn":58,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":14,"generatedColumn":87,"originalLine":9,"originalColumn":74,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":14,"generatedColumn":95,"originalLine":10,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":14,"generatedColumn":130,"originalLine":11,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":14,"generatedColumn":145,"originalLine":12,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":14,"generatedColumn":163,"originalLine":12,"originalColumn":17,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":14,"generatedColumn":183,"originalLine":12,"originalColumn":38,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":14,"generatedColumn":186,"originalLine":12,"originalColumn":39,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":14,"generatedColumn":201,"originalLine":12,"originalColumn":55,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":14,"generatedColumn":209,"originalLine":13,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":14,"generatedColumn":215,"originalLine":13,"originalColumn":5,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":15,"generatedColumn":4,"originalLine":13,"originalColumn":5,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":15,"generatedColumn":4,"originalLine":14,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":16,"generatedColumn":4,"originalLine":14,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":16,"generatedColumn":4,"originalLine":15,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":17,"generatedColumn":4,"originalLine":15,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":17,"generatedColumn":4,"originalLine":16,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":18,"generatedColumn":4,"originalLine":16,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":18,"generatedColumn":4,"originalLine":17,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":19,"generatedColumn":4,"originalLine":17,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":19,"generatedColumn":4,"originalLine":18,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":20,"generatedColumn":4,"originalLine":18,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":20,"generatedColumn":4,"originalLine":19,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":21,"generatedColumn":4,"originalLine":19,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":21,"generatedColumn":4,"originalLine":20,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":22,"generatedColumn":4,"originalLine":20,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":22,"generatedColumn":4,"originalLine":21,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":23,"generatedColumn":4,"originalLine":21,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":23,"generatedColumn":4,"originalLine":21,"originalColumn":15,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":23,"generatedColumn":8,"originalLine":22,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":23,"generatedColumn":26,"originalLine":22,"originalColumn":17,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":23,"generatedColumn":49,"originalLine":22,"originalColumn":41,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":23,"generatedColumn":53,"originalLine":22,"originalColumn":43,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":23,"generatedColumn":68,"originalLine":22,"originalColumn":59,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":23,"generatedColumn":76,"originalLine":23,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":23,"generatedColumn":111,"originalLine":23,"originalColumn":34,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":23,"generatedColumn":134,"originalLine":23,"originalColumn":58,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":23,"generatedColumn":140,"originalLine":24,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":23,"generatedColumn":158,"originalLine":24,"originalColumn":17,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":24,"generatedColumn":4,"originalLine":24,"originalColumn":17,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":24,"generatedColumn":4,"originalLine":24,"originalColumn":47,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":24,"generatedColumn":8,"originalLine":25,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":24,"generatedColumn":45,"originalLine":25,"originalColumn":36,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":24,"generatedColumn":76,"originalLine":25,"originalColumn":68,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":24,"generatedColumn":80,"originalLine":25,"originalColumn":70,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":24,"generatedColumn":100,"originalLine":25,"originalColumn":91,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":24,"generatedColumn":103,"originalLine":25,"originalColumn":92,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":24,"generatedColumn":118,"originalLine":25,"originalColumn":108,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":24,"generatedColumn":133,"originalLine":25,"originalColumn":121,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":24,"generatedColumn":156,"originalLine":25,"originalColumn":145,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":24,"generatedColumn":163,"originalLine":26,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":24,"generatedColumn":220,"originalLine":27,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":24,"generatedColumn":238,"originalLine":27,"originalColumn":17,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":25,"generatedColumn":4,"originalLine":27,"originalColumn":17,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":25,"generatedColumn":4,"originalLine":27,"originalColumn":29,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":25,"generatedColumn":8,"originalLine":28,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":25,"generatedColumn":65,"originalLine":29,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":25,"generatedColumn":83,"originalLine":29,"originalColumn":17,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":26,"generatedColumn":4,"originalLine":29,"originalColumn":17,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":26,"generatedColumn":4,"originalLine":29,"originalColumn":22,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":26,"generatedColumn":8,"originalLine":30,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":26,"generatedColumn":42,"originalLine":30,"originalColumn":33,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":26,"generatedColumn":52,"originalLine":30,"originalColumn":44,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":26,"generatedColumn":57,"originalLine":31,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":26,"generatedColumn":75,"originalLine":31,"originalColumn":17,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":27,"generatedColumn":4,"originalLine":31,"originalColumn":17,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":27,"generatedColumn":4,"originalLine":31,"originalColumn":38,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":27,"generatedColumn":8,"originalLine":32,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":27,"generatedColumn":53,"originalLine":32,"originalColumn":44,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":27,"generatedColumn":67,"originalLine":32,"originalColumn":59,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":27,"generatedColumn":76,"originalLine":33,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":27,"generatedColumn":94,"originalLine":33,"originalColumn":17,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":28,"generatedColumn":4,"originalLine":33,"originalColumn":17,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":28,"generatedColumn":4,"originalLine":33,"originalColumn":22,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":28,"generatedColumn":8,"originalLine":34,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":28,"generatedColumn":42,"originalLine":34,"originalColumn":33,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":28,"generatedColumn":72,"originalLine":34,"originalColumn":64,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":28,"generatedColumn":77,"originalLine":35,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":28,"generatedColumn":111,"originalLine":35,"originalColumn":33,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":28,"generatedColumn":125,"originalLine":35,"originalColumn":48,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":28,"generatedColumn":130,"originalLine":36,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":28,"generatedColumn":164,"originalLine":36,"originalColumn":33,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":28,"generatedColumn":179,"originalLine":36,"originalColumn":49,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":28,"generatedColumn":184,"originalLine":37,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":28,"generatedColumn":218,"originalLine":37,"originalColumn":33,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":28,"generatedColumn":254,"originalLine":37,"originalColumn":70,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":28,"generatedColumn":259,"originalLine":38,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":28,"generatedColumn":294,"originalLine":38,"originalColumn":34,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":28,"generatedColumn":323,"originalLine":38,"originalColumn":64,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":28,"generatedColumn":329,"originalLine":39,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":28,"generatedColumn":363,"originalLine":39,"originalColumn":33,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":28,"generatedColumn":371,"originalLine":39,"originalColumn":42,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":28,"generatedColumn":376,"originalLine":40,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":28,"generatedColumn":410,"originalLine":40,"originalColumn":33,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":28,"generatedColumn":424,"originalLine":40,"originalColumn":48,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":28,"generatedColumn":429,"originalLine":41,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":28,"generatedColumn":465,"originalLine":42,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":28,"generatedColumn":469,"originalLine":43,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":28,"generatedColumn":487,"originalLine":43,"originalColumn":17,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":29,"generatedColumn":4,"originalLine":43,"originalColumn":17,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":29,"generatedColumn":4,"originalLine":43,"originalColumn":51,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":29,"generatedColumn":8,"originalLine":44,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":29,"generatedColumn":54,"originalLine":45,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":29,"generatedColumn":95,"originalLine":46,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":29,"generatedColumn":137,"originalLine":47,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":29,"generatedColumn":179,"originalLine":48,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":29,"generatedColumn":197,"originalLine":48,"originalColumn":17,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":30,"generatedColumn":4,"originalLine":48,"originalColumn":17,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":30,"generatedColumn":4,"originalLine":48,"originalColumn":29,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":30,"generatedColumn":8,"originalLine":49,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":30,"generatedColumn":58,"originalLine":50,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":30,"generatedColumn":76,"originalLine":50,"originalColumn":17,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":31,"generatedColumn":4,"originalLine":50,"originalColumn":17,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":31,"generatedColumn":4,"originalLine":50,"originalColumn":22,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":31,"generatedColumn":8,"originalLine":51,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":31,"generatedColumn":26,"originalLine":51,"originalColumn":17,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":32,"generatedColumn":4,"originalLine":51,"originalColumn":17,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":32,"generatedColumn":4,"originalLine":51,"originalColumn":54,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":32,"generatedColumn":8,"originalLine":52,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":32,"generatedColumn":70,"originalLine":52,"originalColumn":61,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":32,"generatedColumn":90,"originalLine":52,"originalColumn":82,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":32,"generatedColumn":93,"originalLine":52,"originalColumn":83,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":32,"generatedColumn":108,"originalLine":52,"originalColumn":99,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":32,"generatedColumn":127,"originalLine":52,"originalColumn":116,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":32,"generatedColumn":150,"originalLine":52,"originalColumn":140,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":32,"generatedColumn":157,"originalLine":53,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":32,"generatedColumn":175,"originalLine":53,"originalColumn":17,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":33,"generatedColumn":4,"originalLine":53,"originalColumn":17,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":33,"generatedColumn":4,"originalLine":53,"originalColumn":45,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":33,"generatedColumn":8,"originalLine":54,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":33,"generatedColumn":69,"originalLine":54,"originalColumn":60,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":33,"generatedColumn":89,"originalLine":54,"originalColumn":81,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":33,"generatedColumn":92,"originalLine":54,"originalColumn":82,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":33,"generatedColumn":107,"originalLine":54,"originalColumn":98,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":33,"generatedColumn":112,"originalLine":54,"originalColumn":101,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":33,"generatedColumn":151,"originalLine":54,"originalColumn":141,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":33,"generatedColumn":157,"originalLine":55,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":33,"generatedColumn":175,"originalLine":55,"originalColumn":17,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":34,"generatedColumn":4,"originalLine":55,"originalColumn":17,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":34,"generatedColumn":4,"originalLine":55,"originalColumn":30,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":34,"generatedColumn":8,"originalLine":56,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":34,"generatedColumn":70,"originalLine":56,"originalColumn":61,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":34,"generatedColumn":90,"originalLine":56,"originalColumn":82,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":34,"generatedColumn":93,"originalLine":56,"originalColumn":83,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":34,"generatedColumn":108,"originalLine":56,"originalColumn":99,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":34,"generatedColumn":126,"originalLine":56,"originalColumn":115,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"expression","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":34,"generatedColumn":165,"originalLine":56,"originalColumn":155,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":34,"generatedColumn":180,"originalLine":57,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":34,"generatedColumn":198,"originalLine":57,"originalColumn":17,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":35,"generatedColumn":4,"originalLine":57,"originalColumn":17,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":35,"generatedColumn":4,"originalLine":57,"originalColumn":23,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":35,"generatedColumn":8,"originalLine":58,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":35,"generatedColumn":26,"originalLine":58,"originalColumn":17,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":36,"generatedColumn":4,"originalLine":58,"originalColumn":17,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":36,"generatedColumn":4,"originalLine":58,"originalColumn":24,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":36,"generatedColumn":8,"originalLine":59,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":36,"generatedColumn":28,"originalLine":60,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":36,"generatedColumn":42,"originalLine":60,"originalColumn":13,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":37,"generatedColumn":4,"originalLine":60,"originalColumn":13,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":37,"generatedColumn":4,"originalLine":61,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":38,"generatedColumn":4,"originalLine":61,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":38,"generatedColumn":4,"originalLine":62,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":39,"generatedColumn":4,"originalLine":62,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":39,"generatedColumn":4,"originalLine":63,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":40,"generatedColumn":4,"originalLine":63,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"code","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":40,"generatedColumn":4,"originalLine":63,"originalColumn":8,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":40,"generatedColumn":8,"originalLine":64,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":40,"generatedColumn":17,"originalLine":65,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"},{"generatedLine":40,"generatedColumn":24,"originalLine":66,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.metaviewfields_old.njs.js","name":"text","content":"<#@ noContent #>\n<#\n  const _ = require('lodash')\n  const arrayToHash = context.arrayToHash\n  const getFormat = context.getFormat\n  let properties = arrayToHash(context.formviewProps, \"propertyName\");\n#>\n\nExt.define('Grainjs.metaviewfields.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'viewfields.#{context.$namespace}.#{context.$name}': {\n    <#- for (let pName in properties){\n        if (Object.prototype.hasOwnProperty.call(properties, pName)) {\n          let property = properties[pName][0];\n          let fviews = arrayToHash(property.formview, \"profile\", property, \"form\");\n          const _fArr   = (fviews[context.$$$profile] !== undefined) ? fviews[context.$$$profile] : fviews['default'];\n          const fArr = _.sortBy(_fArr, ['order', 'displayName'])\n          for (let k = 0; k < fArr.length; k++) {\n            let f = fArr[k];\n            #>\n              [`#{property.propertyName}::#{f.displayName}`]:{\n                name:           '#{property.propertyName}',\n                <#if(f.displayName !== '_'){#>\n                fieldLabel:     _t(#{JSON.stringify(f.displayName)},'#{context.$namespace}.#{context.$name}', 'labels','#{property.propertyName}'),\n                cls:   \"displayFld custom-x-field\",\n                <#} else {#>\n                cls:   \"emptyLabel custom-x-field\",\n                <#}#>\n                hidden:         #{f.hidden},\n                <#if(f.labelWidth){#>\n                labelStyle:     'min-width:#{f.labelWidth}px;',\n                <#}#>\n                labelAlign:     #{JSON.stringify(f.labelAlign)},\n                labelWidth:     #{f.labelWidth},\n                columnWidth:    #{f.columnWidth},\n                renderer:       #{context.getDisplayFieldRenderer(f)},\n                dataType:       '#{property.type.toLowerCase()}',\n                grow:           #{f.grow},\n                format:         #{getFormat(f)},\n                margin: \"4px\",\n\n                <#if(f.fieldtype ==='checkbox'){#>\n                xtype:         'checkbox',\n                readOnly:       true,\n                inputValue:         1,\n                uncheckedValue:     0,\n                <#} else {#>\n                xtype:         'displayfield',\n                <#}#>\n                <#- if(f.fieldtype === \"combobox\"){#>\n                comboOptions:   Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions['#{property.propertyName}'],\n                <#if(f.comboForcePreload){#>\n                renderStore: Grainjs.metadata['renderstore.#{context.$namespace}.#{context.$name}'][#{JSON.stringify(property.propertyName)}],\n                <# } else {#>\n                // renderStore: Grainjs.metadata['gridcombo.#{context.$namespace}.#{context.$name}'].comboOptions[#{JSON.stringify(property.propertyName)}]?.store(),\n                <# }#>\n                <#- }#>\n              },\n            <#\n          }\n        }\n    }#>\n    }\n  }\n})\n"}]}}