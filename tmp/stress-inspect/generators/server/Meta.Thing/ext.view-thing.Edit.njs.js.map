{"version":3,"sources":["generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"],"names":["text","expression","code"],"mappings":"AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IACCA,+BAA6BC,oBAAqBD,QAAMC,eAAgBD,QACxEA,kBAAgBC,yBAA0BD,MAC1CA,kBAAgBC,kBAAmBD,MACnCA,+CACAA,mBAAiBC,qBAAsBD,UACvCA,uBACAA,sBACAA,iCAA+BC,oBAAqBD,GAACC,eAAgBD,KAAGE;AARzE,IAQyEA,AAAwBF,OAAIC,iBAAkBD,IAACE;AARxH,IAQwHA,AAAKF,MAC5HA,aAAWC,qBAAsBD,MACjCA,IAAEE;AAVH,IAUGA,AAAgCF,IAClCA,uBACAA,cAAYC,4BAA6BD,MACzCA,YAAUC,0BAA2BD,MACrCA,sBAAoBC,oCAAqCD,MACzDA,oBAAkBC,kCAAmCD,MACrDA,UACAA,IAAEE;AAjBH,IAiBGA,AAAOF,IACTA,eAAaC,oBAAqBA,eAAgBD,MAClDA,kCAAgCC,oBAAqBD,GAACC,eAAgBD,MACtEA,iBACAA,0BACAA,2BACAA,sBACAA,QACAA,IACAA,iCACAA,gFAA8EC,oBAAqBD,GAACC,eAAgBD,0BACpHA,wBACAA,oDAAiDC,eAAgBD,MAAGC,oBAAqBD,GAACC,eAAgBD,wBAC1GA,kBACAA,aACAA,yBACAA,uDACAA,0BACAA,cACAA,aACAA,0BACAA,uDACAA,0BACAA,cACAA,UAAQE;AAzCT,IAyCSA,AACRA;AA1CD,IA0CCA,AACAA;AA3CD,IA2CCA,AACAA;AA5CD,IA4CCA,AACAA;AA7CD,IA6CCA,AACAA;AA9CD,IA8CCA,AACAA;AA/CD,IA+CCA,AACAA;AAhDD,IAgDCA,AACAA;AAjDD,IAiDCA,AACAA;AAlDD,IAkDCA,AACAA;AAnDD,IAmDCA,AACAA;AApDD,IAoDCA,AAAoBF,IACpBA,iDAA+CC,oBAAqBD,GAACC,eAAgBD,MAAIC,uBAAwBD,IAAEC,eAAgBD,SACnIA,kBAAgBE;AAtDjB,IAsDiBA,AAChBA;AAvDD,IAuDCA,AACAA;AAxDD,IAwDCA,AACAA;AAzDD,IAyDCA,AACAA;AA1DD,IA0DCA,AAAgBF,IAChBA,sDAAoDC,oBAAqBD,GAACC,eAAgBD,cAAYC,aAAcD,SACpHA,gBAAcE;AA5Df,IA4DeA,AACdA;AA7DD,IA6DCA,AACAA;AA9DD,IA8DCA,AACAA;AA/DD,IA+DCA,AACAA;AAhED,IAgECA,AACAA;AAjED,IAiECA,AAAgBF,IAChBA,gDAA8CC,oBAAqBD,GAACC,eAAgBD,MAAIC,gBAAiBD,MAAIE;AAlE9G,IAkE8GA,AAC7GA;AAnED,IAmECA,AACAA;AApED,IAoECA,AAAgBF,OAChBA,gBAAcE;AArEf,IAqEeA,AACdA;AAtED,IAsECA,AACAA;AAvED,IAuECA,AACAA;AAxED,IAwECA,AACAA;AAzED,IAyECA,AACAA;AA1ED,IA0ECA,AACAA;AA3ED,IA2ECA,AACAA;AA5ED,IA4ECA,AACAA;AA7ED,IA6ECA,AACAA;AA9ED,IA8ECA,AAAsCF,KACtCA,aACAA,0CACAA,0BAAwBC,qBAAsBD,UAC9CA,wBAAsBC,mBAAoBD,MAC1CA,sBAAoBC,iBAAkBD,MACtCA,YAAUE;AApFX,IAoFWA,AAAKF,IACfA,YACAA,sBACAA,6DACAA,qFAAmFC,oBAAqBD,GAACC,eAAgBD,qDACzHA,cACAA,iEACAA,0FAAwFC,oBAAqBD,GAACC,eAAgBD,qDAC9HA,cACAA,oEACAA,oFAAkFC,oBAAqBD,GAACC,eAAgBD,yFACxHA,aACAA,WACAA,WACAA,mCACAA,OACAA;AApGD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","file":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","sourceRoot":"/Users/vedmalex/work/fte2/demo","sourcesContent":["<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"],"template":{"version":"1.0.0","segments":[{"generatedLine":1,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":2,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":3,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":4,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":5,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":6,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":7,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":8,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":9,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":10,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":11,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":12,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":13,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":14,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":15,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":16,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":17,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":18,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":19,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":20,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":21,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":22,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":23,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":24,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":25,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":26,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":27,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":28,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":29,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":30,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":31,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":32,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":33,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":34,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":35,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":36,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":37,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":38,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":39,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":40,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":41,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":42,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":43,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":44,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":45,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":46,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":47,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":48,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":49,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":50,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":51,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":52,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":53,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":54,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":55,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":56,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":57,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":58,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":59,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":60,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":61,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":62,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":63,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":64,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":65,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":66,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":67,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":68,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":69,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":70,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":71,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":72,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":73,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":74,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":75,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":76,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":77,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":78,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":79,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":80,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":81,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":82,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":83,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":84,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":85,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":86,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":87,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":88,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":89,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":90,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":91,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":92,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":93,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":94,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":95,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":96,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":97,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":98,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":99,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":100,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":101,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":102,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":103,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":104,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":105,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":106,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":107,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":108,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":109,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":110,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":111,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":112,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":113,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":114,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":115,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":116,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":117,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":118,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":119,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":120,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":121,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":122,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":123,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":124,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":125,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":126,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":127,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":128,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":129,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":130,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":131,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":132,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":133,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":134,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":135,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":136,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js"},{"generatedLine":8,"generatedColumn":4,"originalLine":2,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":8,"generatedColumn":35,"originalLine":2,"originalColumn":30,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"expression","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":8,"generatedColumn":55,"originalLine":2,"originalColumn":51,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":8,"generatedColumn":63,"originalLine":2,"originalColumn":57,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"expression","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":8,"generatedColumn":78,"originalLine":2,"originalColumn":73,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":8,"generatedColumn":86,"originalLine":3,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":8,"generatedColumn":104,"originalLine":3,"originalColumn":17,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"expression","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":8,"generatedColumn":129,"originalLine":3,"originalColumn":43,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":8,"generatedColumn":135,"originalLine":4,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":8,"generatedColumn":153,"originalLine":4,"originalColumn":17,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"expression","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":8,"generatedColumn":171,"originalLine":4,"originalColumn":36,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":8,"generatedColumn":177,"originalLine":5,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":8,"generatedColumn":224,"originalLine":6,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":8,"generatedColumn":243,"originalLine":6,"originalColumn":18,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"expression","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":8,"generatedColumn":264,"originalLine":6,"originalColumn":40,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":8,"generatedColumn":274,"originalLine":7,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":8,"generatedColumn":297,"originalLine":8,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":8,"generatedColumn":319,"originalLine":9,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":8,"generatedColumn":352,"originalLine":9,"originalColumn":32,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"expression","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":8,"generatedColumn":372,"originalLine":9,"originalColumn":53,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":8,"generatedColumn":375,"originalLine":9,"originalColumn":54,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"expression","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":8,"generatedColumn":390,"originalLine":9,"originalColumn":70,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":8,"generatedColumn":395,"originalLine":9,"originalColumn":73,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"code","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":9,"generatedColumn":4,"originalLine":9,"originalColumn":73,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"code","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":9,"generatedColumn":4,"originalLine":9,"originalColumn":97,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":9,"generatedColumn":11,"originalLine":9,"originalColumn":101,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"expression","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":9,"generatedColumn":28,"originalLine":9,"originalColumn":119,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":9,"generatedColumn":32,"originalLine":9,"originalColumn":120,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"code","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":10,"generatedColumn":4,"originalLine":9,"originalColumn":120,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"code","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":10,"generatedColumn":4,"originalLine":9,"originalColumn":125,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":10,"generatedColumn":10,"originalLine":10,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":10,"generatedColumn":23,"originalLine":10,"originalColumn":12,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"expression","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":10,"generatedColumn":44,"originalLine":10,"originalColumn":34,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":10,"generatedColumn":50,"originalLine":11,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":10,"generatedColumn":54,"originalLine":11,"originalColumn":3,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"code","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":11,"generatedColumn":4,"originalLine":11,"originalColumn":3,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"code","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":11,"generatedColumn":4,"originalLine":11,"originalColumn":35,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":11,"generatedColumn":8,"originalLine":12,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":11,"generatedColumn":31,"originalLine":13,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":11,"generatedColumn":45,"originalLine":13,"originalColumn":13,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"expression","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":11,"generatedColumn":73,"originalLine":13,"originalColumn":42,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":11,"generatedColumn":79,"originalLine":14,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":11,"generatedColumn":91,"originalLine":14,"originalColumn":11,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"expression","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":11,"generatedColumn":117,"originalLine":14,"originalColumn":38,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":11,"generatedColumn":123,"originalLine":15,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":11,"generatedColumn":145,"originalLine":15,"originalColumn":21,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"expression","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":11,"generatedColumn":181,"originalLine":15,"originalColumn":58,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":11,"generatedColumn":187,"originalLine":16,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":11,"generatedColumn":207,"originalLine":16,"originalColumn":19,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"expression","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":11,"generatedColumn":241,"originalLine":16,"originalColumn":54,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":11,"generatedColumn":247,"originalLine":17,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":11,"generatedColumn":257,"originalLine":18,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":11,"generatedColumn":261,"originalLine":18,"originalColumn":3,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"code","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":12,"generatedColumn":4,"originalLine":18,"originalColumn":3,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"code","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":12,"generatedColumn":4,"originalLine":18,"originalColumn":10,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":12,"generatedColumn":8,"originalLine":19,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":12,"generatedColumn":23,"originalLine":19,"originalColumn":14,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"expression","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":12,"generatedColumn":43,"originalLine":19,"originalColumn":35,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"expression","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":12,"generatedColumn":58,"originalLine":19,"originalColumn":51,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":12,"generatedColumn":64,"originalLine":20,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":12,"generatedColumn":98,"originalLine":20,"originalColumn":33,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"expression","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":12,"generatedColumn":118,"originalLine":20,"originalColumn":54,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":12,"generatedColumn":121,"originalLine":20,"originalColumn":55,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"expression","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":12,"generatedColumn":136,"originalLine":20,"originalColumn":71,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":12,"generatedColumn":142,"originalLine":21,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":12,"generatedColumn":159,"originalLine":22,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":12,"generatedColumn":185,"originalLine":23,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":12,"generatedColumn":212,"originalLine":24,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":12,"generatedColumn":234,"originalLine":25,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":12,"generatedColumn":242,"originalLine":26,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":12,"generatedColumn":246,"originalLine":27,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":12,"generatedColumn":279,"originalLine":28,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":12,"generatedColumn":359,"originalLine":28,"originalColumn":79,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"expression","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":12,"generatedColumn":379,"originalLine":28,"originalColumn":100,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":12,"generatedColumn":382,"originalLine":28,"originalColumn":101,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"expression","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":12,"generatedColumn":397,"originalLine":28,"originalColumn":117,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":12,"generatedColumn":423,"originalLine":29,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":12,"generatedColumn":447,"originalLine":30,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":12,"generatedColumn":499,"originalLine":30,"originalColumn":50,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"expression","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":12,"generatedColumn":514,"originalLine":30,"originalColumn":66,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":12,"generatedColumn":520,"originalLine":30,"originalColumn":69,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"expression","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":12,"generatedColumn":540,"originalLine":30,"originalColumn":90,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":12,"generatedColumn":543,"originalLine":30,"originalColumn":91,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"expression","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":12,"generatedColumn":558,"originalLine":30,"originalColumn":107,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":12,"generatedColumn":582,"originalLine":31,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":12,"generatedColumn":600,"originalLine":32,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":12,"generatedColumn":613,"originalLine":33,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":12,"generatedColumn":638,"originalLine":34,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":12,"generatedColumn":693,"originalLine":35,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":12,"generatedColumn":719,"originalLine":36,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":12,"generatedColumn":733,"originalLine":37,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":12,"generatedColumn":746,"originalLine":38,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":12,"generatedColumn":772,"originalLine":39,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":12,"generatedColumn":827,"originalLine":40,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":12,"generatedColumn":853,"originalLine":41,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":12,"generatedColumn":867,"originalLine":42,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":12,"generatedColumn":877,"originalLine":42,"originalColumn":9,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"code","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":4,"originalLine":42,"originalColumn":9,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"code","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":13,"generatedColumn":4,"originalLine":43,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"code","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":14,"generatedColumn":4,"originalLine":43,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"code","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":14,"generatedColumn":4,"originalLine":44,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"code","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":15,"generatedColumn":4,"originalLine":44,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"code","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":15,"generatedColumn":4,"originalLine":45,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"code","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":4,"originalLine":45,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"code","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":16,"generatedColumn":4,"originalLine":46,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"code","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":17,"generatedColumn":4,"originalLine":46,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"code","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":17,"generatedColumn":4,"originalLine":47,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"code","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":18,"generatedColumn":4,"originalLine":47,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"code","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":18,"generatedColumn":4,"originalLine":48,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"code","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":19,"generatedColumn":4,"originalLine":48,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"code","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":19,"generatedColumn":4,"originalLine":49,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"code","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":20,"generatedColumn":4,"originalLine":49,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"code","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":20,"generatedColumn":4,"originalLine":50,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"code","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":21,"generatedColumn":4,"originalLine":50,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"code","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":21,"generatedColumn":4,"originalLine":51,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"code","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":22,"generatedColumn":4,"originalLine":51,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"code","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":22,"generatedColumn":4,"originalLine":52,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"code","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":23,"generatedColumn":4,"originalLine":52,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"code","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":23,"generatedColumn":4,"originalLine":53,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"code","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":24,"generatedColumn":4,"originalLine":53,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"code","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":24,"generatedColumn":4,"originalLine":53,"originalColumn":21,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":24,"generatedColumn":8,"originalLine":54,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":24,"generatedColumn":57,"originalLine":54,"originalColumn":48,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"expression","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":24,"generatedColumn":77,"originalLine":54,"originalColumn":69,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":24,"generatedColumn":80,"originalLine":54,"originalColumn":70,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"expression","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":24,"generatedColumn":95,"originalLine":54,"originalColumn":86,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":24,"generatedColumn":101,"originalLine":54,"originalColumn":90,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"expression","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":24,"generatedColumn":124,"originalLine":54,"originalColumn":114,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":24,"generatedColumn":128,"originalLine":54,"originalColumn":116,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"expression","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":24,"generatedColumn":143,"originalLine":54,"originalColumn":132,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":24,"generatedColumn":152,"originalLine":55,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":24,"generatedColumn":170,"originalLine":55,"originalColumn":17,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"code","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":25,"generatedColumn":4,"originalLine":55,"originalColumn":17,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"code","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":25,"generatedColumn":4,"originalLine":56,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"code","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":26,"generatedColumn":4,"originalLine":56,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"code","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":26,"generatedColumn":4,"originalLine":57,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"code","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":27,"generatedColumn":4,"originalLine":57,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"code","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":27,"generatedColumn":4,"originalLine":58,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"code","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":28,"generatedColumn":4,"originalLine":58,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"code","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":28,"generatedColumn":4,"originalLine":59,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"code","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":29,"generatedColumn":4,"originalLine":59,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"code","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":29,"generatedColumn":4,"originalLine":59,"originalColumn":17,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":29,"generatedColumn":8,"originalLine":60,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":29,"generatedColumn":62,"originalLine":60,"originalColumn":53,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"expression","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":29,"generatedColumn":82,"originalLine":60,"originalColumn":74,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":29,"generatedColumn":85,"originalLine":60,"originalColumn":75,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"expression","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":29,"generatedColumn":100,"originalLine":60,"originalColumn":91,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":29,"generatedColumn":114,"originalLine":60,"originalColumn":103,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"expression","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":29,"generatedColumn":127,"originalLine":60,"originalColumn":117,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":29,"generatedColumn":136,"originalLine":61,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":29,"generatedColumn":152,"originalLine":61,"originalColumn":15,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"code","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":30,"generatedColumn":4,"originalLine":61,"originalColumn":15,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"code","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":30,"generatedColumn":4,"originalLine":62,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"code","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":31,"generatedColumn":4,"originalLine":62,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"code","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":31,"generatedColumn":4,"originalLine":63,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"code","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":32,"generatedColumn":4,"originalLine":63,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"code","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":32,"generatedColumn":4,"originalLine":64,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"code","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":33,"generatedColumn":4,"originalLine":64,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"code","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":33,"generatedColumn":4,"originalLine":65,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"code","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":34,"generatedColumn":4,"originalLine":65,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"code","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":34,"generatedColumn":4,"originalLine":66,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"code","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":35,"generatedColumn":4,"originalLine":66,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"code","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":35,"generatedColumn":4,"originalLine":66,"originalColumn":17,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":35,"generatedColumn":8,"originalLine":67,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":35,"generatedColumn":56,"originalLine":67,"originalColumn":47,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"expression","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":35,"generatedColumn":76,"originalLine":67,"originalColumn":68,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":35,"generatedColumn":79,"originalLine":67,"originalColumn":69,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"expression","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":35,"generatedColumn":94,"originalLine":67,"originalColumn":85,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":35,"generatedColumn":100,"originalLine":67,"originalColumn":89,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"expression","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":35,"generatedColumn":116,"originalLine":67,"originalColumn":106,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":35,"generatedColumn":122,"originalLine":67,"originalColumn":110,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"code","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":36,"generatedColumn":4,"originalLine":67,"originalColumn":110,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"code","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":36,"generatedColumn":4,"originalLine":68,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"code","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":37,"generatedColumn":4,"originalLine":68,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"code","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":37,"generatedColumn":4,"originalLine":69,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"code","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":38,"generatedColumn":4,"originalLine":69,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"code","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":38,"generatedColumn":4,"originalLine":69,"originalColumn":17,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":38,"generatedColumn":11,"originalLine":70,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":38,"generatedColumn":27,"originalLine":70,"originalColumn":15,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"code","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":39,"generatedColumn":4,"originalLine":70,"originalColumn":15,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"code","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":39,"generatedColumn":4,"originalLine":71,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"code","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":40,"generatedColumn":4,"originalLine":71,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"code","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":40,"generatedColumn":4,"originalLine":72,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"code","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":41,"generatedColumn":4,"originalLine":72,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"code","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":41,"generatedColumn":4,"originalLine":73,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"code","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":42,"generatedColumn":4,"originalLine":73,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"code","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":42,"generatedColumn":4,"originalLine":74,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"code","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":43,"generatedColumn":4,"originalLine":74,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"code","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":43,"generatedColumn":4,"originalLine":75,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"code","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":44,"generatedColumn":4,"originalLine":75,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"code","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":44,"generatedColumn":4,"originalLine":76,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"code","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":45,"generatedColumn":4,"originalLine":76,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"code","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":45,"generatedColumn":4,"originalLine":77,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"code","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":46,"generatedColumn":4,"originalLine":77,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"code","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":46,"generatedColumn":4,"originalLine":78,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"code","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":47,"generatedColumn":4,"originalLine":78,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"code","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":47,"generatedColumn":4,"originalLine":79,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"code","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":48,"generatedColumn":4,"originalLine":79,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"code","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":48,"generatedColumn":4,"originalLine":79,"originalColumn":39,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":48,"generatedColumn":9,"originalLine":80,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":48,"generatedColumn":22,"originalLine":81,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":48,"generatedColumn":64,"originalLine":82,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":48,"generatedColumn":90,"originalLine":82,"originalColumn":25,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"expression","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":48,"generatedColumn":111,"originalLine":82,"originalColumn":47,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":48,"generatedColumn":121,"originalLine":83,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":48,"generatedColumn":145,"originalLine":83,"originalColumn":23,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"expression","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":48,"generatedColumn":164,"originalLine":83,"originalColumn":43,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":48,"generatedColumn":170,"originalLine":84,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":48,"generatedColumn":192,"originalLine":84,"originalColumn":21,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"expression","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":48,"generatedColumn":209,"originalLine":84,"originalColumn":39,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":48,"generatedColumn":215,"originalLine":85,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":48,"generatedColumn":227,"originalLine":85,"originalColumn":11,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"code","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":49,"generatedColumn":4,"originalLine":85,"originalColumn":11,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"code","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":49,"generatedColumn":4,"originalLine":85,"originalColumn":16,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":49,"generatedColumn":8,"originalLine":86,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":49,"generatedColumn":20,"originalLine":87,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":49,"generatedColumn":42,"originalLine":88,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":49,"generatedColumn":103,"originalLine":89,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":49,"generatedColumn":188,"originalLine":89,"originalColumn":84,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"expression","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":49,"generatedColumn":208,"originalLine":89,"originalColumn":105,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":49,"generatedColumn":211,"originalLine":89,"originalColumn":106,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"expression","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":49,"generatedColumn":226,"originalLine":89,"originalColumn":122,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":49,"generatedColumn":279,"originalLine":90,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":49,"generatedColumn":293,"originalLine":91,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":49,"generatedColumn":358,"originalLine":92,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":49,"generatedColumn":448,"originalLine":92,"originalColumn":89,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"expression","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":49,"generatedColumn":468,"originalLine":92,"originalColumn":110,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":49,"generatedColumn":471,"originalLine":92,"originalColumn":111,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"expression","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":49,"generatedColumn":486,"originalLine":92,"originalColumn":127,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":49,"generatedColumn":539,"originalLine":93,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":49,"generatedColumn":553,"originalLine":94,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":49,"generatedColumn":621,"originalLine":95,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":49,"generatedColumn":705,"originalLine":95,"originalColumn":83,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"expression","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":49,"generatedColumn":725,"originalLine":95,"originalColumn":104,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":49,"generatedColumn":728,"originalLine":95,"originalColumn":105,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"expression","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":49,"generatedColumn":743,"originalLine":95,"originalColumn":121,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":49,"generatedColumn":832,"originalLine":96,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":49,"generatedColumn":845,"originalLine":97,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":49,"generatedColumn":856,"originalLine":98,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":49,"generatedColumn":867,"originalLine":99,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":49,"generatedColumn":902,"originalLine":100,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"},{"generatedLine":49,"generatedColumn":909,"originalLine":101,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.view-thing.Edit.njs.js","name":"text","content":"<#@ noContent #>\nExt.define('Modeleditor.view.#{context.$namespace}.Edit.#{context.$name}', {\n  serverModel: '#{context.$normalizedName}',\n  // requires: [#{context.requires}],\n  extend: 'Modeleditor.view.base.baseForm',\n  alias: 'widget.#{context.$widgetName}edit',\n  layout: 'column',\n  bodyPadding: 10,\n  iconCls:  _r('iconCls', '', '#{context.$namespace}.#{context.$name}') <#if(context.iconCls){#>|| \"#{context.iconCls}\"<#}#> ,\n  widget: '#{context.$widgetName}',\n  <#- if(context.periodicalRel){#>\n    periodicalRel:{\n      from:'#{context.periodicalRel.from}',\n      to:'#{context.periodicalRel.to}',\n      fromKeyField:'#{context.periodicalRel.fromKeyField}',\n      toKeyField:'#{context.periodicalRel.toKeyField}',\n    },\n  <#- }#>\n  embedKey: '#{context.$namespace}#{context.$name}',\n  modelName: 'Modeleditor.model.#{context.$namespace}.#{context.$name}',\n  defaults: {\n    margin: '0 5 5 5',\n    xtype: 'textfield',\n    columnWidth: 1\n  },\n\n  initComponent: function() {\n    DirectCacheLogger.userStories('Edit Form Init Component', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id });\n    Ext.apply(this,{\n      title: this.title || this.toDisplay || _t(\"#{context.$name}\",'#{context.$namespace}.#{context.$name}', 'titles','List'),\n      items: [\n        {\n          name: 'id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        {\n          name: '_id',\n          fieldLabel: _t('id', 'SYSTEM', 'labels'),\n          hidden: true\n        },\n        <#\n        //generate properties which not in fieldsets\n        function builItems(items) {\n\n          for( let i = 0; i< items.length; i +=1){\n            const item = items[i]\n            switch(item.type){\n              case 'property':\n              const f = item.item\n              const property = f.property\n              if(f.generated){\n                  #>\n                  Grainjs.metadata['editfields.#{context.$namespace}.#{context.$name}'][`#{property.propertyName}::#{f.displayName}`](),\n                <#- }\n              break\n              case 'method':\n              const method = item.item.clientmethod\n              #>\n                Grainjs.metadata['metaclientmethods.#{context.$namespace}.#{context.$name}'].buttons['#{method.name}'](),\n              <#\n              break\n              case 'fieldset':\n              const fs = item.item\n              if(fs.formItems?.length > 0){\n              #>\n              Grainjs.metadata['metafieldsets.#{context.$namespace}.#{context.$name}']['#{fs.displayName}']([<#\n                builItems(fs.formItems)\n              #>]),\n              <#\n              }\n              break\n            }\n          }\n        }\n\n        builItems(context.formItems)\n\n        if (context.periodicalRel) {#>,\n        {\n          xtype: 'periodicaleventbar',\n          panelWidget: '#{context.$widgetName}edit',\n          startProp: '#{context.startProp}',\n          endProp: '#{context.endProp}',\n        },<#}#>\n      ],\n      listeners: {\n        recordloaded: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Record Loaded', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        beforerecordload: function(form, record, operation) {\n          DirectCacheLogger.userStories('Edit Form Before Record Load', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, recordId: record?.getId() });\n        },\n        fieldchange: function(form, field, newValue, oldValue) {\n          DirectCacheLogger.userStories('Edit Form Field Change', { serverModel: '#{context.$namespace}.#{context.$name}', formId: this.id, fieldName: field.name, newValue: newValue, oldValue: oldValue });\n        }\n      }\n    });\n    this.callParent(arguments);\n  }\n});\n"}]}}