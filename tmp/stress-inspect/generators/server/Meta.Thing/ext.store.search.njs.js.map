{"version":3,"sources":["generators/server/Meta.Thing/ext.store.search.njs.js"],"names":["code","text","expression"],"mappings":"AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IACCA;AADD,IACCA,AACAA;AAFD,IAECA,AACAA;AAHD,IAGCA,AACAA;AAJD,IAICA,AACAA;AALD,IAKCA,AACAA;AAND,IAMCA,AACAA;AAPD,IAOCA,AACAA;AARD,IAQCA,AACAA;AATD,IASCA,AACAA;AAVD,IAUCA,AACAA;AAXD,IAWCA,AAAEC,IACFA,IACAA,gCAA8BC,YAAaD,UAAQC,MAAOD,QAC1DA,eAAYC,oBAAqBD,UAAQC,eAAgBD,OACzDA,kBAAgBC,yBAA0BD,MAC1CA,iCAA+BC,YAAaD,GAACC,MAAOD,OACpDA,qCACAA,8BAA4BC,YAAaD,GAACC,MAAOD,MACjDA,qBACAA,qBACAA,wBACAA,sBACAA,cAAYC,uBAAwBD,KACpCA,IAAED;AAxBH,IAwBGA,AACFA;AAzBD,IAyBCA,AAAgEC,IAChEA,cAAYD;AA1Bb,IA0BaA,AACZA;AA3BD,IA2BCA,AACAA;AA5BD,IA4BCA,AACAA;AA7BD,IA6BCA,AACAA;AA9BD,IA8BCA,AAAgBC,IAAED;AA9BnB,IA8BmBA,AAClBA;AA/BD,IA+BCA,AAAIC,KACJA,gBAAcC,iBAAkBD,MAChCA,iBAAeC,kBAAmBD,KAClCA,MAAID;AAlCL,IAkCKA,AAAKC,IACTA,QACAA,IAAED;AApCH,IAoCGA,AAAOC,IACTA,cACAA,uBACAA,wCACAA,MAAID;AAxCL,IAwCKA,AAAwDC,IAC5DA,iBACAA,2BACAA,8BACAA,UACAA,iBACAA,2BACAA,wBACAA,UACAA,MAAID;AAjDL,IAiDKA,AAAKC,IACTA,qBACAA,mBAAiBC,4EAA6ED,IAC9FA,SACAA,OACAA;AAtDD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","file":"generators/server/Meta.Thing/ext.store.search.njs.js","sourceRoot":"/Users/vedmalex/work/fte2/demo","sourcesContent":["<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"],"template":{"version":"1.0.0","segments":[{"generatedLine":1,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.search.njs.js"},{"generatedLine":2,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.search.njs.js"},{"generatedLine":3,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.search.njs.js"},{"generatedLine":4,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.search.njs.js"},{"generatedLine":5,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.search.njs.js"},{"generatedLine":6,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.search.njs.js"},{"generatedLine":7,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.search.njs.js"},{"generatedLine":8,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.search.njs.js"},{"generatedLine":9,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.search.njs.js"},{"generatedLine":10,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.search.njs.js"},{"generatedLine":11,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.search.njs.js"},{"generatedLine":12,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.search.njs.js"},{"generatedLine":13,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.search.njs.js"},{"generatedLine":14,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.search.njs.js"},{"generatedLine":15,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.search.njs.js"},{"generatedLine":16,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.search.njs.js"},{"generatedLine":17,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.search.njs.js"},{"generatedLine":18,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.search.njs.js"},{"generatedLine":19,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.search.njs.js"},{"generatedLine":20,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.search.njs.js"},{"generatedLine":21,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.search.njs.js"},{"generatedLine":22,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.search.njs.js"},{"generatedLine":23,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.search.njs.js"},{"generatedLine":24,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.search.njs.js"},{"generatedLine":25,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.search.njs.js"},{"generatedLine":26,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.search.njs.js"},{"generatedLine":27,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.search.njs.js"},{"generatedLine":28,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.search.njs.js"},{"generatedLine":29,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.search.njs.js"},{"generatedLine":30,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.search.njs.js"},{"generatedLine":31,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.search.njs.js"},{"generatedLine":32,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.search.njs.js"},{"generatedLine":33,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.search.njs.js"},{"generatedLine":34,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.search.njs.js"},{"generatedLine":35,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.search.njs.js"},{"generatedLine":36,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.search.njs.js"},{"generatedLine":37,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.search.njs.js"},{"generatedLine":38,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.search.njs.js"},{"generatedLine":39,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.search.njs.js"},{"generatedLine":40,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.search.njs.js"},{"generatedLine":41,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.search.njs.js"},{"generatedLine":42,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.search.njs.js"},{"generatedLine":43,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.search.njs.js"},{"generatedLine":44,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.search.njs.js"},{"generatedLine":45,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.search.njs.js"},{"generatedLine":46,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.search.njs.js"},{"generatedLine":47,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.search.njs.js"},{"generatedLine":48,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.search.njs.js"},{"generatedLine":49,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.search.njs.js"},{"generatedLine":50,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.search.njs.js"},{"generatedLine":51,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.search.njs.js"},{"generatedLine":52,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.search.njs.js"},{"generatedLine":53,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.search.njs.js"},{"generatedLine":54,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.search.njs.js"},{"generatedLine":55,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.search.njs.js"},{"generatedLine":56,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.search.njs.js"},{"generatedLine":57,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.search.njs.js"},{"generatedLine":58,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.search.njs.js"},{"generatedLine":59,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.search.njs.js"},{"generatedLine":60,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.search.njs.js"},{"generatedLine":61,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.search.njs.js"},{"generatedLine":62,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.search.njs.js"},{"generatedLine":63,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.search.njs.js"},{"generatedLine":64,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.search.njs.js"},{"generatedLine":65,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.search.njs.js"},{"generatedLine":66,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.search.njs.js"},{"generatedLine":67,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.search.njs.js"},{"generatedLine":68,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.search.njs.js"},{"generatedLine":69,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.search.njs.js"},{"generatedLine":70,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.search.njs.js"},{"generatedLine":71,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.search.njs.js"},{"generatedLine":72,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.search.njs.js"},{"generatedLine":73,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.search.njs.js"},{"generatedLine":74,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.search.njs.js"},{"generatedLine":75,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.search.njs.js"},{"generatedLine":76,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.search.njs.js"},{"generatedLine":77,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.search.njs.js"},{"generatedLine":78,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.search.njs.js"},{"generatedLine":79,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.search.njs.js"},{"generatedLine":80,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.search.njs.js"},{"generatedLine":81,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.search.njs.js"},{"generatedLine":82,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.search.njs.js"},{"generatedLine":83,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.search.njs.js"},{"generatedLine":84,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.search.njs.js"},{"generatedLine":85,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.store.search.njs.js"},{"generatedLine":8,"generatedColumn":4,"originalLine":2,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"code","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":9,"generatedColumn":4,"originalLine":2,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"code","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":9,"generatedColumn":4,"originalLine":3,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"code","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":10,"generatedColumn":4,"originalLine":3,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"code","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":10,"generatedColumn":4,"originalLine":4,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"code","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":11,"generatedColumn":4,"originalLine":4,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"code","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":11,"generatedColumn":4,"originalLine":5,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"code","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":12,"generatedColumn":4,"originalLine":5,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"code","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":12,"generatedColumn":4,"originalLine":6,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"code","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":13,"generatedColumn":4,"originalLine":6,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"code","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":13,"generatedColumn":4,"originalLine":7,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"code","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":14,"generatedColumn":4,"originalLine":7,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"code","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":14,"generatedColumn":4,"originalLine":8,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"code","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":15,"generatedColumn":4,"originalLine":8,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"code","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":15,"generatedColumn":4,"originalLine":9,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"code","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":16,"generatedColumn":4,"originalLine":9,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"code","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":16,"generatedColumn":4,"originalLine":10,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"code","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":17,"generatedColumn":4,"originalLine":10,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"code","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":17,"generatedColumn":4,"originalLine":11,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"code","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":18,"generatedColumn":4,"originalLine":11,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"code","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":18,"generatedColumn":4,"originalLine":12,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"code","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":19,"generatedColumn":4,"originalLine":12,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"code","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":19,"generatedColumn":4,"originalLine":12,"originalColumn":3,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"text","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":19,"generatedColumn":8,"originalLine":13,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"text","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":19,"generatedColumn":12,"originalLine":14,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"text","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":19,"generatedColumn":44,"originalLine":14,"originalColumn":31,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"expression","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":19,"generatedColumn":56,"originalLine":14,"originalColumn":44,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"text","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":19,"generatedColumn":66,"originalLine":14,"originalColumn":52,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"expression","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":19,"generatedColumn":72,"originalLine":14,"originalColumn":59,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"text","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":19,"generatedColumn":80,"originalLine":15,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"text","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":19,"generatedColumn":95,"originalLine":15,"originalColumn":13,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"expression","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":19,"generatedColumn":115,"originalLine":15,"originalColumn":34,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"text","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":19,"generatedColumn":125,"originalLine":15,"originalColumn":42,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"expression","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":19,"generatedColumn":140,"originalLine":15,"originalColumn":58,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"text","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":19,"generatedColumn":147,"originalLine":16,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"text","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":19,"generatedColumn":165,"originalLine":16,"originalColumn":17,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"expression","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":19,"generatedColumn":190,"originalLine":16,"originalColumn":43,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"text","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":19,"generatedColumn":196,"originalLine":17,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"text","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":19,"generatedColumn":229,"originalLine":17,"originalColumn":32,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"expression","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":19,"generatedColumn":241,"originalLine":17,"originalColumn":45,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"text","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":19,"generatedColumn":244,"originalLine":17,"originalColumn":46,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"expression","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":19,"generatedColumn":250,"originalLine":17,"originalColumn":53,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"text","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":19,"generatedColumn":257,"originalLine":18,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"text","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":19,"generatedColumn":294,"originalLine":19,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"text","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":19,"generatedColumn":324,"originalLine":19,"originalColumn":29,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"expression","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":19,"generatedColumn":336,"originalLine":19,"originalColumn":42,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"text","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":19,"generatedColumn":339,"originalLine":19,"originalColumn":43,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"expression","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":19,"generatedColumn":345,"originalLine":19,"originalColumn":50,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"text","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":19,"generatedColumn":351,"originalLine":20,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"text","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":19,"generatedColumn":372,"originalLine":21,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"text","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":19,"generatedColumn":393,"originalLine":22,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"text","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":19,"generatedColumn":417,"originalLine":23,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"text","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":19,"generatedColumn":439,"originalLine":24,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"text","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":19,"generatedColumn":453,"originalLine":24,"originalColumn":13,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"expression","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":19,"generatedColumn":476,"originalLine":24,"originalColumn":37,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"text","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":19,"generatedColumn":481,"originalLine":25,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"text","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":19,"generatedColumn":485,"originalLine":25,"originalColumn":3,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"code","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":20,"generatedColumn":4,"originalLine":25,"originalColumn":3,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"code","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":20,"generatedColumn":4,"originalLine":26,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"code","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":21,"generatedColumn":4,"originalLine":26,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"code","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":21,"generatedColumn":4,"originalLine":26,"originalColumn":65,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"text","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":21,"generatedColumn":8,"originalLine":27,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"text","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":21,"generatedColumn":22,"originalLine":27,"originalColumn":13,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"code","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":22,"generatedColumn":4,"originalLine":27,"originalColumn":13,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"code","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":22,"generatedColumn":4,"originalLine":28,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"code","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":23,"generatedColumn":4,"originalLine":28,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"code","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":23,"generatedColumn":4,"originalLine":29,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"code","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":24,"generatedColumn":4,"originalLine":29,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"code","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":24,"generatedColumn":4,"originalLine":30,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"code","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":25,"generatedColumn":4,"originalLine":30,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"code","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":25,"generatedColumn":4,"originalLine":31,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"code","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":26,"generatedColumn":4,"originalLine":31,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"code","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":26,"generatedColumn":4,"originalLine":31,"originalColumn":17,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"text","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":26,"generatedColumn":8,"originalLine":31,"originalColumn":19,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"code","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":27,"generatedColumn":4,"originalLine":31,"originalColumn":19,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"code","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":27,"generatedColumn":4,"originalLine":32,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"code","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":28,"generatedColumn":4,"originalLine":32,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"code","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":28,"generatedColumn":4,"originalLine":32,"originalColumn":5,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"text","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":28,"generatedColumn":9,"originalLine":33,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"text","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":28,"generatedColumn":25,"originalLine":33,"originalColumn":15,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"expression","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":28,"generatedColumn":42,"originalLine":33,"originalColumn":33,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"text","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":28,"generatedColumn":48,"originalLine":34,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"text","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":28,"generatedColumn":65,"originalLine":34,"originalColumn":16,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"expression","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":28,"generatedColumn":83,"originalLine":34,"originalColumn":35,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"text","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":28,"generatedColumn":88,"originalLine":35,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"text","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":28,"generatedColumn":94,"originalLine":35,"originalColumn":5,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"code","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":29,"generatedColumn":4,"originalLine":35,"originalColumn":5,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"code","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":29,"generatedColumn":4,"originalLine":35,"originalColumn":10,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"text","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":29,"generatedColumn":8,"originalLine":36,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"text","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":29,"generatedColumn":16,"originalLine":37,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"text","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":29,"generatedColumn":20,"originalLine":37,"originalColumn":3,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"code","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":30,"generatedColumn":4,"originalLine":37,"originalColumn":3,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"code","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":30,"generatedColumn":4,"originalLine":37,"originalColumn":10,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"text","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":30,"generatedColumn":8,"originalLine":38,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"text","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":30,"generatedColumn":22,"originalLine":39,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"text","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":30,"generatedColumn":45,"originalLine":40,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"text","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":30,"generatedColumn":85,"originalLine":41,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"text","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":30,"generatedColumn":91,"originalLine":41,"originalColumn":5,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"code","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":31,"generatedColumn":4,"originalLine":41,"originalColumn":5,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"code","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":31,"generatedColumn":4,"originalLine":41,"originalColumn":61,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"text","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":31,"generatedColumn":8,"originalLine":42,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"text","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":31,"generatedColumn":25,"originalLine":43,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"text","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":31,"generatedColumn":52,"originalLine":44,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"text","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":31,"generatedColumn":82,"originalLine":45,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"text","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":31,"generatedColumn":92,"originalLine":46,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"text","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":31,"generatedColumn":109,"originalLine":47,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"text","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":31,"generatedColumn":136,"originalLine":48,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"text","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":31,"generatedColumn":160,"originalLine":49,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"text","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":31,"generatedColumn":170,"originalLine":50,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"text","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":31,"generatedColumn":176,"originalLine":50,"originalColumn":5,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"code","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":32,"generatedColumn":4,"originalLine":50,"originalColumn":5,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"code","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":32,"generatedColumn":4,"originalLine":50,"originalColumn":10,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"text","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":32,"generatedColumn":8,"originalLine":51,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"text","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":32,"generatedColumn":29,"originalLine":52,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"text","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":32,"generatedColumn":48,"originalLine":52,"originalColumn":18,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"expression","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":32,"generatedColumn":124,"originalLine":52,"originalColumn":95,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"text","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":32,"generatedColumn":128,"originalLine":53,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"text","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":32,"generatedColumn":137,"originalLine":54,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"text","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"},{"generatedLine":32,"generatedColumn":144,"originalLine":55,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.store.search.njs.js","name":"text","content":"<#@ noContent #>\n<#\nlet $namespace=\"\";\nlet nsa = [];\nfor(let i = 0; i < context.normalizedName.length-1;i++){\n  nsa.push(context.normalizedName[i]);\n}\nconst config = context.getThingConfig(context)\n\n$namespace = nsa.join(\".\");\nlet name = context.normalizedName[context.normalizedName.length-1];\n#>\n\nExt.define('Modeleditor.store.#{$namespace}.Search.#{name}', {\n  storeId: \"#{context.$namespace}.Search.#{context.$name}\",\n  serverModel: '#{context.$normalizedName}',\n  requires:['Modeleditor.model.#{$namespace}.#{name}'],\n  extend: 'Ext.data.LoggedStore',\n  model: 'Modeleditor.model.#{$namespace}.#{name}',\n  autoLoad:false,\n  autoSync:false,\n  remoteFilter:true,\n  remoteSort:true,\n  pageSize: #{config.pageSizeSearch},\n  <#-\n  if(context.sortProperty && context.sortProperty.length > 0){#>\n  sorters: [<#\n  let sortPr;\n  for (let i = 0, len = context.sortProperty.length; i < len; i++) {\n    sortPr = context.sortProperty[i];\n    if(i > 0){#>, <#}\n  #>{\n    property:'#{sortPr.property}',\n    direction:'#{sortPr.direction}'\n  },<#}#>\n  ],\n  <#- }#>\n  proxy: {\n    type: 'direct',\n    directFn: Modeleditor.runSearch,\n    <#if(!(context.queryResult || context.legacySearch)){ #>\n    writer: {\n      type: \"jsonmn\",\n      writeAllFields: true\n    },\n    reader: {\n      type: \"jsonmn\",\n      root: \"data\"\n    },\n    <#}#>\n    extraParams:{\n      queryName: #{context.searchQuery ? JSON.stringify(context.searchQuery.name) : undefined}\n    }\n  }\n});"}]}}