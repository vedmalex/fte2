{"version":3,"sources":["generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"],"names":["code","text","expression"],"mappings":"AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IACCA;AADD,IACCA,AACAA;AAFD,IAECA,AACAA;AAHD,IAGCA,AACAA;AAJD,IAICA,AACAA;AALD,IAKCA,AAAEC,IACFA,IACAA,oCAAkCC,oBAAqBD,GAACC,eAAgBD,QACxEA,mCACAA,eACAA,iBAAeC,oBAAqBD,GAACC,eAAgBD,QACrDA,yBACAA,UAAQD;AAZT,IAYSA,AACRA;AAbD,IAaCA,AACAA;AAdD,IAcCA,AACAA;AAfD,IAeCA,AACAA;AAhBD,IAgBCA,AACAA;AAjBD,IAiBCA,AAAmCC,IACnCA,YAAUC,uCAAwCD,SAClDA,YAAUD;AAnBX,IAmBWA,AACVA;AApBD,IAoBCA,AACAA;AArBD,IAqBCA,AACAA;AAtBD,IAsBCA,AAAUC,IACVA,YAAUC,uCAAwCD,OAClDA,YAAUD;AAxBX,IAwBWA,AACVA;AAzBD,IAyBCA,AAAoDC,IACpDA,cAAYD;AA1Bb,IA0BaA,AAAkGC,IAC9GA,kBAAgBD;AA3BjB,IA2BiBA,AAAoBC,IACpCA,uBAAqBC,2BAA4BD,KACjDA,kBAAgBD;AA7BjB,IA6BiBA,AAAOC,IACvBA,0BACAA,kBAAgBD;AA/BjB,IA+BiBA,AAAwCC,IACxDA,sDAAoDC,aAAcD,QAClEA,qCACAA,0CACAA,wCACAA,kCACAA,uBACAA,kBAAgBD;AAtCjB,IAsCiBA,AAA+CC,IAC/DA,0DACAA,sBAAoBC,6BAA8BD,IAClDA,yBACAA,kBAAgBD;AA1CjB,IA0CiBA,AAAOC,IACvBA,iCAA+BC,oBAAqBD,MACpDA,+BAA6BC,kBAAmBD,MAChDA,uCACAA,2CAAwCC,kBAAmBD,OAC3DA,+BACAA,6DACAA,qDACAA,kDACAA,gDACAA,wBACAA,2DACAA,qDACAA,2FACAA,8CACAA,iDACAA,oCACAA,mCACAA,uEACAA,6CACAA,yDACAA,iCACAA,gCACAA,2CACAA,0CACAA,6BACAA,6BACAA,8BACAA,8CACAA,mDACAA,6EACAA,0CACAA,oDACAA,wDACAA,+BACAA,+BACAA,4BACAA,yBACAA,wBACAA,sBACAA,gBAAcD;AAlFf,IAkFeA,AAA4EC,IAC1FA,+DACAA,+BACAA,oBAAkBD;AArFnB,IAqFmBA,AAAyBC,IAC3CA,sBAAoBC,gBAAiBD,KACrCA,oBAAkBD;AAvFnB,IAuFmBA,AAAcC,IAChCA,8BACAA,oBAAkBD;AAzFnB,IAyFmBA,AAAOC,IACzBA,oBAAkBD;AA1FnB,IA0FmBA,AAAuBC,IACzCA,6BAA0BC,aAAcD,OACxCA,oBAAkBD;AA5FnB,IA4FmBA,AAAcC,IAChCA,6BACAA,sBAAoBD;AA9FrB,IA8FqBA,AAAuBC,IAC3CA,wBAAsBC,8BAA+BD,KACrDA,sBAAoBD;AAhGrB,IAgGqBA,AAAcC,IAClCA,0CACAA,sBAAoBD;AAlGrB,IAkGqBA,AAAOC,IAC3BA,oBAAkBD;AAnGnB,IAmGmBA,AAAOC,IACzBA,oBAAkBD;AApGnB,IAoGmBA,AAAwBC,IAC1CA,6BAA2BC,+BAAgCD,KAC3DA,oBAAkBD;AAtGnB,IAsGmBA,AAAOC,IACzBA,kBAAgBD;AAvGjB,IAuGiBA,AAAwBC,IACxCA,8BAA4BD;AAxG7B,IAwG6BA,AAAuBE,gBAAiBF;AAxGrE,IAwGqEA,AAAUC,OAAKD;AAxGpF,IAwGoFA,AAAKC,KACxFA,8BACAA,6BACAA,sBAAoBD;AA3GrB,IA2GqBA,AAA0BC,IAC9CA,0BAAuBC,iBAAkBD,OACzCA,sBAAoBD;AA7GrB,IA6GqBA,AAAYC,IAChCA,qCACAA,sBAAoBD;AA/GrB,IA+GqBA,AAAOC,IAC3BA,8BACAA,8BAA4BC,eAAgBD,IAC5CA,0BACAA,sBAAoBD;AAnHrB,IAmHqBA,AAA4BC,IAChDA,mCAAiCC,mCAAoCD,KACrEA,sBAAoBD;AArHrB,IAqHqBA,AAAOC,IAC3BA,sBAAoBD;AAtHrB,IAsHqBA,AAAuBC,IAC3CA,8BAA4BC,8BAA+BF;AAvH5D,IAuH4DA,AAAKC,IAChEA,sBAAoBD;AAxHrB,IAwHqBA,AAAuBC,KAC3CA,8BAA4BC,8BAA+BD,IAC3DA,sBAAoBD;AA1HrB,IA0HqBA,AAAOC,IAC3BA,wBACAA,kBAAgBD;AA5HjB,IA4HiBA,AAAYC,KAC5BA,2BAAyBC,4BAA6BD,WACtDA,oBAAkBD;AA9HnB,IA8HmBA,AAA6EC,IAC/FA,mCACAA,gCACAA,wBAAsBC,cAAeD,OACrCA,iCAA+BC,cAAeD,OAC9CA,yBAAuBC,oBAAqBD,GAACC,eAAgBD,MAC7DA,qCACAA,yBAAuBC,uBAAwBD,MAC/CA,2BACAA,oBAAkBD;AAvInB,IAuImBA,AAAOC,IACzBA,uBACAA,gCAA8BD;AAzI/B,IAyI+BA,AAA2BC,IAACC,oBAAqBD,IAACD;AAzIjF,IAyIiFA,AAAUC,QAAMD;AAzIjG,IAyIiGA,AAAKC,KACrGA,8BAA4BD;AA1I7B,IA0I6BA,AAAyBC,IAACC,kBAAmBD,IAACD;AA1I3E,IA0I2EA,AAAUC,WAAOD;AA1I5F,IA0I4FA,AAAKC,KAChGA,6BAA2BD;AA3I5B,IA2I4BA,AAAwBC,IAACC,iBAAkBD,IAACD;AA3IxE,IA2IwEA,AAAUC,WAAOD;AA3IzF,IA2IyFA,AAAKC,KAC7FA,gBAAcD;AA5If,IA4IeA,AAAcC,IAC5BA,6DACAA,qCACAA,gDACAA,2BAAyBC,4BAA6BD,mDAAiDC,oBAAqBD,GAACC,eAAgBD,kBAAgBC,uBAAwBD,SACrLA,uBACAA,yCACAA,wCACAA,uCACAA,gCACAA,4DACAA,qDACAA,kDACAA,gDACAA,wBACAA,2DACAA,qDACAA,2FACAA,8CACAA,iDACAA,oCACAA,mCACAA,uEACAA,6CACAA,yDACAA,iCACAA,gCACAA,2CACAA,0CACAA,6BACAA,6BACAA,8BACAA,8CACAA,mDACAA,6EACAA,0CACAA,oDACAA,wDACAA,+BACAA,+BACAA,4BACAA,yBACAA,wBACAA,sBACAA,kBAAgBD;AAxLjB,IAwLiBA,AAChBA;AAzLD,IAyLCA,AACAA;AA1LD,IA0LCA,AAAeC,IACfA,gBACAA,UAAQD;AA5LT,IA4LSA,AAAUC,IAClBA,UAAQD;AA7LT,IA6LSA,AAAOC,IACfA,YACAA,UACAA,QACAA;AAjMD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","file":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","sourceRoot":"/Users/vedmalex/work/fte2/demo","sourcesContent":["<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"],"template":{"version":"1.0.0","segments":[{"generatedLine":1,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":2,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":3,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":4,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":5,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":6,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":7,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":8,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":9,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":10,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":11,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":12,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":13,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":14,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":15,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":16,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":17,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":18,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":19,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":20,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":21,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":22,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":23,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":24,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":25,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":26,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":27,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":28,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":29,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":30,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":31,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":32,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":33,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":34,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":35,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":36,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":37,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":38,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":39,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":40,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":41,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":42,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":43,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":44,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":45,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":46,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":47,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":48,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":49,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":50,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":51,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":52,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":53,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":54,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":55,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":56,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":57,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":58,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":59,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":60,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":61,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":62,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":63,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":64,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":65,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":66,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":67,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":68,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":69,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":70,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":71,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":72,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":73,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":74,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":75,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":76,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":77,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":78,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":79,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":80,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":81,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":82,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":83,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":84,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":85,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":86,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":87,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":88,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":89,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":90,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":91,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":92,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":93,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":94,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":95,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":96,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":97,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":98,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":99,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":100,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":101,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":102,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":103,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":104,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":105,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":106,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":107,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":108,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":109,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":110,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":111,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":112,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":113,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":114,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":115,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":116,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":117,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":118,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":119,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":120,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":121,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":122,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":123,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":124,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":125,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":126,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":127,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":128,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":129,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":130,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":131,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":132,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":133,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":134,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":135,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":136,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":137,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":138,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":139,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":140,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":141,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":142,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":143,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":144,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":145,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":146,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":147,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":148,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":149,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":150,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":151,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":152,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":153,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":154,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":155,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":156,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":157,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":158,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":159,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":160,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":161,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":162,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":163,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":164,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":165,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":166,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":167,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":168,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":169,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":170,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":171,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":172,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":173,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":174,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":175,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":176,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":177,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":178,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":179,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":180,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":181,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":182,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":183,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":184,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":185,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":186,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":187,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":188,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":189,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":190,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":191,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":192,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":193,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":194,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":195,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":196,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":197,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":198,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":199,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":200,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":201,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":202,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":203,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":204,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":205,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":206,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":207,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":208,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":209,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":210,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":211,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":212,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":213,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":214,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":215,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":216,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":217,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":218,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":219,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":220,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":221,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":222,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":223,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":224,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":225,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":226,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":227,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":228,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":229,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":230,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":231,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":232,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":233,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":234,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":235,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":236,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":237,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":238,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":239,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":240,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":241,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":242,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":243,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":244,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":245,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":246,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":247,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":248,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":249,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":250,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":251,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":252,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":253,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":254,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":255,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":256,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":257,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":258,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":259,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":260,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":261,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":262,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":263,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":264,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":265,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":266,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":267,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":268,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":269,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":270,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":271,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":272,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":273,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":274,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":275,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":276,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":277,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":278,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":279,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":280,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":281,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":282,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":283,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":284,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":285,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":286,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":287,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":288,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":289,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":290,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":291,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":292,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":293,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":294,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":295,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":296,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":297,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":298,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":299,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":300,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":301,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":302,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":303,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":304,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":305,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":306,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":307,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":308,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":309,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":310,"generatedColumn":0,"originalLine":1,"originalColumn":0,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js"},{"generatedLine":8,"generatedColumn":4,"originalLine":2,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":9,"generatedColumn":4,"originalLine":2,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":9,"generatedColumn":4,"originalLine":3,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":10,"generatedColumn":4,"originalLine":3,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":10,"generatedColumn":4,"originalLine":4,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":11,"generatedColumn":4,"originalLine":4,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":11,"generatedColumn":4,"originalLine":5,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":12,"generatedColumn":4,"originalLine":5,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":12,"generatedColumn":4,"originalLine":6,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":13,"generatedColumn":4,"originalLine":6,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":13,"generatedColumn":4,"originalLine":6,"originalColumn":3,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":13,"generatedColumn":8,"originalLine":7,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":13,"generatedColumn":12,"originalLine":8,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":13,"generatedColumn":48,"originalLine":8,"originalColumn":35,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":13,"generatedColumn":68,"originalLine":8,"originalColumn":56,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":13,"generatedColumn":71,"originalLine":8,"originalColumn":57,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":13,"generatedColumn":86,"originalLine":8,"originalColumn":73,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":13,"generatedColumn":94,"originalLine":9,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":13,"generatedColumn":129,"originalLine":10,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":13,"generatedColumn":144,"originalLine":11,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":13,"generatedColumn":161,"originalLine":11,"originalColumn":16,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":13,"generatedColumn":181,"originalLine":11,"originalColumn":37,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":13,"generatedColumn":184,"originalLine":11,"originalColumn":38,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":13,"generatedColumn":199,"originalLine":11,"originalColumn":54,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":13,"generatedColumn":207,"originalLine":12,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":13,"generatedColumn":232,"originalLine":13,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":13,"generatedColumn":242,"originalLine":13,"originalColumn":9,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":14,"generatedColumn":4,"originalLine":13,"originalColumn":9,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":14,"generatedColumn":4,"originalLine":14,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":15,"generatedColumn":4,"originalLine":14,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":15,"generatedColumn":4,"originalLine":15,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":16,"generatedColumn":4,"originalLine":15,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":16,"generatedColumn":4,"originalLine":16,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":17,"generatedColumn":4,"originalLine":16,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":17,"generatedColumn":4,"originalLine":17,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":18,"generatedColumn":4,"originalLine":17,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":18,"generatedColumn":4,"originalLine":18,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":19,"generatedColumn":4,"originalLine":18,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":19,"generatedColumn":4,"originalLine":18,"originalColumn":36,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":19,"generatedColumn":8,"originalLine":19,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":19,"generatedColumn":20,"originalLine":19,"originalColumn":11,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":19,"generatedColumn":59,"originalLine":19,"originalColumn":51,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":19,"generatedColumn":68,"originalLine":20,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":19,"generatedColumn":80,"originalLine":20,"originalColumn":11,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":20,"generatedColumn":4,"originalLine":20,"originalColumn":11,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":20,"generatedColumn":4,"originalLine":21,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":21,"generatedColumn":4,"originalLine":21,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":21,"generatedColumn":4,"originalLine":22,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":22,"generatedColumn":4,"originalLine":22,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":22,"generatedColumn":4,"originalLine":23,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":23,"generatedColumn":4,"originalLine":23,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":23,"generatedColumn":4,"originalLine":23,"originalColumn":11,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":23,"generatedColumn":8,"originalLine":24,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":23,"generatedColumn":20,"originalLine":24,"originalColumn":11,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":23,"generatedColumn":59,"originalLine":24,"originalColumn":51,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":23,"generatedColumn":66,"originalLine":25,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":23,"generatedColumn":78,"originalLine":25,"originalColumn":11,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":24,"generatedColumn":4,"originalLine":25,"originalColumn":11,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":24,"generatedColumn":4,"originalLine":26,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":25,"generatedColumn":4,"originalLine":26,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":25,"generatedColumn":4,"originalLine":26,"originalColumn":53,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":25,"generatedColumn":8,"originalLine":27,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":25,"generatedColumn":22,"originalLine":27,"originalColumn":13,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":26,"generatedColumn":4,"originalLine":27,"originalColumn":13,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":26,"generatedColumn":4,"originalLine":27,"originalColumn":111,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":26,"generatedColumn":8,"originalLine":28,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":26,"generatedColumn":26,"originalLine":28,"originalColumn":17,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":27,"generatedColumn":4,"originalLine":28,"originalColumn":17,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":27,"generatedColumn":4,"originalLine":28,"originalColumn":37,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":27,"generatedColumn":8,"originalLine":29,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":27,"generatedColumn":31,"originalLine":29,"originalColumn":22,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":27,"generatedColumn":58,"originalLine":29,"originalColumn":50,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":27,"generatedColumn":63,"originalLine":30,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":27,"generatedColumn":81,"originalLine":30,"originalColumn":17,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":28,"generatedColumn":4,"originalLine":30,"originalColumn":17,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":28,"generatedColumn":4,"originalLine":30,"originalColumn":24,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":28,"generatedColumn":8,"originalLine":31,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":28,"generatedColumn":34,"originalLine":32,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":28,"generatedColumn":52,"originalLine":32,"originalColumn":17,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":29,"generatedColumn":4,"originalLine":32,"originalColumn":17,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":29,"generatedColumn":4,"originalLine":32,"originalColumn":57,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":29,"generatedColumn":8,"originalLine":33,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":29,"generatedColumn":62,"originalLine":33,"originalColumn":53,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":29,"generatedColumn":75,"originalLine":33,"originalColumn":67,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":29,"generatedColumn":83,"originalLine":34,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":29,"generatedColumn":120,"originalLine":35,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":29,"generatedColumn":162,"originalLine":36,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":29,"generatedColumn":202,"originalLine":37,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":29,"generatedColumn":236,"originalLine":38,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":29,"generatedColumn":259,"originalLine":39,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":29,"generatedColumn":277,"originalLine":39,"originalColumn":17,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":30,"generatedColumn":4,"originalLine":39,"originalColumn":17,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":30,"generatedColumn":4,"originalLine":39,"originalColumn":64,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":30,"generatedColumn":8,"originalLine":40,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":30,"generatedColumn":66,"originalLine":41,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":30,"generatedColumn":88,"originalLine":41,"originalColumn":21,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":30,"generatedColumn":117,"originalLine":41,"originalColumn":51,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":30,"generatedColumn":121,"originalLine":42,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":30,"generatedColumn":146,"originalLine":43,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":30,"generatedColumn":164,"originalLine":43,"originalColumn":17,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":31,"generatedColumn":4,"originalLine":43,"originalColumn":17,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":31,"generatedColumn":4,"originalLine":43,"originalColumn":24,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":31,"generatedColumn":8,"originalLine":44,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":31,"generatedColumn":41,"originalLine":44,"originalColumn":32,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":31,"generatedColumn":61,"originalLine":44,"originalColumn":53,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":31,"generatedColumn":67,"originalLine":45,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":31,"generatedColumn":98,"originalLine":45,"originalColumn":30,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":31,"generatedColumn":116,"originalLine":45,"originalColumn":49,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":31,"generatedColumn":122,"originalLine":46,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":31,"generatedColumn":161,"originalLine":47,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":31,"generatedColumn":204,"originalLine":47,"originalColumn":41,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":31,"generatedColumn":222,"originalLine":47,"originalColumn":60,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":31,"generatedColumn":229,"originalLine":48,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":31,"generatedColumn":260,"originalLine":49,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":31,"generatedColumn":321,"originalLine":50,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":31,"generatedColumn":374,"originalLine":51,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":31,"generatedColumn":424,"originalLine":52,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":31,"generatedColumn":472,"originalLine":53,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":31,"generatedColumn":496,"originalLine":54,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":31,"generatedColumn":555,"originalLine":55,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":31,"generatedColumn":608,"originalLine":56,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":31,"generatedColumn":699,"originalLine":57,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":31,"generatedColumn":745,"originalLine":58,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":31,"generatedColumn":794,"originalLine":59,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":31,"generatedColumn":830,"originalLine":60,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":31,"generatedColumn":865,"originalLine":61,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":31,"generatedColumn":936,"originalLine":62,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":31,"generatedColumn":981,"originalLine":63,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":31,"generatedColumn":1038,"originalLine":64,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":31,"generatedColumn":1071,"originalLine":65,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":31,"generatedColumn":1103,"originalLine":66,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":31,"generatedColumn":1146,"originalLine":67,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":31,"generatedColumn":1188,"originalLine":68,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":31,"generatedColumn":1217,"originalLine":69,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":31,"generatedColumn":1246,"originalLine":70,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":31,"generatedColumn":1276,"originalLine":71,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":31,"generatedColumn":1322,"originalLine":72,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":31,"generatedColumn":1373,"originalLine":73,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":31,"generatedColumn":1450,"originalLine":74,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":31,"generatedColumn":1492,"originalLine":75,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":31,"generatedColumn":1544,"originalLine":76,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":31,"generatedColumn":1600,"originalLine":77,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":31,"generatedColumn":1631,"originalLine":78,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":31,"generatedColumn":1662,"originalLine":79,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":31,"generatedColumn":1690,"originalLine":80,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":31,"generatedColumn":1715,"originalLine":81,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":31,"generatedColumn":1739,"originalLine":82,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":31,"generatedColumn":1761,"originalLine":83,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":31,"generatedColumn":1777,"originalLine":83,"originalColumn":15,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":32,"generatedColumn":4,"originalLine":83,"originalColumn":15,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":32,"generatedColumn":4,"originalLine":83,"originalColumn":91,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":32,"generatedColumn":8,"originalLine":84,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":32,"generatedColumn":71,"originalLine":85,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":32,"generatedColumn":102,"originalLine":86,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":32,"generatedColumn":122,"originalLine":86,"originalColumn":19,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":33,"generatedColumn":4,"originalLine":86,"originalColumn":19,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":33,"generatedColumn":4,"originalLine":86,"originalColumn":44,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":33,"generatedColumn":8,"originalLine":87,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":33,"generatedColumn":30,"originalLine":87,"originalColumn":21,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":33,"generatedColumn":46,"originalLine":87,"originalColumn":38,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":33,"generatedColumn":51,"originalLine":88,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":33,"generatedColumn":71,"originalLine":88,"originalColumn":19,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":34,"generatedColumn":4,"originalLine":88,"originalColumn":19,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":34,"generatedColumn":4,"originalLine":88,"originalColumn":33,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":34,"generatedColumn":8,"originalLine":89,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":34,"generatedColumn":38,"originalLine":90,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":34,"generatedColumn":58,"originalLine":90,"originalColumn":19,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":35,"generatedColumn":4,"originalLine":90,"originalColumn":19,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":35,"generatedColumn":4,"originalLine":90,"originalColumn":26,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":35,"generatedColumn":8,"originalLine":91,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":35,"generatedColumn":28,"originalLine":91,"originalColumn":19,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":36,"generatedColumn":4,"originalLine":91,"originalColumn":19,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":36,"generatedColumn":4,"originalLine":91,"originalColumn":42,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":36,"generatedColumn":8,"originalLine":92,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":36,"generatedColumn":37,"originalLine":92,"originalColumn":27,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":36,"generatedColumn":50,"originalLine":92,"originalColumn":41,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":36,"generatedColumn":57,"originalLine":93,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":36,"generatedColumn":77,"originalLine":93,"originalColumn":19,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":37,"generatedColumn":4,"originalLine":93,"originalColumn":19,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":37,"generatedColumn":4,"originalLine":93,"originalColumn":33,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":37,"generatedColumn":8,"originalLine":94,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":37,"generatedColumn":37,"originalLine":95,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":37,"generatedColumn":59,"originalLine":95,"originalColumn":21,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":38,"generatedColumn":4,"originalLine":95,"originalColumn":21,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":38,"generatedColumn":4,"originalLine":95,"originalColumn":44,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":38,"generatedColumn":8,"originalLine":96,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":38,"generatedColumn":32,"originalLine":96,"originalColumn":23,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":38,"generatedColumn":62,"originalLine":96,"originalColumn":54,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":38,"generatedColumn":67,"originalLine":97,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":38,"generatedColumn":89,"originalLine":97,"originalColumn":21,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":39,"generatedColumn":4,"originalLine":97,"originalColumn":21,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":39,"generatedColumn":4,"originalLine":97,"originalColumn":35,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":39,"generatedColumn":8,"originalLine":98,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":39,"generatedColumn":50,"originalLine":99,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":39,"generatedColumn":72,"originalLine":99,"originalColumn":21,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":40,"generatedColumn":4,"originalLine":99,"originalColumn":21,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":40,"generatedColumn":4,"originalLine":99,"originalColumn":28,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":40,"generatedColumn":8,"originalLine":100,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":40,"generatedColumn":28,"originalLine":100,"originalColumn":19,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":41,"generatedColumn":4,"originalLine":100,"originalColumn":19,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":41,"generatedColumn":4,"originalLine":100,"originalColumn":26,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":41,"generatedColumn":8,"originalLine":101,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":41,"generatedColumn":28,"originalLine":101,"originalColumn":19,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":42,"generatedColumn":4,"originalLine":101,"originalColumn":19,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":42,"generatedColumn":4,"originalLine":101,"originalColumn":43,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":42,"generatedColumn":8,"originalLine":102,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":42,"generatedColumn":37,"originalLine":102,"originalColumn":28,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":42,"generatedColumn":68,"originalLine":102,"originalColumn":60,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":42,"generatedColumn":73,"originalLine":103,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":42,"generatedColumn":93,"originalLine":103,"originalColumn":19,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":43,"generatedColumn":4,"originalLine":103,"originalColumn":19,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":43,"generatedColumn":4,"originalLine":103,"originalColumn":26,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":43,"generatedColumn":8,"originalLine":104,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":43,"generatedColumn":26,"originalLine":104,"originalColumn":17,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":44,"generatedColumn":4,"originalLine":104,"originalColumn":17,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":44,"generatedColumn":4,"originalLine":104,"originalColumn":41,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":44,"generatedColumn":8,"originalLine":105,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":44,"generatedColumn":38,"originalLine":105,"originalColumn":29,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":45,"generatedColumn":4,"originalLine":105,"originalColumn":29,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":45,"generatedColumn":4,"originalLine":105,"originalColumn":52,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":45,"generatedColumn":20,"originalLine":105,"originalColumn":69,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":46,"generatedColumn":4,"originalLine":105,"originalColumn":69,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":46,"generatedColumn":4,"originalLine":105,"originalColumn":79,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":46,"generatedColumn":11,"originalLine":105,"originalColumn":84,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":47,"generatedColumn":4,"originalLine":105,"originalColumn":84,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":47,"generatedColumn":4,"originalLine":105,"originalColumn":89,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":47,"generatedColumn":9,"originalLine":106,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":47,"generatedColumn":39,"originalLine":107,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":47,"generatedColumn":68,"originalLine":108,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":47,"generatedColumn":90,"originalLine":108,"originalColumn":21,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":48,"generatedColumn":4,"originalLine":108,"originalColumn":21,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":48,"generatedColumn":4,"originalLine":108,"originalColumn":47,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":48,"generatedColumn":8,"originalLine":109,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":48,"generatedColumn":34,"originalLine":109,"originalColumn":24,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":48,"generatedColumn":51,"originalLine":109,"originalColumn":42,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":48,"generatedColumn":58,"originalLine":110,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":48,"generatedColumn":80,"originalLine":110,"originalColumn":21,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":49,"generatedColumn":4,"originalLine":110,"originalColumn":21,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":49,"generatedColumn":4,"originalLine":110,"originalColumn":33,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":49,"generatedColumn":8,"originalLine":111,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":49,"generatedColumn":45,"originalLine":112,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":49,"generatedColumn":67,"originalLine":112,"originalColumn":21,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":50,"generatedColumn":4,"originalLine":112,"originalColumn":21,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":50,"generatedColumn":4,"originalLine":112,"originalColumn":28,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":50,"generatedColumn":8,"originalLine":113,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":50,"generatedColumn":38,"originalLine":114,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":50,"generatedColumn":68,"originalLine":114,"originalColumn":29,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":50,"generatedColumn":83,"originalLine":114,"originalColumn":45,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":50,"generatedColumn":87,"originalLine":115,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":50,"generatedColumn":113,"originalLine":116,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":50,"generatedColumn":135,"originalLine":116,"originalColumn":21,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":51,"generatedColumn":4,"originalLine":116,"originalColumn":21,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":51,"generatedColumn":4,"originalLine":116,"originalColumn":49,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":51,"generatedColumn":8,"originalLine":117,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":51,"generatedColumn":43,"originalLine":117,"originalColumn":34,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":51,"generatedColumn":78,"originalLine":117,"originalColumn":70,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":51,"generatedColumn":83,"originalLine":118,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":51,"generatedColumn":105,"originalLine":118,"originalColumn":21,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":52,"generatedColumn":4,"originalLine":118,"originalColumn":21,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":52,"generatedColumn":4,"originalLine":118,"originalColumn":28,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":52,"generatedColumn":8,"originalLine":119,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":52,"generatedColumn":30,"originalLine":119,"originalColumn":21,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":53,"generatedColumn":4,"originalLine":119,"originalColumn":21,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":53,"generatedColumn":4,"originalLine":119,"originalColumn":44,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":53,"generatedColumn":8,"originalLine":120,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":53,"generatedColumn":38,"originalLine":120,"originalColumn":29,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":53,"generatedColumn":68,"originalLine":120,"originalColumn":60,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":54,"generatedColumn":4,"originalLine":120,"originalColumn":60,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":54,"generatedColumn":4,"originalLine":120,"originalColumn":65,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":54,"generatedColumn":8,"originalLine":121,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":54,"generatedColumn":30,"originalLine":121,"originalColumn":21,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":55,"generatedColumn":4,"originalLine":121,"originalColumn":21,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":55,"generatedColumn":4,"originalLine":121,"originalColumn":44,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":55,"generatedColumn":9,"originalLine":122,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":55,"generatedColumn":39,"originalLine":122,"originalColumn":29,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":55,"generatedColumn":69,"originalLine":122,"originalColumn":60,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":55,"generatedColumn":73,"originalLine":123,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":55,"generatedColumn":95,"originalLine":123,"originalColumn":21,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":56,"generatedColumn":4,"originalLine":123,"originalColumn":21,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":56,"generatedColumn":4,"originalLine":123,"originalColumn":28,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":56,"generatedColumn":8,"originalLine":124,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":56,"generatedColumn":32,"originalLine":125,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":56,"generatedColumn":50,"originalLine":125,"originalColumn":17,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":57,"generatedColumn":4,"originalLine":125,"originalColumn":17,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":57,"generatedColumn":4,"originalLine":125,"originalColumn":29,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":57,"generatedColumn":9,"originalLine":126,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":57,"generatedColumn":36,"originalLine":126,"originalColumn":26,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":57,"generatedColumn":64,"originalLine":126,"originalColumn":55,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":57,"generatedColumn":75,"originalLine":127,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":57,"generatedColumn":95,"originalLine":127,"originalColumn":19,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":58,"generatedColumn":4,"originalLine":127,"originalColumn":19,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":58,"generatedColumn":4,"originalLine":127,"originalColumn":96,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":58,"generatedColumn":8,"originalLine":128,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":58,"generatedColumn":43,"originalLine":129,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":58,"generatedColumn":75,"originalLine":130,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":58,"generatedColumn":99,"originalLine":130,"originalColumn":23,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":58,"generatedColumn":113,"originalLine":130,"originalColumn":38,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":58,"generatedColumn":120,"originalLine":131,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":58,"generatedColumn":153,"originalLine":131,"originalColumn":32,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":58,"generatedColumn":167,"originalLine":131,"originalColumn":47,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":58,"generatedColumn":174,"originalLine":132,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":58,"generatedColumn":199,"originalLine":132,"originalColumn":24,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":58,"generatedColumn":219,"originalLine":132,"originalColumn":45,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":58,"generatedColumn":222,"originalLine":132,"originalColumn":46,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":58,"generatedColumn":237,"originalLine":132,"originalColumn":62,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":58,"generatedColumn":243,"originalLine":133,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":58,"generatedColumn":280,"originalLine":134,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":58,"generatedColumn":305,"originalLine":134,"originalColumn":24,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":58,"generatedColumn":328,"originalLine":134,"originalColumn":48,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":58,"generatedColumn":334,"originalLine":135,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":58,"generatedColumn":361,"originalLine":136,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":58,"generatedColumn":381,"originalLine":136,"originalColumn":19,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":59,"generatedColumn":4,"originalLine":136,"originalColumn":19,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":59,"generatedColumn":4,"originalLine":136,"originalColumn":26,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":59,"generatedColumn":8,"originalLine":137,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":59,"generatedColumn":31,"originalLine":138,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":59,"generatedColumn":63,"originalLine":138,"originalColumn":31,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":60,"generatedColumn":4,"originalLine":138,"originalColumn":31,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":60,"generatedColumn":4,"originalLine":138,"originalColumn":58,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":60,"generatedColumn":8,"originalLine":138,"originalColumn":59,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":60,"generatedColumn":28,"originalLine":138,"originalColumn":80,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":60,"generatedColumn":32,"originalLine":138,"originalColumn":81,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":61,"generatedColumn":4,"originalLine":138,"originalColumn":81,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":61,"generatedColumn":4,"originalLine":138,"originalColumn":91,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":61,"generatedColumn":12,"originalLine":138,"originalColumn":97,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":62,"generatedColumn":4,"originalLine":138,"originalColumn":97,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":62,"generatedColumn":4,"originalLine":138,"originalColumn":102,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":62,"generatedColumn":9,"originalLine":139,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":62,"generatedColumn":39,"originalLine":139,"originalColumn":29,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":63,"generatedColumn":4,"originalLine":139,"originalColumn":29,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":63,"generatedColumn":4,"originalLine":139,"originalColumn":54,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":63,"generatedColumn":8,"originalLine":139,"originalColumn":55,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":63,"generatedColumn":26,"originalLine":139,"originalColumn":74,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":63,"generatedColumn":30,"originalLine":139,"originalColumn":75,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":64,"generatedColumn":4,"originalLine":139,"originalColumn":75,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":64,"generatedColumn":4,"originalLine":139,"originalColumn":85,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":64,"generatedColumn":15,"originalLine":139,"originalColumn":92,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":65,"generatedColumn":4,"originalLine":139,"originalColumn":92,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":65,"generatedColumn":4,"originalLine":139,"originalColumn":97,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":65,"generatedColumn":9,"originalLine":140,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":65,"generatedColumn":38,"originalLine":140,"originalColumn":28,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":66,"generatedColumn":4,"originalLine":140,"originalColumn":28,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":66,"generatedColumn":4,"originalLine":140,"originalColumn":52,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":66,"generatedColumn":8,"originalLine":140,"originalColumn":53,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":66,"generatedColumn":25,"originalLine":140,"originalColumn":71,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":66,"generatedColumn":29,"originalLine":140,"originalColumn":72,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":67,"generatedColumn":4,"originalLine":140,"originalColumn":72,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":67,"generatedColumn":4,"originalLine":140,"originalColumn":82,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":67,"generatedColumn":15,"originalLine":140,"originalColumn":89,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":68,"generatedColumn":4,"originalLine":140,"originalColumn":89,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":68,"generatedColumn":4,"originalLine":140,"originalColumn":94,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":68,"generatedColumn":9,"originalLine":141,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":68,"generatedColumn":25,"originalLine":141,"originalColumn":15,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":69,"generatedColumn":4,"originalLine":141,"originalColumn":15,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":69,"generatedColumn":4,"originalLine":141,"originalColumn":29,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":69,"generatedColumn":8,"originalLine":142,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":69,"generatedColumn":69,"originalLine":143,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":69,"generatedColumn":106,"originalLine":144,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":69,"generatedColumn":154,"originalLine":145,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":69,"generatedColumn":181,"originalLine":145,"originalColumn":26,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":69,"generatedColumn":209,"originalLine":145,"originalColumn":55,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":69,"generatedColumn":260,"originalLine":145,"originalColumn":104,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":69,"generatedColumn":280,"originalLine":145,"originalColumn":125,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":69,"generatedColumn":283,"originalLine":145,"originalColumn":126,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":69,"generatedColumn":298,"originalLine":145,"originalColumn":142,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":69,"generatedColumn":316,"originalLine":145,"originalColumn":158,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"expression","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":69,"generatedColumn":339,"originalLine":145,"originalColumn":182,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":69,"generatedColumn":348,"originalLine":146,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":69,"generatedColumn":371,"originalLine":147,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":69,"generatedColumn":412,"originalLine":148,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":69,"generatedColumn":452,"originalLine":149,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":69,"generatedColumn":491,"originalLine":150,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":69,"generatedColumn":523,"originalLine":151,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":69,"generatedColumn":583,"originalLine":152,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":69,"generatedColumn":636,"originalLine":153,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":69,"generatedColumn":686,"originalLine":154,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":69,"generatedColumn":734,"originalLine":155,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":69,"generatedColumn":758,"originalLine":156,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":69,"generatedColumn":817,"originalLine":157,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":69,"generatedColumn":870,"originalLine":158,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":69,"generatedColumn":961,"originalLine":159,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":69,"generatedColumn":1007,"originalLine":160,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":69,"generatedColumn":1056,"originalLine":161,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":69,"generatedColumn":1092,"originalLine":162,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":69,"generatedColumn":1127,"originalLine":163,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":69,"generatedColumn":1198,"originalLine":164,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":69,"generatedColumn":1243,"originalLine":165,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":69,"generatedColumn":1300,"originalLine":166,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":69,"generatedColumn":1333,"originalLine":167,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":69,"generatedColumn":1365,"originalLine":168,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":69,"generatedColumn":1408,"originalLine":169,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":69,"generatedColumn":1450,"originalLine":170,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":69,"generatedColumn":1479,"originalLine":171,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":69,"generatedColumn":1508,"originalLine":172,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":69,"generatedColumn":1538,"originalLine":173,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":69,"generatedColumn":1584,"originalLine":174,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":69,"generatedColumn":1635,"originalLine":175,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":69,"generatedColumn":1712,"originalLine":176,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":69,"generatedColumn":1754,"originalLine":177,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":69,"generatedColumn":1806,"originalLine":178,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":69,"generatedColumn":1862,"originalLine":179,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":69,"generatedColumn":1893,"originalLine":180,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":69,"generatedColumn":1924,"originalLine":181,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":69,"generatedColumn":1952,"originalLine":182,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":69,"generatedColumn":1977,"originalLine":183,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":69,"generatedColumn":2001,"originalLine":184,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":69,"generatedColumn":2023,"originalLine":185,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":69,"generatedColumn":2041,"originalLine":185,"originalColumn":17,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":70,"generatedColumn":4,"originalLine":185,"originalColumn":17,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":70,"generatedColumn":4,"originalLine":186,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":71,"generatedColumn":4,"originalLine":186,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":71,"generatedColumn":4,"originalLine":187,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":72,"generatedColumn":4,"originalLine":187,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":72,"generatedColumn":4,"originalLine":187,"originalColumn":16,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":72,"generatedColumn":8,"originalLine":188,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":72,"generatedColumn":24,"originalLine":189,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":72,"generatedColumn":34,"originalLine":189,"originalColumn":9,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":73,"generatedColumn":4,"originalLine":189,"originalColumn":9,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":73,"generatedColumn":4,"originalLine":189,"originalColumn":19,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":73,"generatedColumn":8,"originalLine":190,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":73,"generatedColumn":18,"originalLine":190,"originalColumn":9,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":74,"generatedColumn":4,"originalLine":190,"originalColumn":9,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"code","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":74,"generatedColumn":4,"originalLine":190,"originalColumn":16,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":74,"generatedColumn":8,"originalLine":191,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":74,"generatedColumn":20,"originalLine":192,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":74,"generatedColumn":30,"originalLine":193,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"},{"generatedLine":74,"generatedColumn":38,"originalLine":194,"originalColumn":1,"source":"generators/server/Meta.Thing/ext.grid-thing.metagridcombo.njs.js","name":"text","content":"<#@ noContent #>\n<#-\n  //Helpers for generation\n  let properties = [...context.gridviewProps].sort((a,b)=>a.property.propertyName > b.property.propertyName? 1:-1 )\n\n#>\n\nExt.define('Grainjs.metagridcombo.#{context.$namespace}.#{context.$name}', {\n  override: 'Grainjs.metadata',\n  statics:{\n    'gridcombo.#{context.$namespace}.#{context.$name}': {\n      comboOptions: {\n        <#-\n          // отфильтровать свойства по видимости на форме...\n        for(let i=0; i<properties.length; i++){\n          let property = properties[i].property;\n          const props = context.formPropsHash[property.propertyName].filter(f=>f.generated)\n          if(props.length === 0){#>\n          #{JSON.stringify(property.propertyName)}: {},\n          <#} else {\n          for(let j = 0; j < props.length; j++){\n            const f = props[j]\n        #>\n          #{JSON.stringify(property.propertyName)}: {\n          <#- if(f.comboData && f.comboData!=\"\" && f.comboData!=\"{}\") {\n              let cdata = JSON.parse(f.comboData);#>\n            <#- if(cdata.store!=undefined && cdata.displayField!=undefined && cdata.valueField!=undefined) {#>\n                <#- if(cdata.tpl){#>\n                tpl: #{JSON.stringify(cdata.tpl)},\n                <#- }#>\n                store:\n                <#- if(typeof(cdata.store)==\"string\"){#>\n                  ()=>Ext.create('Modeleditor.store.#{cdata.store}', {\n                  autoLoad: true,\n                  remoteFilter: false,\n                  remoteSort: false,\n                  pageSize: -1\n                }),\n                <#- } else if(typeof(cdata.store)==\"object\"){#>\n                  ()=>Ext.create(\"Ext.data.Store\", {\n                    #{JSON.stringify(cdata.store)}\n                  }),\n                <#- }#>\n                displayField: '#{cdata.displayField}',\n                valueField: '#{cdata.valueField}',\n                queryMode: 'local',\n                // queryParam: \"filter::#{cdata.valueField}\",\n                listeners:{\n                  focus: function(combo, event, eOpts ) {\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n              <#- } else if(cdata.customStore!=undefined && cdata.customStore === true){#>\n                store: ()=>Ext.create(\"Ext.data.Store\", {\n                  autoSync:\n                  <#- if(cdata.autoSync){#>\n                    #{cdata.autoSync},\n                  <#- } else {#>\n                    false,\n                  <#- }#>\n                  <#-  if(cdata.model){#>\n                  model: \"#{cdata.model}\",\n                  <#- } else {#>\n                  fields:\n                    <#- if(cdata.fields){#>\n                      #{JSON.stringify(cdata.fields)},\n                    <#- } else {#>\n                    ['name', 'value'],\n                    <#- }#>\n                  <#- }#>\n                  <#- if(cdata.sorters){#>\n                  sorters: #{JSON.stringify(cdata.sorters)},\n                  <#- }#>\n                <#- if(cdata.apiRead){#>\n                  autoLoad: <#if(cdata.autoLoad){#>#{cdata.autoLoad}<#}else{#>false<#}#>,\n                  proxy: {\n                    type:\n                    <#- if(cdata.proxyType){#>\n                      \"#{cdata.proxyType}\",\n                    <#- }else{#>\n                      \"direct\",\n                    <#- }#>\n                    api: {\n                      read: #{cdata.apiRead}\n                    },\n                    <#- if(cdata.extraParams){#>\n                    extraParams: #{JSON.stringify(cdata.extraParams)},\n                    <#- }#>\n                    <#- if(cdata.reader){#>\n                    reader: #{JSON.stringify(cdata.reader)}<#}#>\n                    <#- if(cdata.writer){#>,\n                    writer: #{JSON.stringify(cdata.writer)}\n                    <#- }#>\n                  },\n                <#- }else{#>,\n                  data: (#{JSON.stringify(cdata.data)} || [])\n                  <#-  const displayField = cdata.displayField ? cdata.displayField : 'name' #>\n                  .map(item=>({\n                    ...item,\n                    ['#{displayField}']:\n                      _t(item['#{displayField}'],\n                      '#{context.$namespace}.#{context.$name}',\n                      'combobox',\n                      '#{property.propertyName}')\n                    }))\n                  <#- }#>\n                }),\n                displayField: <#if(cdata.displayField){#>\"#{cdata.displayField}\"<#}else{#>'name'<#}#>,\n                valueField: <#if(cdata.valueField){#>\"#{cdata.valueField}\"<#}else{#>\"value\"<#}#>,\n                queryMode: <#if(cdata.queryMode){#>\"#{cdata.queryMode}\"<#}else{#>\"local\"<#}#>,\n              <#- } else {#>\n                store:()=> Ext.create('Ext.data.Store', {\n                  autoLoad: true,\n                  fields: ['name', 'value'],\n                  data: (#{JSON.stringify(cdata.data)} || []).map(item=>({...item, name: _t(item.name,'#{context.$namespace}.#{context.$name}', 'combobox', '#{property.propertyName}')}))\n                }),\n                displayField: 'name',\n                valueField: 'value',\n                queryMode: 'local',\n                listeners: {\n                  focus: function(combo, event, eOpts ){\n                    let store = combo.getStore();\n                    combo.queryFilter = false;\n                    store.clearFilter(true);\n                  },\n                  afterrender: function (combo, opts) {\n                    let store = combo.getStore();\n                    store.clearFilter(true); // If true the filter is cleared silently;\n                    if(store.isLoading()){\n                      combo.setLoading(true);\n                      store.on({\n                        load: {\n                          fn: function(st, records, success, opts){\n                            if(success) {\n                              this.setLoading(false);\n                            }\n                          },\n                          scope: combo,\n                          single: true\n                        }\n                      });\n                    }else{\n                      if (!store.loaded) {\n                        combo.setLoading(true);\n                        store.load(function(records, operation, success){\n                          if(success){\n                            store.loaded = true;\n                            combo.setLoading(false);\n                          }\n                        });\n                      };\n                    }\n                  },\n                },\n                <#\n              }\n            }#>\n          },\n        <#- } } #>\n        <#- }#>\n      },\n    },\n  },\n})\n\n"}]}}